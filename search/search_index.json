{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"index","text":"<p>Some notes.</p>"},{"location":"ICSPA-x86/PA0/","title":"PA0 note","text":"<p>PA0 \u7684\u76ee\u7684\u662f\u719f\u6089 x86-PA \u7684\u5b9e\u9a8c\u73af\u5883\uff0c\u8fd9\u91cc\u53ea\u989d\u5916\u653e\u4e00\u4e9b\u4e2a\u4eba\u7684 Tips</p>"},{"location":"ICSPA-x86/PA0/#beautify-your-workspace","title":"Beautify your workspace","text":"<p>\u5b9e\u9a8c\u73af\u5883\u662f\u4e00\u4e2a Debian \u670d\u52a1\u5668\uff0cPA \u5b9e\u9a8c\u7f51\u7ad9\u901a\u8fc7 Websocket \u4e0e\u8fdc\u7a0b Shell \u8fdb\u884c\u957f\u671f\u4ea4\u4e92\uff08\u4e0d\u662f\u5f88\u597d\u7528\uff09\uff0c\u6211\u4eec\u5e0c\u671b\u642d\u5efa\u4e00\u4e2a\u66f4\u52a0\u719f\u6089\u7684\u5b9e\u9a8c\u73af\u5883</p> <p>\u8fd9\u91cc\u8003\u8651\u4e24\u4e2a\u65b9\u5411\uff1a</p>"},{"location":"ICSPA-x86/PA0/#vim-user","title":"Vim User","text":"<p>\u5728\u81ea\u5df1\u7684 Shell \u4e2d\u8fdb\u884c SSH \u8fde\u63a5\uff0c\u4f7f\u7528 Vim \u6253\u5f00\u6587\u4ef6\uff0c\u6b64\u65f6\u4f7f\u7528\u7684\u662f\u672c\u673a\u7684 Vim\uff0c\u56e0\u6b64\u53ef\u4ee5\u56de\u5230\u719f\u6089\u7684 Vim \u73af\u5883\u4e2d</p>"},{"location":"ICSPA-x86/PA0/#vscode-user","title":"VSCode User","text":"<p>\u5728 VSCode \u4e2d\u4f7f\u7528 SSH FS \u63d2\u4ef6\uff08\u4e0d\u8981\u7528\u5b98\u65b9\u7684 SSH\uff09\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5728\u672c\u5730 VScode \u8fdb\u884c\u5b9e\u9a8c</p> <p>\u4e0d\u4f7f\u7528\u5b98\u65b9\u63d2\u4ef6\u7684\u539f\u56e0\u662f\u5b98\u65b9\u63d2\u4ef6\u9700\u8981\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u4e0b\u8f7d\u4e00\u4e9b\u914d\u7f6e\uff0c\u800c\u8fdc\u7a0b\u670d\u52a1\u5668\u5bf9 <code>pa_nju</code> \u6587\u4ef6\u5939\u4ee5\u5916\u7684\u5199\u64cd\u4f5c\u9ad8\u5ea6\u53d7\u9650\uff0cVSCode \u65e0\u6cd5\u4e0b\u8f7d\u4f7f\u7528 SSH \u524d\u7684\u914d\u7f6e\u5185\u5bb9</p> <p>\u4ee5\u53ca\u5982\u679c\u4f60\u771f\u7684\u5c1d\u8bd5\u5728 <code>pa_nju</code> \u6587\u4ef6\u5939\u5185\u5b89\u88c5\u8fd9\u4e9b\u5185\u5bb9\uff0csubmit \u65f6\u4f60\u4f1a\u53d1\u73b0\u4f5c\u4e1a\u538b\u7f29\u5305\u7684\u4f53\u79ef\u53ef\u80fd\u5f88\u5927\uff0c\u4ee5\u53ca\u63d0\u4ea4\u7a97\u53e3\u9650\u5236\u538b\u7f29\u5305\u5927\u5c0f\u4e0d\u8d85\u8fc7 200MB</p>"},{"location":"ICSPA-x86/PA0/#backup-your-code","title":"Backup your code","text":"<p>\u5982\u679c\u60f3\u5c06\u4e00\u4efd\u5b8c\u6574\u7684\u73af\u5883\u4e0b\u8f7d\u5230\u672c\u5730\u8fdb\u884c\u5907\u4efd\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 SFTP\u3002\u5728 Windows/Mac \u4e0a\u4f60\u53ef\u4ee5\u4f7f\u7528 FileZilla\uff0c\u5728 Linux \u4e0a\u76f4\u63a5 <code>sftp</code> \u5373\u53ef</p> <p>\u5907\u4efd\u5b8c\u6574\u73af\u5883\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u867d\u7136\u5b66\u4f1a Git \u64cd\u4f5c\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u56de\u6863\uff08\u6bcf\u4e00\u6b21 make \u64cd\u4f5c\u90fd\u4f1a\u8fdb\u884c\u4e00\u6b21 git commit\uff09</p>"},{"location":"ICSPA-x86/PA0/#learn-to-read-the-friendly-manual","title":"Learn to \"Read the friendly manual\"","text":"<p>\u5b57\u9762\u610f\u601d\uff0c\u4ee5\u53ca\u5f88\u591a\u624b\u518c\u5176\u5b9e\u5e76\u6ca1\u6709\u90a3\u4e48 friendly\uff0c\u751a\u81f3\u662f buggy \u7684</p> <p>\u9690\u5fcd\u3002</p>"},{"location":"ICSPA-x86/PA0/#decrypt-the-submit_zip-for-fun","title":"Decrypt the submit_zip (for fun)","text":"<p>\u6bcf\u6b21 make submit \u65f6\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u52a0\u5bc6\u7684\u538b\u7f29\u5305\uff0c\u52a0\u5bc6\u7528\u7684\u7a0b\u5e8f submit \u662f\u7531 PyInstaller \u6253\u5305\u7684 Python \u53ef\u6267\u884c\u6587\u4ef6\uff0c\u611f\u5174\u8da3\u7684\u8bdd\u53ef\u4ee5\u5c1d\u8bd5\u9006\u5411\uff0c\u627e\u627e\u538b\u7f29\u5305\u5bc6\u7801\u7684\u751f\u6210\u65b9\u5f0f</p> <p>\u867d\u7136\u89e3\u5bc6\u540e\u7684\u538b\u7f29\u5305\u91cc\u9762\u4e5f\u6ca1\u6709\u4ec0\u4e48\u597d\u73a9\u7684\u4e1c\u897f\uff0c\u57fa\u672c\u4e0a\u5c31\u662f\u6253\u5305\u4e86\u4e00\u4efd\u5b9e\u9a8c\u73af\u5883</p> <p><code>i_love_ics_pa</code></p>"},{"location":"ICSPA-x86/PA0/#reading-before-coding-thinking-before-asking-rethinking-before-denying","title":"Reading before coding, thinking before asking, rethinking before denying","text":"<p>\u201c\u5148\u8bfb\u800c\u540e\u5199\uff0c\u5148\u601d\u800c\u540e\u95ee\uff0c\u5148\u7701\u800c\u540e\u65ad\u3002\u201d\uff08\u5947\u602a\u7684\u7ffb\u8bd1\uff09</p> <p>\u8fd9\u53e5\u8bdd\u6211\u5199\u7684\uff0c\u6211\u89c9\u5f97\u5199\u7684\u5f88\u597d\u3002</p>"},{"location":"ICSPA-x86/PA1/","title":"PA1","text":"<p>// UNDER DESTRUCTION //</p> <p>\u8fd8\u6ca1\u5199\uff0c\u8fd9\u91cc\u5148\u628a\u6211\u89c9\u5f97\u6700\u91cd\u8981\u7684\u4e24\u4e2a tips \u5199\u4e00\u4e0b\uff1a</p> <ul> <li>\u5b66\u4f1a\u5c01\u88c5\u51fd\u6570\uff0cdebug \u8d77\u6765\u4f1a\u5f88\u8212\u670d\uff08\u6bd4\u5982\u5206\u79bb\u8ba1\u7b97\u6570\u636e\u548c\u8ba1\u7b97 flag\u7684\u51fd\u6570\uff1b\u50cf PA2-1 \u4e00\u6837\u7edf\u4e00\u5c01\u88c5\u64cd\u4f5c\u6a21\u677f\uff09</li> <li>\u6ce8\u610f\u7b26\u53f7\u62d3\u5c55</li> </ul>"},{"location":"ICSPA-x86/PA2-1/","title":"PA2-1 note","text":"<p>\u53ef\u4ee5\u5148\u53bb\u770b i386 \u7684\u6307\u4ee4\u7ed3\u6784 (for PA2) \u4e86\u89e3\u4e00\u6761\u6307\u4ee4\u7684\u89e3\u6790\u8fc7\u7a0b</p> <p>\u7531\u4e8e i386 \u624b\u518c\u4e0a\u5b58\u5728\u4e00\u4e9b\u4e25\u91cd\u5f71\u54cdPA\u8fdb\u884c\u7684\u7b14\u8bef\uff0c\u6240\u4ee5\u8bf7\u65f6\u523b\u6ce8\u610f\u624b\u518c\u662f\u5426\u5b58\u5728\u7b14\u8bef\uff08\u5c24\u5176\u662f\u51fa\u73b0\u96be\u4ee5\u7406\u89e3\u7684\u9519\u8bef\u65f6\uff09</p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u4fee\u6b63\u540e\u7684 i386 \u624b\u518c https://github.com/NJU-ProjectN/i386-manual </p> <p>\u4e0a\u9762\u7684\u624b\u518c\u4e5f\u4f1a\u5b58\u5728\u672a\u4fee\u6b63\u7684\u90e8\u5206\uff0c\u4f60\u5e94\u8be5\u8fdb\u884c\u4e09\u65b9\u9762\u9a8c\u8bc1\uff1a</p> <p>\u624b\u518c - PA \u6846\u67b6\u4ee3\u7801 - \u8fd9\u4e2a\u94fe\u63a5</p> <p>\u672c note \u57fa\u672c\u4e0d\u4f1a\u7ed9\u51fa\u4ee3\u7801\u5b9e\u73b0\uff0c\u66f4\u63a5\u8fd1\u4e8e\u5bf9\u5b9e\u9a8c\u624b\u518c\u7684\u89e3\u8bfb</p>"},{"location":"ICSPA-x86/PA2-1/#nemu","title":"NEMU \u5982\u4f55\u6267\u884c\u6307\u4ee4\uff1f","text":"<p>\u6307\u4ee4\u5faa\u73af\u7684\u5b9e\u73b0\u5bf9\u5e94<code>nemu/src/cpu/cpu.c</code>\u4e2d<code>void exec(uint32_t)</code>\u51fd\u6570\u4e2d\u7684<code>while</code>\u5faa\u73af\u3002\u5176\u4e2d\uff0c<code>exec()</code>\u51fd\u6570\u7684\u53c2\u6570\u4e3a\u9700\u8981\u6267\u884c\u7684\u6307\u4ee4\u6761\u6570\uff0c\u5f53\u6ee1\u8db3\u6761\u4ef6\u65f6\uff0cCPU\u5c06\u4e0d\u65ad\u5730\u6267\u884c\u6307\u4ee4\u3002</p> <p>\u5728<code>exec()</code>\u51fd\u6570\u7684<code>while</code>\u5faa\u73af\u4e2d\uff0c\u8bed\u53e5<code>len = exec_inst()</code>\u8c03\u7528\u4e86\u51fd\u6570<code>exec_inst()</code>\u3002\u901a\u8fc7\u9605\u8bfb\u4ee3\u7801\u6ce8\u91ca\uff0c\u53ef\u4ee5\u4e86\u89e3\u5230<code>exec_inst()</code>\u51fd\u6570\u7684\u529f\u80fd\u662f\u6267\u884cEIP\u6307\u5411\u7684\u6307\u4ee4\uff0c\u5e76\u8fd4\u56de\u6307\u4ee4\u7684\u957f\u5ea6\u3002</p> <p>\u8fd9\u91cc\u8d34\u51fa <code>exec</code> \u51fd\u6570\u7684\u4ee3\u7801\uff0c\u4e86\u89e3 NEMU \u5982\u4f55\u5b8c\u6210\u5bf9\u4e00\u7cfb\u5217\u6307\u4ee4\u7684\u6267\u884c\uff1a</p> <p>\u82f1\u6587\u6ce8\u91ca\u662f\u539f\u7a0b\u5e8f\u81ea\u5e26\u7684\uff0c\u4e0d\u4f5c\u6539\u52a8</p> <pre><code>void exec(uint32_t n)   // uint32_t n \u4f5c\u4e3a\u6307\u4ee4\u6761\u6570\u4f20\u5165\u51fd\u6570\n{\n    // \u521d\u59cb\u5316\u90e8\u5206\n    static BP *bp = NULL;           // BP \u5373 BreakPoint\uff0c\u5b83\u662f\u4e00\u4e2a\u6307\u5411\u5f53\u524d\u65ad\u70b9\u7684\u6307\u9488\n    verbose = (n &lt;= 100000);        // \u4e00\u4e2a bool \u53d8\u91cf\uff0c\u4f5c\u7528\u53c2\u8003\u540e\u9762\u7684\u8865\u5145\u5185\u5bb9\n    int instr_len = 0;              // \u5b58\u50a8\u6bcf\u6761\u6307\u4ee4\u7684\u957f\u5ea6\n    bool hit_break_rerun = false;   // \u6807\u8bb0\u5f53\u524d\u662f\u5426\u4e3a\u201c\u4ece\u65ad\u70b9\u72b6\u6001\u6062\u590d\u6267\u884c\u201d\n\n    if (nemu_state == NEMU_BREAK)   // \u5224\u65ad\u5f53\u524d\u662f\u5426\u4e3a\u201c\u4ece\u65ad\u70b9\u72b6\u6001\u6062\u590d\u6267\u884c\u201d\n    {\n        hit_break_rerun = true;\n    }\n\n    nemu_state = NEMU_RUN;          // NEMU \u7684\u72b6\u6001\u88ab\u8bbe\u5b9a\u4e3a RUN\uff08\u6b63\u5728\u8fd0\u884c\uff09\n    while (n &gt; 0 &amp;&amp; nemu_state == NEMU_RUN)     // \u9010\u6761\u6267\u884c\u7a0b\u5e8f\u7684\u4e3b\u5faa\u73af\n    {\n        if(!is_nemu_hlt)                        // HALT \u662f\u201c\u505c\u6b62\u8fd0\u884c\u201d \u7684\u6307\u4ee4\n        {\n            instr_len = exec_inst();            // \u6267\u884c\u4e00\u6761\u6307\u4ee4\uff0c\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u6307\u4ee4\u957f\u5ea6\n            cpu.eip += instr_len;               // eip \u5728\u8fd9\u91cc\u5c31\u662f PC \u7684\u5177\u4f53\u5b9e\u73b0\n            n--;                                // \u5f85\u8fd0\u884c\u6307\u4ee4\u6570 -1\n\n            if (hit_break_rerun)                // \u5982\u679c\u662f\u201c\u4ece\u65ad\u70b9\u72b6\u6001\u6062\u590d\u6267\u884c\u201d\uff0c\u8fdb\u884c\u6062\u590d\u64cd\u4f5c\n            {\n                resume_breakpoints();\n                hit_break_rerun = false;\n            }\n            // \u8fd9\u90e8\u5206\u5185\u5bb9\u662f \u201c\u65ad\u70b9\u68c0\u6d4b\u201d\n            // check for breakpoints\n            if (nemu_state == NEMU_BREAK)\n            {\n                // find break in the list\n                bp = find_breakpoint(cpu.eip - 1);\n                if (bp)\n                {\n                    // found, then restore the original opcode\n                    vaddr_write(bp-&gt;addr, SREG_CS, 1, bp-&gt;ori_byte);\n                    cpu.eip--;\n                }\n                // not found, it is triggered by BREAK_POINT in the code, do nothing\n            }\n\n            // \u8fd9\u90e8\u5206\u5185\u5bb9\u662f\u201c\u6807\u8bb0\u70b9\u68c0\u6d4b\u201d\n            // check for watchpoints\n\n            BP *wp = scan_watchpoint();\n            if (wp != NULL)\n            {\n                // print_bin_instr(eip_temp, instr_len);\n                // puts(assembly);\n                printf(\"\\n\\nHit watchpoint %d at address 0x%08x, expr = %s\\n\", wp-&gt;NO, cpu.eip - instr_len, wp-&gt;expr);\n                printf(\"old value = %#08x\\nnew value = %#08x\\n\", wp-&gt;old_val, wp-&gt;new_val);\n                wp-&gt;old_val = wp-&gt;new_val;\n                nemu_state = NEMU_READY;\n                break;\n            }\n        }\n\n    // \u8fd9\u91cc\u662f\u5916\u63a5\u8bbe\u5907\u7684\u5904\u7406\uff08\u5728 PA 4-2: \u5916\u8bbe\u4e0eI/O \u624d\u4f1a\u901a\u8fc7\u6dfb\u52a0\u5b8f\u542f\u7528\uff09\n#if defined(HAS_DEVICE_TIMER) || defined(HAS_DEVICE_VGA) || defined(HAS_DEVICE_KEYBOARD) || defined(HAS_DEVICE_AUDIO)\n    do_devices();\n#endif\n    // \u8fd9\u91cc\u662f\u4e2d\u65ad\u5904\u7406\uff08\u5728 PA 4-1: \u5f02\u5e38\u548c\u4e2d\u65ad\u7684\u54cd\u5e94 \u624d\u4f1a\u901a\u8fc7\u6dfb\u52a0\u5b8f\u542f\u7528\uff09\n#ifdef IA32_INTR\n        // check for interrupt\n        do_intr();\n#endif\n    }\n    if (nemu_state == NEMU_STOP)            // \u865a\u62df\u673a\u505c\u6b62\u8fd0\u884c\n    {\n        printf(\"NEMU2 terminated\\n\");\n    // \u8fd9\u91cc\u4e5f\u662f\u4e2d\u65ad\u5904\u7406\uff0cPA 4-1 \u4f1a\u6709\u66f4\u8be6\u7ec6\u7684\u89e3\u91ca\uff09\n#ifdef IA32_INTR\n        i8259_destroy();\n#endif\n    }\n    else if (n == 0)                        // \u865a\u62df\u673a\u505a\u597d\u4e86\u8fd0\u884c\u7684\u51c6\u5907\n    {\n        nemu_state = NEMU_READY;\n    }\n}\n</code></pre> \u5982\u679c\u4f60\u60f3\u77e5\u9053 <code>BP</code> \u662f\u4ec0\u4e48\u81ea\u5b9a\u4e49\u7684\u7ed3\u6784 <p><code>BP</code> \u662f\u5b9a\u4e49\u65ad\u70b9\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5b9a\u4e49\u4e8e <code>nemu/include/monitor/breakpoint.h</code>\uff0c\u4f60\u73b0\u5728\u53ea\u9700\u8981\u77e5\u9053 <code>BP</code> \u8bb0\u5f55\u4e86\u65ad\u70b9\u7684\u76f8\u5173\u4fe1\u606f\u5373\u53ef</p> <p>\uff08\u8fd9\u91cc\u6709\u4e00\u4e2a TODO,\u4f46\u662f\u6211\u6ca1\u6709\u627e\u5230 PA \u4e2d\u9700\u8981\u4fee\u6539\u8fd9\u90e8\u5206\u4ee3\u7801\u7684\u4efb\u52a1\uff09</p> <pre><code>typedef struct breakpoint\n{\n    uint8_t ori_byte : 8;\n    bool enable : 1;\n    bool in_use : 1;\n    int NO : 22;\n\n    union {\n        vaddr_t addr;\n        struct\n        {\n            char *expr;\n            uint32_t old_val;\n            uint32_t new_val;\n        };\n    };\n    int type;\n    struct breakpoint *next;\n\n    /* TODO: Add more member if necessary */\n\n} BP;\n</code></pre> <code>verbose</code> \u662f\u4e2a\u4ec0\u4e48\u53c2\u6570\uff1f <p>\u8fd9\u4e2a\u53c2\u6570\u7528\u4e8e\u63a7\u5236\u8c03\u8bd5\u4fe1\u606f\u7684\u8f93\u5165\u60c5\u51b5\uff0c\u6bd4\u5982 <code>nemu/include/cpu/instr_helper.h</code> \u4e2d\u6709:</p> <pre><code>#define decode_operand_o2a                    \\\n    opr_src.type = OPR_MEM;                   \\\n    opr_src.sreg = SREG_DS;                   \\\n    if (verbose)                              \\\n        clear_operand_mem_addr(&amp;opr_src);     \\\n    opr_src.addr = instr_fetch(eip + 1, 4);   \\\n    if (verbose)                              \\\n        opr_src.mem_addr.disp = opr_src.addr; \\\n    opr_dest.type = OPR_REG;                  \\\n    opr_dest.addr = REG_AL;                   \\\n    len += 4;\n\n#define decode_operand_a2o                      \\\n    opr_dest.type = OPR_MEM;                    \\\n    opr_dest.sreg = SREG_DS;                    \\\n    if (verbose)                                \\\n        clear_operand_mem_addr(&amp;opr_dest);      \\\n    opr_dest.addr = instr_fetch(eip + 1, 4);    \\\n    if (verbose)                                \\\n        opr_dest.mem_addr.disp = opr_dest.addr; \\\n    opr_src.type = OPR_REG;                     \\\n    opr_src.addr = REG_AL;                      \\\n    len += 4;\n</code></pre> <p>\u8fd9\u91cc\u6709\u4e24\u4e2a\u5b8f\u51fd\u6570\uff0c<code>verbose</code> \u4e3a <code>true</code> \u65f6\u53ef\u4ee5\u8f93\u51fa\u66f4\u591a\u5173\u4e8e\u5185\u5b58\u64cd\u4f5c/\u5bc4\u5b58\u5668\u72b6\u6001\u7684\u7ec6\u8282\uff0c\u6211\u4eec\u7406\u89e3\u4e3a \u201c\u8c03\u8bd5\u6a21\u5f0f\u201d\u3002\u5728 <code>exec</code> \u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u89c4\u5b9a\u6307\u4ee4\u6570 &lt;= 100000 \u65f6\u8f93\u51fa\u4e00\u4e9b\u66f4\u8be6\u7ec6\u7684\u5185\u5bb9\uff0c\u5426\u5219\u4e3a\u4e86\u8f93\u51fa\u7684\u7b80\u6d01\u6027\u5c06 verbose \u8bbe\u7f6e\u4e3a <code>false</code></p> <p>\u4ee5\u53ca\u5f88\u5feb\u8fd8\u4f1a\u89c1\u5230\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684</p> <p>\u5bf9\u4e8e\u5982\u4f55\u6267\u884c\u5355\u6761\u6307\u4ee4\uff0c\u6709 <code>exec_inst</code> \u51fd\u6570\uff1a</p> <pre><code>// in nemu/src/cpu/cpu.c\nint exec_inst()\n{\n    uint8_t opcode = 0;\n    // get the opcode\n    opcode = instr_fetch(cpu.eip, 1);   // \u901a\u8fc7\u7a0b\u5e8f\u8ba1\u6570\u5668\u83b7\u53d6\u5f53\u524d\u6307\u4ee4\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\n\n\n// printf(\"opcode = %x, eip = %x\\n\", opcode, cpu.eip);  // \u4e00\u4e2a\u63d2\u6869\u64cd\u4f5c Instrumentation\n// instruction decode and execution\n#ifdef NEMU_REF_INSTR                   // \u8fd9\u91cc\u6709\u4e00\u4e2a \u201c\u53c2\u8003\u5b9e\u73b0\u201d \u7684\u5207\u6362\n    int len = __ref_opcode_entry[opcode](cpu.eip, opcode);\n#else\n    int len = opcode_entry[opcode](cpu.eip, opcode);\n#endif\n    return len; // \u8fd4\u56de\u6307\u4ee4\u957f\u5ea6\n}\n</code></pre> \u8fd9\u91cc\u9644\u5e26\u4e86 <code>instr_fetch</code> \u51fd\u6570\u7684\u5b9e\u73b0 <pre><code>// in nemu/src/memory/memory.c\nuint32_t instr_fetch(vaddr_t vaddr, size_t len)\n{\n    assert(len == 1 || len == 2 || len == 4);\n    return vaddr_read(vaddr, SREG_CS, len);\n}\n\nuint32_t vaddr_read(vaddr_t vaddr, uint8_t sreg, size_t len)\n{\n    assert(len == 1 || len == 2 || len == 4);\n    return laddr_read(vaddr, len);\n}\n\nuint32_t laddr_read(laddr_t laddr, size_t len)\n{\n    return paddr_read(laddr, len);\n}\n\nuint32_t paddr_read(paddr_t paddr, size_t len)\n{\n    uint32_t ret = 0;\n    ret = hw_mem_read(paddr, len);\n    return ret;\n}\n\nuint32_t hw_mem_read(paddr_t paddr, size_t len)\n{\n    uint32_t ret = 0;\n    memcpy(&amp;ret, hw_mem + paddr, len);\n    return ret;\n}\n</code></pre> <p>\u4e3a\u4ec0\u4e48\u8981\u5d4c\u5957\u591a\u5c42\u51fd\u6570\u6700\u540e\u53ea\u662f\u4e3a\u4e86\u6267\u884c <code>hw_mem_read</code> \u8fd9\u4e00\u6b65\uff1f</p> <p>\u8fd9\u662f\u4e3a\u4e86\u6a21\u62df x86-64 \u7684\u5185\u5b58\u7ba1\u7406\u673a\u5236\uff0c\u53c2\u89c1 \u201c\u7269\u7406\u5730\u5740\u3001\u865a\u62df\u5730\u5740\u3001\u7ebf\u6027\u5730\u5740\u3001\u903b\u8f91\u5730\u5740\u201d \u8fd9\u4e9b\u5185\u5b58\u6982\u5ff5</p> <p><code>exec_inst</code> \u51fd\u6570\u5148\u901a\u8fc7 <code>instr_fetch</code> \u83b7\u53d6 opcode\uff0c\u7136\u540e\u901a\u8fc7\u4e0b\u9762\u7684\u51fd\u6570\u8fdb\u884c\u6307\u4ee4\u6267\u884c\uff1a</p> <pre><code>int len = opcode_entry[opcode](cpu.eip, opcode);\n</code></pre> <p>\u8fd9\u91cc <code>opcode_entry</code> \u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u6570\u7ec4\uff0c\u5728 <code>nemu/src/cpu/decode/opcode.c</code> \u4e2d\u6709</p> <pre><code>// From nemu/include/cpu/instr_helper.h:\n// typedef int (*instr_func)(uint32_t eip, uint8_t opcode);\n\ninstr_func opcode_entry[256] = {\n    /* \u76ee\u524d\u8fd9\u91cc\u7684 inv \u90fd\u662f\u5360\u4f4d\u7b26\uff0c\u9700\u8981\u5177\u4f53\u5b9e\u73b0 */\n    /* 0x00 - 0x03*/ inv, inv, inv, inv,\n    /* 0x04 - 0x07*/ inv, inv, inv, inv,\n    /* 0x08 - 0x0b*/ inv, inv, inv, inv,\n    /* 0x0c - 0x0f*/ inv, inv, inv, opcode_2_byte,\n    /* ... */\n    /* 0xf0 - 0xf3*/ inv, break_point, inv, rep_repe,\n    /* 0xf4 - 0xf7*/ hlt, inv, group_3_b, group_3_v,\n    /* 0xf8 - 0xfb*/ clc, inv, inv, inv,\n    /* 0xfc - 0xff*/ cld, inv, inv, group_5_indirect,\n};\n</code></pre> \u5982\u4f55\u7406\u89e3\u4e0a\u9762\u7684\u5185\u5bb9\uff1f <p>\u9996\u5148\u662f\u4e0b\u9762\u7684\u7c7b\u578b\u5b9a\u4e49\uff1a</p> <p><code>typedef int (*instr_func)(uint32_t eip, uint8_t opcode);</code></p> <p>\u8fd9\u91cc\u5b9a\u4e49\u4e86\u4e00\u4e2a <code>instr_func</code> \u7c7b\u578b\uff0c\u8868\u793a\u4e3a\u51fd\u6570\u6307\u9488\uff0c\u5e76\u4e14\u4e13\u95e8\u6307\u5411\u53c2\u6570\u4e3a <code>(uint32_t eip, uint8_t opcode)</code>\uff0c\u8fd4\u56de\u503c\u4e3a <code>int</code> \u7684\u51fd\u6570\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528\u4f8b\uff1a</p> <pre><code>instr_func a;\na = op_func;    // op_func \u662f\u4e00\u4e2a\u7b7e\u540d\u7b26\u5408\u4e0a\u8ff0\u8981\u6c42\u7684\u51fd\u6570\nint res = a(eip, opcode);\n</code></pre> <p>\u5728\u5b9a\u4e49\u4e86 <code>instr_func</code> \u540e\uff0c\u6784\u5efa\u4e00\u4e2a\u5b58\u50a8 <code>instr_func</code> \u7684\u6570\u7ec4\uff08\u5373 <code>opcode_entry</code>\uff09\uff0c\u5728 <code>opcode_entry</code> \u4e2d\u653e\u7f6e\u5bf9\u5e94\u51fd\u6570\uff0c\u8fd9\u6837\u901a\u8fc7\u6570\u7ec4\u7d22\u5f15\u5c31\u53ef\u4ee5\u5728 O(1) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u83b7\u53d6 opcode \u5bf9\u5e94\u7684\u51fd\u6570\uff0c\u6bd4\u5982\uff1a</p> <p><pre><code>typedef int (*instr_func)(uint32_t eip, uint8_t opcode);\n\nint ADD_rm8_reg8(uint32_t eip, uint8_t opcode){\n    // \u5177\u4f53\u7684\u51fd\u6570\u5b9e\u73b0...\n}\n/* \u5176\u4ed6\u51fd\u6570... */\n\ninstr_func opcode_entry[256] = {\n    ADD_rm8_reg8,\n    /* ... */\n}\n\n// \u4e0b\u9762\u7684\u64cd\u4f5c\u5373\u5b8c\u6210\u4e86\u4e00\u6b21\u6307\u4ee4\u6267\u884c\nuint8_t opcode = instr_fetch(cpu.eip, 1);\nint res = opcode_entry[opcode](eip, opcode);\n</code></pre> \uff08\u5177\u4f53\u7684\u5b9e\u73b0\u53c2\u8003 NEMU \u6e90\u4ee3\u7801\uff09</p> \u5982\u679c\u4e00\u6761\u6307\u4ee4\u5305\u542b <code>0x66</code> \u524d\u7f00\uff0c\u5982\u4f55\u6b63\u786e\u8bfb\u53d6 opcode\uff1f <p>\u5728 NEMU \u7684\u5b9e\u73b0\u4e2d\uff0c<code>0x66</code> \u5728 <code>opcode_entry[0x66]</code> \u4e2d\u6709\u5355\u72ec\u7684\u64cd\u4f5c</p> <pre><code> /* 0x64 - 0x67*/ inv, inv, data_size_16, inv,\n</code></pre> <p>\u5728 nemu/src/cpu/instr/data_size.c \u4e2d\u6709</p> <pre><code>#include \"cpu/instr.h\"\n\nextern uint8_t data_size;   // \u8fd9\u91cc\u6709\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\nextern bool has_prefix;     // \u540c\u4e0a\n\n// make_instr_func(data_size_16) \u662f data_size_16(uint32_t eip, uint8_t opcode) \u7684\u5b8f\u5c01\u88c5\n// \u4e4b\u540e\u4f1a\u63d0\u5230\nmake_instr_func(data_size_16)\n{\n    uint8_t op_code = 0;\n    int len = 0;\n    data_size = 16;\n    has_prefix = true;\n    op_code = instr_fetch(eip + 1, 1);\n#ifdef NEMU_REF_INSTR\n    len = __ref_opcode_entry[op_code](eip + 1, op_code);\n#else\n    len = opcode_entry[op_code](eip + 1, op_code);\n#endif\n    data_size = 32;\n    has_prefix = false;\n    return 1 + len;\n}\n</code></pre> <p>\u7b80\u5355\u6765\u8bf4\uff0c<code>0x66</code> \u88ab\u5f53\u4f5c\u4e00\u6761\u5b8c\u6574\u7684\u6307\u4ee4\u6267\u884c\uff08\u800c\u4e0d\u662f\u67d0\u4e00\u6761\u6307\u4ee4\u7684\u524d\u7f00\uff09\uff0c\u901a\u8fc7\u5168\u5c40\u53d8\u91cf <code>data_size</code> \u548c <code>has_prefix</code> \u4f20\u9012\u524d\u7f00\u4fe1\u606f\uff08\u5bf9\u63a5\u4e0b\u6765\u7684\u6307\u4ee4\u6709\u6548\uff09\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86 <code>0x66</code> \u524d\u7f00\u7684\u8bfb\u53d6\uff0c\u540c\u65f6\u4e0d\u9700\u8981\u4e3a\u6bcf\u4e2a\u64cd\u4f5c\u989d\u5916\u52a0\u4e0a <code>0x66</code> \u7684\u5224\u65ad</p>"},{"location":"ICSPA-x86/PA2-1/#_1","title":"\u6a21\u62df\u6307\u4ee4\u7684\u5b9e\u73b0","text":"<p>\u201c\u4e00\u6761\u7b80\u5355mov\u6307\u4ee4\u7684\u5b9e\u73b0\u201d \u7684\u90e8\u5206\u53ef\u4ee5\u8ba4\u771f\u770b\u770b</p> <p>\u7b80\u5355\u6765\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u505a\u7684\u5c31\u662f\uff1a</p> <ol> <li> <p>\u5b9e\u73b0\u6307\u4ee4\uff0c\u4ee5 <code>b1 01: movb $1, %cl</code> \u4e3a\u4f8b\uff1a <pre><code>int mov_i2r_b(uint32_t eip, uint8_t opcode) {\n    uint8_t imm = instr_fetch(eip + 1, 1); // \u83b7\u53d6\u7acb\u5373\u6570\n    uint8_t regIdx = opcode &amp; 0x7;  // \u83b7\u53d6\u5bc4\u5b58\u5668\u7f16\u53f7\n    cpu.gpr[regIdx]._8[0] = imm; // \u5b8c\u6210mov\u52a8\u4f5c \n    return 2; // \u8fd4\u56de\u6307\u4ee4\u957f\u5ea6\n}\n</code></pre></p> </li> <li> <p>\u5728 <code>mov.h</code> \u4e2d\u58f0\u660e\u51fd\u6570\uff0c\u5728 <code>instr.h</code> \u4e2d\u5f15\u7528\u5934\u6587\u4ef6 <code>#include \"cpu/instr/mov.h\"</code></p> </li> <li> <p>\u5728 <code>opcode.c</code> \u4e2d\u4fee\u6539 opcode_entry \u4e2d\u7684\u76f8\u5173\u5185\u5bb9\uff0c\u5bb9\u6613\u5f97\u5230 <code>mov_i2r_b</code> \u8fd9\u4e2a\u51fd\u6570\u5bf9 <code>0xB0 ~ 0xB7</code> \u7684 opcode \u90fd\u9002\u7528\uff0c\u6240\u4ee5\u628a\u8fd9\u51e0\u4e2a\u5143\u7d20\u7684 <code>inv</code> \u90fd\u4fee\u6539\u4e3a <code>mov_i2r_b</code> </p> </li> </ol> <p>\u4f46\u662f\u4e8b\u5b9e\u4e0a mov \u6307\u4ee4\u6709\u5f88\u591a\u53d8\u79cd\uff0c\u4e0d\u540c\u7684\u53d8\u79cd\u7684\u5927\u81f4\u6846\u67b6\u662f\u4e00\u6837\u7684\uff0c\u6211\u4eec\u5e0c\u671b\u62bd\u8c61\u51fa\u90e8\u5206\u76f8\u540c\u903b\u8f91\uff0c\u5c01\u88c5\u63d0\u4f9b\u8c03\u7528\uff0c\u7b80\u5316\u903b\u8f91</p> <p>NEMU \u4e2d\u5bf9\u4e00\u4e9b\u51fd\u6570/\u7ed3\u6784\u8fdb\u884c\u4e86\u5c01\u88c5\uff1a</p>"},{"location":"ICSPA-x86/PA2-1/#_2","title":"\u64cd\u4f5c\u6570\u548c\u64cd\u4f5c\u6570\u5bfb\u5740","text":""},{"location":"ICSPA-x86/PA2-1/#_3","title":"\u64cd\u4f5c\u6570\u7684\u5c01\u88c5","text":"<p>NEMU\u4e2d\u6240\u6709\u7684\u64cd\u4f5c\u6570\u90fd\u5c01\u88c5\u5728\u4e00\u4e2a\u53eb\u505a<code>OPERAND</code>\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u3002\u8be5\u6570\u636e\u7ed3\u6784\u7684\u58f0\u660e\u5728\u5934\u6587\u4ef6<code>nemu/include/cpu/operand.h</code>\u4e2d</p> <pre><code>// nemu/include/cpu/operand.h\n#ifndef __OPERAND_H__\n#define __OPERAND_H__\n\n#include \"nemu.h\"\n#include \"cpu/cpu.h\"\n#include \"memory/memory.h\"\n\n// operand type for immediate number, register, and memory\nenum {\n    OPR_IMM,   // \u7acb\u5373\u6570\n    OPR_REG,   // \u5bc4\u5b58\u5668\n    OPR_MEM,   // \u5185\u5b58\n    OPR_CREG,  // \u63a7\u5236\u5bc4\u5b58\u5668\n    OPR_SREG   // \u6bb5\u5bc4\u5b58\u5668\n};\n\n#define MEM_ADDR_NA 0xffffffff\n\n//enum {MEM_ADDR_OFF, MEM_ADDR_SIB};\n\n// \u5185\u5b58\u5730\u5740\u7ed3\u6784\u4f53 (MEM_ADDR)\n// \u63cf\u8ff0\u4e86\u5185\u5b58\u7684\u5bfb\u5740\u65b9\u5f0f\ntypedef struct\n{\n    // uint32_t type;\n    uint32_t disp;  // hex\n    uint32_t base;  // register\n    uint32_t index; // register\n    uint32_t scale; // 1, 2, 4, 8\n} MEM_ADDR;         // memory address details\n\n// \u64cd\u4f5c\u6570\u7ed3\u6784\u4f53 (OPERAND)\n// \u5305\u542b\u4e86\u4e00\u4e2a\u64cd\u4f5c\u6570\u7684\u5b8c\u6574\u4fe1\u606f\ntypedef struct\n{\n    int type;           // \u64cd\u4f5c\u6570\u7c7b\u578b\n    uint32_t addr;      // \u5730\u5740\n    uint8_t sreg;       // \u6bb5\u5bc4\u5b58\u5668\n    uint32_t val;       // \u6570\u636e\u5185\u5bb9\n    size_t data_size;   // \u6570\u636e\u5927\u5c0f\n    MEM_ADDR mem_addr;  // \u5185\u5b58\u5730\u5740\u7684\u8be6\u7ec6\u4fe1\u606f\uff08\u5305\u62ec\u5bfb\u5740\u65b9\u5f0f\uff09\n} OPERAND;\n\nextern OPERAND opr_src, opr_dest;\n\n// \u4ee5\u4e0b\u662f\u5bf9\u8bfb\u5199 OPERAND \u7684\u76f8\u5173\u5c01\u88c5\n\n// read the operand's value from its addr\n// \u4ece\u64cd\u4f5c\u6570\u5730\u5740\u8bfb\u53d6\u503c\nvoid operand_read(OPERAND *opr);\n\n// write the operand's value to its addr\n// \u5c06\u503c\u5199\u5165\u64cd\u4f5c\u6570\u5730\u5740\nvoid operand_write(OPERAND *opr);\nvoid operand_write_cr0(OPERAND *opr);\n\nvoid parse_operand_address(OPERAND *opr, char *str);\nvoid clear_operand_mem_addr(OPERAND *opr);\n\n#endif\n</code></pre> <p>\u8fd9\u6837\u7684\u5c01\u88c5\u8bbe\u8ba1\u80fd\u591f\u5e94\u5bf9\u590d\u6742\u7684\u64cd\u4f5c\u6570\u5bfb\u5740\u6a21\u5f0f\u7684\u5904\u7406\uff0c\u6bd4\u5982\u6211\u4eec\u73b0\u5728\u91cd\u5199 <code>mov_i2r_b</code> \u51fd\u6570\uff1a</p> <pre><code>int mov_i2r_b(uint32_t eip, uint8_t opcode) {\n    OPERAND imm, r;        // \u521b\u5efa\u6e90\u64cd\u4f5c\u6570\u548c\u76ee\u7684\u64cd\u4f5c\u6570\u5c40\u90e8\u53d8\u91cf\n\n    imm.type = OPR_IMM;    // \u914d\u7f6e\u6e90\u64cd\u4f5c\u6570\u7c7b\u578b\n    imm.type = SREG_CS;    // \u8bbe\u7f6e\u6bb5\u5bc4\u5b58\u5668\uff0cPA 3-2 \u5f00\u59cb\u6d89\u53ca\n    imm.addr = eip + 1;    // \u914d\u7f6e\u6e90\u64cd\u4f5c\u6570\u5730\u5740\n    imm.data_size = 8;     // \u914d\u7f6e\u6e90\u64cd\u4f5c\u6570\u957f\u5ea6\n\n    r.data_size = 8;        // \u914d\u7f6e\u76ee\u7684\u64cd\u4f5c\u6570\u7c7b\u578b\n    r.type = OPR_REG;       // \u914d\u7f6e\u76ee\u7684\u64cd\u4f5c\u6570\u7c7b\u578b\n    r.addr = opcode &amp; 0x7;  // \u914d\u7f6e\u76ee\u7684\u64cd\u4f5c\u6570\u7c7b\u578b\n\n    operand_read(&amp;imm);   // \u8bfb\u6e90\u64cd\u4f5c\u6570\u7684\u503c\n    r.val = imm.val;      // \u5c06\u6e90\u64cd\u4f5c\u6570\u7684\u503c\u8d4b\u7ed9\u76ee\u7684\u64cd\u4f5c\u6570\n    operand_write(&amp;r);    // \u5199\u5165\u76ee\u7684\u64cd\u4f5c\u6570\uff0c\u5b8c\u6210mov\u52a8\u4f5c\n\n    return 2;             // \u8fd4\u56de\u6307\u4ee4\u957f\u5ea6\n}\n</code></pre> <p>\u867d\u7136\u4ee3\u7801\u91cf\u66f4\u5927\u4e86\uff0c\u4f46\u662f\u51fd\u6570\u7684\u8bbe\u8ba1\u66f4\u52a0\u89c4\u6574\uff0c\u53ef\u4ee5\u7528\u8f83\u4e3a\u56fa\u5b9a\u5316\u7684\u65b9\u5f0f\u9ad8\u6548\u5b9e\u73b0\u4e00\u7cfb\u5217\u7684 mov \u51fd\u6570</p> <p>\u73b0\u5728\u6211\u4eec\u8fdb\u4e00\u6b65\u5b9e\u73b0 \u201c\u64cd\u4f5c\u6570\u5bfb\u5740\u201d \u7684\u7ec6\u8282\uff0c\u8fd9\u5176\u4e2d\u7684\u6838\u5fc3\u662f\u5bf9 ModR/M \u5b57\u6bb5\u4e0e SIB \u5b57\u6bb5\u7684\u89e3\u6790</p>"},{"location":"ICSPA-x86/PA2-1/#modrm","title":"ModR/M","text":"<p>\u56de\u987e \uff1aModR/M \u5b57\u6bb5\u603b\u5171\u5206\u4e3a\u4e09\u90e8\u5206\uff1aMod + Opcode/Reg + R/M</p> <p>\u5728\u5934\u6587\u4ef6<code>nemu/include/cpu/modrm.h</code>\u4e2d\uff0c\u58f0\u660e\u4e86<code>ModR/M</code>\u5b57\u8282\u7684\u7ed3\u6784\u5b9a\u4e49\u548c\u56db\u4e2a\u51fd\u6570\uff1a</p> <pre><code>int modrm_rm(uint32_t eip, OPERAND * rm);\nint modrm_r_rm(uint32_t eip, OPERAND * r, OPERAND * rm);\nint modrm_opcode_rm(uint32_t eip, uint8_t * opcode, OPERAND * rm);\nint modrm_opcode(uint32_t eip, uint8_t * opcode);\n</code></pre> <p>\u8fd9\u56db\u4e2a\u51fd\u6570\u5206\u522b\u5bf9\u5e94\u6307\u4ee4\u5e0c\u671b\u901a\u8fc7\u89e3\u6790<code>ModR/M</code>\u5b57\u8282\u6240\u83b7\u5f97\u7684\u6570\u636e\u7684\u56db\u79cd\u4e0d\u540c\u7c7b\u578b\u7ec4\u5408\uff0c\u5df2\u6db5\u76d6\u5b9e\u9a8c\u4e2d\u6240\u6d89\u53ca\u7684\u6240\u6709\u6307\u4ee4\u3002</p> <p>\u6211\u4eec\u4ee5 <code>modrm_r_rm</code> \u51fd\u6570\u4e3a\u4f8b\u5177\u4f53\u5206\u6790\uff0c\u4e3a\u4e86\u5c55\u793a\u8c03\u7528\u5173\u7cfb\uff0c\u5c06\u5185\u5c42\u51fd\u6570\u653e\u5728\u4e86\u66f4\u540e\u9762\uff1a</p> <pre><code>// From modrm.h\n// \u5f88\u663e\u7136\u7684\u5b9a\u4e49\ntypedef union {\n    struct\n    {\n        uint32_t rm : 3;\n        uint32_t reg_opcode : 3;\n        uint32_t mod : 2;\n    };\n    uint8_t val;\n} MODRM;\n\n// From modrm.c\n// modrm \u6709\u56db\u79cd\u7c7b\u578b\u7ec4\u5408\uff0c\u8fd9\u91cc\u53ea\u5c55\u793a r_rm \u578b\nint modrm_r_rm(uint32_t eip, OPERAND *r, OPERAND *rm)\n{\n    MODRM modrm;                                // \u5b9a\u4e49\u4e00\u4e2a ModR/M\n    modrm.val = instr_fetch(eip, 1);            // \u901a\u8fc7 instr_fetch \u586b\u5145\n    r-&gt;type = OPR_REG;                          // \u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570 r \u7c7b\u578b\u8bbe\u7f6e\u4e3a\u201c\u5bc4\u5b58\u5668\u201d\n    r-&gt;addr = modrm.reg_opcode;                 // \u5176\u5730\u5740\u8bbe\u7f6e\u4e3a Reg/Opcode \u5b57\u6bb5\n    int len = parse_rm_32(eip, modrm, rm);      // \u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570 rm \u8c03\u7528\u51fd\u6570\u5904\u7406\n    return len;\n}\n\nint parse_rm_32(uint32_t eip, MODRM modrm, OPERAND *opr)\n{\n    int len = 1; // modr/m \u7684\u957f\u5ea6\n    if (verbose)\n        clear_operand_mem_addr(opr);\n    switch (modrm.mod)                          // \u6839\u636e mod \u8bbe\u7f6e rm \n    {\n    case 0:\n        len += case_mod_00(eip, modrm, opr);\n        break;\n    case 1:\n        len += case_mod_01(eip, modrm, opr);\n        break;\n    case 2:\n        len += case_mod_10(eip, modrm, opr);\n        break;\n    case 3:\n        len += case_mod_11(eip, modrm, opr);\n        break;\n    }\n    return len;\n}\n\n// \u56db\u4e2a case_mod \u51fd\u6570\u90fd\u5f88\u76f4\u767d\uff0c\u6b64\u5904\u53ea\u5c55\u793a\u5176\u4e2d\u4e24\u4e2a\n// Mod = 01\uff0c\u5bf9\u5e94\u5e26 disp8 \u504f\u79fb\u91cf\u7684\u5185\u5b58\u5bfb\u5740\nint case_mod_01(uint32_t eip, MODRM modrm, OPERAND *opr)\n{\n    int len = 0;\n    int8_t disp8 = 0;\n    switch (modrm.rm) {\n\n    case 4: //disp8 SIB\n        opr-&gt;type = OPR_MEM;\n        //len += parse_sib(eip + 1, modrm.mod, &amp;opr-&gt;addr, &amp;opr-&gt;sreg);\n        len += parse_sib(eip + 1, modrm.mod, opr);      // \u8fd9\u91cc\u662f SIB \u5b57\u8282\u7684\u5904\u7406\n        disp8 = (int8_t)instr_fetch(eip + 2, 1);\n        len += 1; // disp8\n        break;\n\n    default: //disp8[EXX]\n        opr-&gt;type = OPR_MEM;\n        opr-&gt;addr = cpu.gpr[modrm.rm]._32;\n        opr-&gt;mem_addr.base = modrm.rm;                  // \u53c2\u8003 OPERAND \u7684\u7ed3\u6784\u4f53\u5b9e\u73b0\n        disp8 = (int8_t)instr_fetch(eip + 1, 1);\n        len += 1; // disp8\n        // \u8fd9\u91cc\u662f\u6bb5\u5bc4\u5b58\u5668\u7684\u64cd\u4f5c\n        if (modrm.rm == 5)\n        { // EBP\n            opr-&gt;sreg = SREG_SS;\n        }\n        else\n        {\n            opr-&gt;sreg = SREG_DS;\n        }\n        break;\n    }\n    opr-&gt;addr = disp8 + (int32_t)opr-&gt;addr;             // \u5730\u5740\u8ba1\u7b97\n    opr-&gt;mem_addr.disp = disp8;\n    return len;\n}\n\n// Mod = 11\uff0c\u5bf9\u5e94\u76f4\u63a5\u5bc4\u5b58\u5668\nint case_mod_11(uint32_t eip, MODRM modrm, OPERAND *opr)\n{\n    opr-&gt;type = OPR_REG;\n    opr-&gt;addr = modrm.rm;\n    return 0;\n}\n</code></pre>"},{"location":"ICSPA-x86/PA2-1/#sib","title":"SIB","text":"<p>\u5bf9 SIB \u5b57\u8282\u7684\u7ed3\u6784\u5b9a\u4e49<code>nemu/include/cpu/sib.h</code> \u4e0e\u51fd\u6570 <code>nemu/src/cpu/decode/sib.c</code> </p> <pre><code>// \u5185\u5b58\u5bfb\u5740\u65b9\u5f0f [Base + Index * Scale + Disp]\n\ntypedef union {\n    struct\n    {\n        uint32_t base : 3;\n        uint32_t index : 3;\n        uint32_t ss : 2;\n    };\n    uint8_t val;\n} SIB;\n\nint parse_sib(uint32_t eip, uint32_t mod, OPERAND *opr)\n{\n    SIB sib;                                    // \u5b9a\u4e49\u4e00\u4e2a SIB\n    sib.val = instr_fetch(eip, 1);              // \u53d6\u503c\u586b\u5145\n    uint32_t idx = 0;                           // \u53d8\u5740\u503c\u521d\u59cb\u5316\n    opr-&gt;sreg = SREG_DS;                        // \u6bb5\u5bc4\u5b58\u5668\u9009\u62e9\n\n    if (sib.base == 5 || sib.base == 4)         // \u6bb5\u5bc4\u5b58\u5668\u9009\u62e9\n    {\n        opr-&gt;sreg = SREG_SS;\n    }\n    /* \u7279\u4f8b\uff1a\u5f53 Index = 100 \u65f6\uff0c\u770b\u4f5c\u201cIndex = NULL\u201d\uff08\u4e0d\u4f7f\u7528\u53d8\u5740\u5bc4\u5b58\u5668\uff09\uff0c\u800c\u4e0d\u662f \u201cIndex = ESP\u201d */\n    if (sib.index != 4)                         // \u542f\u7528\u4e86\u53d8\u5740\u5bc4\u5b58\u5668\n    {\n        idx = cpu.gpr[sib.index]._32;           // \u83b7\u53d6\u53d8\u5740\u5bc4\u5b58\u5668\u7684 32 \u4f4d\u503c\n        opr-&gt;mem_addr.index = sib.index;        // \u8bb0\u5f55\u53d8\u5740\u5bc4\u5b58\u5668\u7684 id\n        switch (sib.ss)                         // \u7f29\u653e\u56e0\u5b50\n        {\n        case 0x0:\n            opr-&gt;mem_addr.scale = 1;\n            break;\n        case 0x1:\n            idx *= 2;\n            opr-&gt;mem_addr.scale = 2;\n            break;\n        case 0x2:\n            idx *= 4;\n            opr-&gt;mem_addr.scale = 4;\n            break;\n        case 0x3:\n            idx *= 8;\n            opr-&gt;mem_addr.scale = 8;\n            break;\n        }\n    }\n    switch (mod)                                \n    {\n    case 0: // only now has additional disp32?\n        if (sib.base == 5)\n        /* \u7279\u4f8b\uff1a\u5f53 Base = 101 \u4e14 Mod = 00 \u65f6\uff0c\u770b\u4f5c\u201cBase = NULL\u201d\uff08\u4e0d\u4f7f\u7528\u57fa\u5740\u5bc4\u5b58\u5668\uff09\uff0c\u800c\u4e0d\u662f \u201cBase = EBP\u201d\uff0c\u540c\u65f6\u542f\u7528 Disp32 */\n        {\n            int32_t disp32 = instr_fetch(eip + 1, 4);\n            opr-&gt;addr = idx + disp32;\n            opr-&gt;mem_addr.disp = disp32;\n            return 5;\n        }\n    case 1:\n    case 2:\n        // \u6b63\u5e38\u60c5\u51b5\u4e0b\n        opr-&gt;addr = cpu.gpr[sib.base]._32 + idx;\n        opr-&gt;mem_addr.base = sib.base;\n        return 1;\n    default:\n        printf(\"illegal mod=11 in SIB\\n\");\n        fflush(stdout);\n        assert(0);\n        break;\n        return 0;\n    }\n}\n</code></pre>"},{"location":"ICSPA-x86/PA2-1/#_4","title":"\u8fdb\u4e00\u6b65\u7684\u5c01\u88c5","text":"<p>\u73b0\u5728\u6211\u4eec\u6709\u4e00\u4e2a <code>mov_i2rm_v</code> \u6307\u4ee4 \uff08\u5c06\u4e00\u4e2a\u7acb\u5373\u6570 <code>mov</code> \u5230\u4e00\u4e2a\u7531 <code>ModR/M</code> \u5b57\u8282\u6240\u8868\u8fbe\u7684\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u5730\u5740\uff08R/M\uff09\u4e2d\uff0c\u4f4d\u6570\u4e0d\u5b9a\uff09</p> <pre><code>int mov_i2rm_v(uint32_t eip, uint8_t opcode) {\n    OPERAND rm, imm;\n\n    imm.data_size = rm.data_size = data_size; // \u89e3\u7801\u64cd\u4f5c\u6570\uff1a\u6307\u5b9a\u64cd\u4f5c\u6570\u957f\u5ea6\n                                              // data_size \u4f1a\u53d7\u5230 0x66 \u7684\u5f71\u54cd\n    int len = 1;\n    len += modrm_rm(eip + 1, &amp;rm);            // \u89e3\u7801\u64cd\u4f5c\u6570\uff1a\u64cd\u4f5c\u6570\u5bfb\u5740\n    imm.type = OPR_IMM;\n    imm.sreg = SREG_CS;\n    imm.addr = eip + len;\n\n    operand_read(&amp;imm);                       // mov\u64cd\u4f5c\n    rm.val = imm.val;\n    operand_write(&amp;rm);\n\n    return len + data_size / 8;               // \u8fd4\u56de\u957f\u5ea6\n}\n</code></pre> <p>\u4ee5\u8fd9\u4e2a\u4e24\u64cd\u4f5c\u6570\u7684\u6307\u4ee4\u4e3a\u4f8b\uff0c\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u5c01\u88c5\u3001\u7b80\u5316\u64cd\u4f5c\uff1a</p> <p>\u524d\u7f6e\u77e5\u8bc6\uff1a<code>concat</code> \u5b8f</p> <p>concat \u7cfb\u5217\u5b8f\u53ef\u4ee5\u5c06\u591a\u4e2a\u53c2\u6570\u786c\u62fc\u63a5\u4f7f\u7528\uff0c\u5728 <code>nemu/include/macro.h</code> \u4e2d\u6709\uff1a</p> <pre><code>#define concat_temp(x, y) x##y\n#define concat(x, y) concat_temp(x, y)\n#define concat3(x, y, z) concat(concat(x, y), z)\n#define concat4(x, y, z, w) concat3(concat(x, y), z, w)\n#define concat5(x, y, z, v, w) concat4(concat(x, y), z, v, w)\n#define concat6(x, y, z, v, w, u) concat5(concat(x, y), z, v, w, u)\n#define concat7(x, y, z, v, w, u, h) concat6(concat(x, y), z, v, w, u, h)\n</code></pre> <p>\u7531\u4e8e\u5b8f\u64cd\u4f5c\u7684\u7279\u6027\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u62fc\u63a5\u51fd\u6570\u540d\uff1a</p> <p>\u6bd4\u5982 <code>make_instr_func(mov_i2rm_v)</code>\uff0c\u53ef\u4ee5\u5199\u6210</p> <pre><code>make_instr_func(concat7(mov, _, i, 2, rm, _, v))\n</code></pre> <p>\u4e00\u4e2a\u975e\u5e38\u65b9\u4fbf\u7684\u4f7f\u7528\u4f8b</p> <pre><code>#define make_instr_impl_2op(inst_name, src_type, dest_type, suffix)    \\\n    make_instr_func(concat7(inst_name, _, src_type, 2, dest_type, _, suffix))\n</code></pre> <p>\u8fd9\u79cd\u5b8f\u5c55\u5f00\u5339\u914d\u51fd\u6570\u540d\u7684\u65b9\u5f0f\u53ef\u4ee5\u6781\u5927\u7684\u7b80\u5316\u5206\u652f\u64cd\u4f5c</p> <ul> <li>\u6240\u6709\u7684\u6307\u4ee4\u7684\u7b7e\u540d\u90fd\u662f\u4e00\u6837\u7684\uff08\u7b26\u5408 <code>opcode_entry</code> \u7684\u8981\u6c42\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u7b80\u5316\u51fd\u6570\u58f0\u660e\uff1a</li> </ul> <pre><code>// From nemu/include/cpu/instr_helper.h\n// macro for making an instruction entry\n#define make_instr_func(name) int name(uint32_t eip, uint8_t opcode)\n</code></pre> <p>\u6b64\u65f6 <code>int mov_i2rm_v(uint32_t eip, uint8_t opcode)</code> \u53ef\u4ee5\u91cd\u5199\u4e3a <code>make_instr_func(mov_i2rm_v)</code> </p> <ul> <li>NEMU \u4e0d\u5b58\u5728\u6307\u4ee4\u5e76\u53d1\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06\u6307\u4ee4\u7684\u64cd\u4f5c\u6570\u4fee\u6539\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u89c4\u8303\u547d\u540d\u5e76\u4e14\u8282\u7701\u6808\u7a7a\u95f4</li> </ul> <pre><code>// From nemu/src/cpu/decode/operand.c\nOPERAND opr_src, opr_dest;\n</code></pre> <ul> <li>\u4e0d\u96be\u53d1\u73b0\uff0c\u5bf9\u4e8e\u5f88\u591a\u4e24\u64cd\u4f5c\u6570\u6307\u4ee4\uff0c\u90fd\u6ee1\u8db3\u4e0b\u9762\u7684\u6b65\u9aa4\uff1a\u89e3\u7801\u4e24\u4e2a\u64cd\u4f5c\u6570 -&gt; \u8fdb\u884c\u5b9e\u9645\u7684\u6307\u4ee4\u64cd\u4f5c\uff08\u6bd4\u5982mov\uff09 -&gt; \u8fd4\u56de\u6307\u4ee4\u957f\u5ea6</li> </ul> <p>\u8fd9\u8ba9\u6211\u4eec\u5c1d\u8bd5\u7edf\u4e00\u6240\u6709\u7b26\u5408\u4e0a\u8ff0\u89c4\u5219\u7684\u51fd\u6570\uff1a</p> <p>\u00b7\u00b7\u00b7 \u8fd9\u4e9b\u6307\u4ee4\u7684\u540d\u5b57\u90fd\u7b26\u5408 <code>\"inst_name\"_\"src_type\"'2'\"dest_type\"_\"suffix\"</code> \u7684\u547d\u540d\u89c4\u8303\uff08\u6bd4\u5982 <code>mov_i2rm_v</code>\uff09\uff0c\u56e0\u6b64\u6211\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a <code>make_instr_impl_2op(inst_name, src_type, dest_type, suffix)</code> \u7684\u5927\u6846\u67b6\uff0c\u901a\u8fc7\u8f93\u5165\u5404\u4e2a\u53c2\u6570\u7684\u5185\u5bb9\u5c31\u53ef\u4ee5\u6620\u5c04\u5230\u5bf9\u5e94\u7684\u4e24\u64cd\u4f5c\u6570\u6307\u4ee4\uff08\u501f\u52a9 <code>concat</code> \u5b8f\u5b9e\u73b0\uff09</p> <p>\u00b7\u00b7\u00b7 \u63a5\u4e0b\u6765\u5b9e\u73b0\u4e24\u4e2a\u89e3\u7801\u64cd\u4f5c\u6570\u7684\u51fd\u6570\u5c01\u88c5\uff08\u5206\u522b\u662f\u64cd\u4f5c\u6570\u957f\u5ea6\u4e0e\u64cd\u4f5c\u6570\u5bfb\u5740\u7684\u51fd\u6570\uff09</p> <p>\u00b7\u00b7\u00b7 \u7136\u540e\u4e00\u4e2a\u9650\u5b9a\u5728\u5355\u4e2a\u6587\u4ef6\u5185\u7684 <code>static instr_execute_2op();</code> \u51fd\u6570\uff0c\u5728\u6bcf\u4e2a\u6587\u4ef6\u5185\uff08\u4ee3\u8868\u4e00\u4e2a\u7c7b\u578b\u7684\u6307\u4ee4\uff09\u5206\u522b\u6307\u4ee3\u540c\u4e00\u79cd\u64cd\u4f5c</p> <p>\u00b7\u00b7\u00b7 \u6700\u540e\u7edf\u4e00\u8fd4\u56de\u957f\u5ea6</p> <p>\u5728 <code>instr_helper.h</code> \u4e2d\uff0c\u6211\u4eec\u6709\u4e86\u5bf9\u5e94\u7684\u5b9e\u73b0\uff1a</p> <pre><code>// \u4e00\u4e2a\u5b9e\u73b0\u90e8\u5206\u4e24\u64cd\u4f5c\u6570\u6307\u4ee4\u7684\u6a21\u677f\n// decode_data_size \u4e0e decode_operand \u7cfb\u5217\u7684\u6307\u4ee4\u4e5f\u5728 instr_helper.h \u4e2d\u5b9e\u73b0\uff0c\u81ea\u884c\u5206\u6790\n\n// macro for generating the implementation of an instruction with two operands\n#define make_instr_impl_2op(inst_name, src_type, dest_type, suffix)                                                                        \\\n make_instr_func(concat7(inst_name, _, src_type, 2, dest_type, _, suffix))                                                              \\\n {                                                                                                                                      \\\n     int len = 1;                                                                                                                       \\\n     concat(decode_data_size_, suffix)                                                                                                  \\\n     concat3(decode_operand, _, concat3(src_type, 2, dest_type))                                                                    \\\n     print_asm_2(#inst_name, opr_dest.data_size == 8 ? \"b\" : (opr_dest.data_size == 16 ? \"w\" : \"l\"), len, &amp;opr_src, &amp;opr_dest); \\\n     instr_execute_2op();                                                                                                               \\\n     return len;                                                                                                                        \\\n }\n</code></pre> <p>\u5bf9\u4e8e <code>mov</code> \u7cfb\u6307\u4ee4\uff0c\u6211\u4eec\u6700\u7ec8\u6709\u4e0b\u9762\u7684\u5199\u6cd5\uff1a</p> <pre><code>// \u6240\u6709mov\u6307\u4ee4\u5171\u4eab\u7684\u6267\u884c\u65b9\u6cd5\n// static \u4f7f\u5f97 instr_execute_2op() \u53ea\u4f1a\u5728 mov.c \u4e2d\u751f\u6548\uff0c\u5b9e\u73b0\u9694\u79bb\nstatic void instr_execute_2op() {\n    operand_read(&amp;opr_src);\n    opr_dest.val = opr_src.val;\n    operand_write(&amp;opr_dest);\n}\n\n// \u8fd9\u91cc\u7684\u6bcf\u4e00\u884c\u6307\u4ee4\u5728\u5b8f\u5c55\u5f00\u540e\u90fd\u662f\u5b8c\u6574\u7684\u5b9e\u73b0\nmake_instr_impl_2op(mov, i, rm, b)\nmake_instr_impl_2op(mov, i, rm, v)\nmake_instr_impl_2op(mov, r, rm, v)\nmake_instr_impl_2op(mov, rm, r, v)\n...\n</code></pre> <p><code>mov</code> \u51fd\u6570\u7684\u4e3b\u8981\u5b9e\u73b0\u5df2\u7ecf\u5728 <code>mov.c</code> \u4e2d\u5b8c\u6210\uff0c\u4f5c\u4e3a\u4e3e\u4f8b</p> <p>\u5728 <code>instr_helper.h</code> \u4e2d\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u4e00\u64cd\u4f5c\u6570/\u4e24\u64cd\u4f5c\u6570\u6307\u4ee4\u7684\u5b8c\u6574\u903b\u8f91\uff08\u6ee1\u8db3\u53d6\u6570 -&gt; \u6267\u884c -&gt; \u8fd4\u56de\u957f\u5ea6\u7684\u6307\u4ee4\uff09\uff0c\u540c\u65f6\u5bf9 <code>jcc</code> \u7cfb\u6307\u4ee4\u4e5f\u6709\u4e86\u76f8\u5bf9\u5e94\u7684 <code>cc</code> \u7248\u5b8f\u5b9e\u73b0</p> <p>\u6839\u636e\u6846\u67b6\u4ee3\u7801\u7684\u6784\u7b51\u7ecf\u9a8c\uff0c\u9002\u7528\u548c\u4e0d\u9002\u7528\u5b8f\u7684\u6307\u4ee4\u5206\u522b\u662f\uff1a</p> <ul> <li> <p>\u9002\u7528\u5b8f\u7684\u6307\u4ee4\uff1a<code>adc</code>, <code>add</code>, <code>and</code>, <code>bt</code>, <code>cbw</code>, <code>cmov</code>, <code>cmp</code>, <code>dec</code>, <code>inc</code>, <code>jcc</code>, \u5927\u591a\u6570\u7684<code>mov</code>, <code>not</code>, <code>or</code>, <code>pop</code>, <code>push</code>, <code>sar</code>, <code>sbb</code>, <code>setcc</code>, <code>shl</code>, <code>shr</code>, <code>sub</code>, <code>test</code>, <code>xor</code></p> </li> <li> <p>\u4e0d\u9002\u7528\u7684\u6307\u4ee4\uff1a<code>call</code>, <code>cltd</code>, <code>cmps</code>, <code>div</code>, <code>idiv</code>, <code>mul</code>, <code>imul</code>, <code>cld</code>, <code>clc</code>, <code>sahf</code>, <code>hlt</code>, <code>int</code>, <code>jmp</code>, <code>lea</code>, <code>leave</code>, <code>rep</code>, <code>ret</code>, <code>stos</code>, <code>x87</code></p> </li> </ul>"},{"location":"ICSPA-x86/PA2-1/#-","title":"---\u5206\u9694\u7ebf---","text":""},{"location":"ICSPA-x86/PA2-1/#tips-when-completing-pa","title":"Tips when completing PA","text":"<p>\u4e3a\u9632\u6b62\u5267\u900f\uff0c\u51e0\u4e4e\u6240\u6709\u7684 Tips \u90fd\u88ab\u6298\u53e0</p> <p>\uff08Tips \u6307\u7684\u662f\u672c\u4eba\u5728\u5b9e\u9645\u5b8c\u6210 PA \u65f6\u8ba4\u4e3a\u6709\u63a8\u52a8\u6027\u5e2e\u52a9\u7684\u70b9\uff09</p> \u8001\u5e08\u7ed9\u51fa\u7684\u6709\u5173 pop / push \u5b9e\u73b0\u7684\u5efa\u8bae <p><code>push</code> \u548c <code>pop</code> \u5efa\u8bae\u4e0d\u7ba1 <code>data_size</code>\u539f\u6765\u662f\u591a\u5c11\uff0c\u90fd\u6269\u5c55\u5230 32 \u4f4d\u518d\u64cd\u4f5c</p> \u5173\u4e8e\u586b\u5199 <code>opcode_entry</code> / \u51fd\u6570\u540d\u5982\u4f55\u547d\u540d / \u6211\u9700\u8981\u5b9e\u73b0\u54ea\u4e9b\u5c0f\u51fd\u6570\u7684\u95ee\u9898 <p>\u5728 <code>opcode.c</code> \u6587\u4ef6\u7684\u540c\u7ea7\u76ee\u5f55\u4e0b\u6709\u4e00\u4e2a <code>opcode_ref.c</code> \u6587\u4ef6\uff0c\u4f60\u4f1a\u53d1\u73b0\u5220\u9664\u6240\u6709\u7684 <code>__ref_</code> \u540e\uff0c\u5176\u4f59\u7684\u5185\u5bb9\u5c31\u662f\u4f60\u9700\u8981\u5728 <code>opcode.c</code> \u4e2d\u586b\u5199\u7684\u5185\u5bb9</p> <p>\u4f60\u53ea\u9700\u8981\u9009\u62e9\u6027\u7684 Ctrl C+V\uff0c\u7136\u540e Ctrl+F \u5220\u6389\u5c31\u80fd\u83b7\u5f97\u4e00\u4e2a\u5927\u81f4\u586b\u5199\u5b8c\u6210\u7684 <code>opcode.c</code> \u6587\u4ef6\uff0c\u540c\u65f6\u8fd8\u9644\u8d60\u4e86\u4f60\u9700\u8981\u5177\u4f53\u5b9e\u73b0\u7684\u6bcf\u4e00\u4e2a\u5b50\u51fd\u6570\u7684\u540d\u79f0</p> <p>\u6ce8\u610f\u4f60\u4e0d\u5e94\u8be5\u4e00\u6b21\u590d\u5236\u6574\u4e2a <code>opcode_ref.c</code>\uff0c\u4f60\u590d\u5236\u7684\u51fd\u6570\u90fd\u9700\u8981\u88ab\u5b9e\u73b0\u624d\u80fd\u901a\u8fc7\u7f16\u8bd1\uff0c\u4f60\u5e94\u8be5\u53ea\u590d\u5236\u5b9e\u73b0\u7684\u90e8\u5206</p> <p>\u53e6\u5916\uff1a\u5bf9\u4e8e PA 2-1\uff0c\u4f60\u4e0d\u9700\u8981\u5b9e\u73b0\u6240\u6709\u7684\u51fd\u6570\uff0c\u6240\u4ee5\u90e8\u5206\u51fd\u6570\u4f7f\u7528 <code>__ref_</code> \u7248\u672c\u4e0d\u5f71\u54cd\u5b8c\u6210</p> \u7f16\u8bd1\u65f6\u51fa\u73b0\u4e86 <code>./include/cpu/instr_helper.h:14:31: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'int'</code> \u4e4b\u7c7b\u7684\u62a5\u9519\uff1f <p><code>/nemu/src/cpu/instr</code> \u91cc\u9762\u7684\u6bcf\u4e00\u9879\u5934\u6587\u4ef6\u90fd\u68c0\u67e5\u4e00\u4e0b <code>make_instr_func();</code> \u6709\u6ca1\u6709\u6f0f\u52a0\u5206\u53f7</p> <p>\u7531\u4e8e\u5b8f\u5c55\u5f00\u7684\u795e\u79d8\u7279\u6027\uff0c\u62a5\u9519\u6240\u5728\u7684\u6587\u4ef6\u4f4d\u7f6e\u4e0d\u4e00\u5b9a\u6b63\u786e</p> <p>\u4e2a\u4eba\u7ecf\u5386\uff1a\u201c<code>push.h</code> \u6ca1\u52a0\u5206\u53f7\u600e\u4e48\u62a5\u9519\u62a5\u5728\u4e86 <code>div.h</code> \ud83d\ude28\u201d\uff08\u53d1\u9001\u4e8e\u51cc\u6668\u4e09\u70b9\uff09</p> \u6211\u5728\u67d0\u4e00\u4e2a testcase \u51fa\u73b0\u4e86 HIT BAD TRAP\uff0c\u4f46\u662f\u6211\u5e76\u4e0d\u77e5\u9053\u81ea\u5df1\u7684\u51fd\u6570\u5b9e\u73b0\u4e2d\u6709\u54ea\u4e9b\u9519\u8bef\uff0c\u5982\u4f55\u6392\u67e5 <p>\u6bcf\u4e00\u4e2a\u51fd\u6570\u90fd\u6709\u4e00\u4e2a <code>__ref_</code> \u7248\u672c\u7684\u6807\u51c6\u5b9e\u73b0\u3002\u5982\u679c\u4f60\u5927\u6982\u80fd\u786e\u5b9a\u53ef\u80fd\u662f\u54ea\u4e00\u6761\u6307\u4ee4\u51fa\u4e86\u95ee\u9898\uff0c\u5c31\u5c06\u5b83\u5728 <code>opcode_entry[]</code> \u4e2d\u52a0\u4e0a <code>__ref_</code>\uff0c\u5982\u679c\u518d\u6b21\u6d4b\u8bd5\uff08\u8bb0\u5f97\u5148 <code>make</code>\uff09\u53d1\u73b0 HIT GOOD TRAP\uff0c\u8bf4\u660e\u4f60\u521a\u521a\u52a0\u4e0a <code>__ref_</code> \u7684\u6307\u4ee4\u7684\u5b9e\u73b0\u6709\u95ee\u9898\uff1b</p> <p>\u5982\u679c\u4f60\u4e0d\u6e05\u695a\u54ea\u4e00\u6761\u6307\u4ee4\u51fa\u4e86\u95ee\u9898\uff0c\u90a3\u5c31\u5c06\u6240\u6709\u6d89\u53ca\u5230\u8fd9\u4e2a\u6837\u4f8b\u7684\u6307\u4ee4\u5168\u90e8\u52a0\u4e0a <code>__ref_</code>\uff0c\u4e00\u4e2a\u4e2a\u89e3\u9664 <code>__ref_</code>\uff0c\u76f4\u5230\u51fa\u73b0 HIT BAD TRAP\uff0c\u8bf4\u660e\u6700\u540e\u4e00\u4e2a\u89e3\u9664 <code>__ref_</code> \u7684\u51fd\u6570\u5b9e\u73b0\u6709\u95ee\u9898</p> \u6211\u5728\u67d0\u4e00\u4e2a testcase \u51fa\u73b0\u4e86 <code>invalid opcode</code> \u62a5\u9519 <p>\u5982\u679c\u8fd9\u4e2a opcode \u662f\u9884\u671f\u7684\uff0c\u68c0\u67e5 <code>opcode_entry[]</code> \u662f\u5426\u5fd8\u8bb0\u6dfb\u52a0\u51fd\u6570</p> <p>\u5982\u679c\u8fd9\u4e2a opcode \u4e0d\u662f\u9884\u671f\u7684\uff0c\u90a3\u4e48\u5927\u6982\u7387\u662f\u5176\u4ed6\u6307\u4ee4\u7684\u5b9e\u73b0\u6709\u95ee\u9898\uff08\u6bd4\u5982\u8fd4\u56de\u4e86\u9519\u8bef\u7684 <code>len</code>\uff09\u3002\u4f60\u53ef\u4ee5\u7528\u4e0a\u9762\u4e00\u6761\u63d0\u5230\u7684 <code>__ref_</code> \u65b9\u6848\u5c1d\u8bd5\u627e\u5230\u9519\u8bef\u7684\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u91c7\u7528 monitor \u7684\u5355\u6b65\u6267\u884c\u64cd\u4f5c\uff0c\u5b9a\u4f4d\u51fa\u73b0 <code>invalid opcode</code> \u524d\u6700\u540e\u6267\u884c\u7684 opcode</p> <p>\uff08\u4e2a\u4eba\u7ecf\u5386\uff1a\u6211\u5728\u5b9e\u73b0 <code>and</code> \u51fd\u6570\u65f6\u6ca1\u6709\u6ce8\u610f\u7b26\u53f7\u6269\u5c55\uff0c\u5bfc\u81f4 <code>quick-sort</code> \u6d4b\u8bd5\u70b9\u51fa\u73b0\u6570\u503c\u6ea2\u51fa\uff0c\u5730\u5740\u5728\u5c06\u8fd1 1w \u6b65\u6267\u884c\u540e\u76f4\u63a5\u8df3\u8f6c\u5230\u4e86 <code>0x0</code> \u5de6\u53f3\u7684\u4f4d\u7f6e\uff0c\u5e76\u6700\u7ec8 <code>invalid opcode</code> \u3002\u5728\u8fd9\u4e2a\u4e0d\u5e38\u89c1\u7684\u7ecf\u5386\u4e2d\uff0c<code>__ref_</code> \u662f\u6700\u76f4\u63a5\u7684\u6392\u67e5\u65b9\u6848\uff09</p> \u6211\u5c06\u5168\u90e8\u7684\u6307\u4ee4\u90fd <code>__ref_</code> \u4e86\uff0c\u4f46\u662f\u4f9d\u65e7 HIT BAD TRAP <p>\u8fd9\u4e0d\u5e94\u8be5\uff0c\u6839\u636e\u6d4b\u8bd5\uff0c\u5168\u90e8\u4f7f\u7528\u53c2\u8003\u5b9e\u73b0\u53ef\u4ee5\u901a\u8fc7\u6240\u6709\u7684 testcases\uff08<code>test-float</code> \u9664\u5916\uff09</p> <p>\u9700\u8981\u601d\u8003\u81ea\u5df1\u662f\u4e0d\u662f\u52a8\u8fc7\u4e0d\u8be5\u52a8\u7684\u4e1c\u897f\u4e86\uff0c\u6216\u8005\u518d\u6b21\u786e\u8ba4\u6709\u6ca1\u6709\u5fd8\u8bb0 <code>__ref_</code> \u5316\u7684\u51fd\u6570</p> \u6211\u5728 <code>make</code> \u65f6\u6ca1\u6709\u770b\u5230\u7ea2\u8272\u7684\u7f16\u8bd1\u62a5\u9519\u4fe1\u606f\uff0c\u4f46\u662f\u6211\u5728\u8c03\u7528 nemu \u8fdb\u884c test \u65f6\u53d1\u73b0 <code>command not found</code>\uff0c\u6ca1\u6709\u751f\u6210 nemu \u53ef\u6267\u884c\u6587\u4ef6 <p>\u8bf4\u660e <code>make</code> \u786e\u5b9e\u6ca1\u6709\u7f16\u8bd1\u95ee\u9898\uff0c\u4f46\u662f\u53ef\u80fd\u5b58\u5728\u94fe\u63a5\u95ee\u9898\uff0c\u6b64\u65f6\u4e0d\u4f1a\u6709\u7ea2\u8272\u7684\u62a5\u9519\uff0c\u800c\u662f\u6b63\u5e38\u989c\u8272\uff0c\u6df7\u5728\u6b63\u5e38\u7684\u7f16\u8bd1\u4fe1\u606f\u4e2d\uff0c\u6bd4\u5982\uff1a</p> <pre><code>undefined reference to 'xxx'\ncollect2: error: ld returned 1 exit status\nmake-[1]: *** [Makefile:13: nemu] Error 1\n</code></pre> <p>\u4e0a\u9762\u7684\u4f8b\u5b50\u8bf4\u660e\u4f60\u58f0\u660e\u4e86\u4e00\u4e2a\u51fd\u6570\u4f46\u662f\u4ece\u6765\u6ca1\u6709\u5b9e\u73b0\u5b83\uff0c\u8fd9\u662f\u4e00\u4e2a\u94fe\u63a5\u9636\u6bb5\u7684\u9519\u8bef\uff0c\u800c\u4e0d\u662f\u7f16\u8bd1\u9636\u6bb5\u7684\u9519\u8bef\uff0c\u6240\u4ee5\u6ca1\u6709\u5f69\u8272\u7684\u62a5\u9519\u63d0\u793a</p> \u4e3a\u4ec0\u4e48\u6211\u6ca1\u6709\u4f7f\u7528 <code>__ref_</code> \u5b8c\u6210\u6307\u4ee4\uff0c\u67d0\u4e2a testcase \u4f9d\u65e7\u63d0\u9192 \u201cYou have used reference implementation, DO NOT submit this version.\u201d <p>\u9996\u5148\u786e\u8ba4\u4e00\u4e0b\u81ea\u5df1\u662f\u4e0d\u662f\u771f\u7684\u5728\u8fd9\u4e2a testcase \u6240\u9700\u8981\u7684\u6307\u4ee4\u4e2d\u5b8c\u5168\u6ca1\u6709\u4f7f\u7528 <code>__ref_</code> </p> <p>\u7136\u540e\u5f15\u7528\u8001\u5e08\u7684\u89e3\u7b54\uff1a</p> <p>\u8fd9\u4e00\u822c\u662f\u56e0\u4e3a\u67d0\u6574\u6570\u8fd0\u7b97\u76f8\u5173\u7684\u6307\u4ee4\uff0c\u5f53\u9047\u5230\u4e24\u4e2a\u64cd\u4f5c\u6570\u957f\u5ea6\u4e0d\u4e00\u6837\u7684\u65f6\u5019\uff0c\u6ca1\u6709\u5728\u8c03\u7528alu\u5bf9\u5e94\u8fd0\u7b97\u51fd\u6570\u524d\u5148\u7edf\u4e00\u64cd\u4f5c\u6570\u957f\u5ea6\u5bfc\u81f4\u7684</p> <p>\u7edf\u4e00\u7684\u65f6\u5019\u8981\u7528sign_ext\u51fd\u6570\u505a\u7b26\u53f7\u6269\u5c55</p> \u6837\u4f8b\u6d4b\u8bd5\u7684\u65f6\u5019\u51fa\u73b0\u4e86 <code>load_exec: Assertion 'fp != 0' failed</code> <p>\u610f\u601d\u662f nemu \u6ca1\u6709\u627e\u5230\u6837\u4f8b\u6587\u4ef6</p> <p>\u8bf4\u660e\u4f60\u628a\u6837\u4f8b\u7684\u540d\u5b57\u8f93\u9519\u4e86\uff08\u5e94\u8be5\u6ca1\u6709\u540e\u7f00\u540d\uff09/ \u4f60\u624b\u6413\u4e86\u4e00\u4e2a\u6837\u4f8b\u4f46\u662f\u6ca1\u6709\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6</p> \u4e0d\u597d\u5947\u4e00\u4e0b <code>__ref_</code> \u662f\u5982\u4f55\u5b9e\u73b0\u7684\u5417 <p>\u5728 <code>libs/nemu-ref/lib-nemu-ref.a</code> \u4e2d\uff08<code>.a</code> \u6587\u4ef6\u53ef\u4ee5\u770b\u4f5c\u591a\u4e2a <code>.o</code> \u6587\u4ef6\u7684\u6253\u5305\u6587\u4ef6\uff09\u6709\u6bcf\u4e2a <code>__ref_</code> \u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u4f60\u53ef\u4ee5\u7528\u9006\u5411\u5de5\u5177\u5c06\u5176\u53cd\u6c47\u7f16\u4e3a\u6c47\u7f16\u8bed\u8a00/\u53cd\u7f16\u8bd1\u4e3a C \u8bed\u8a00</p> <p>\u53ef\u4ee5\u53cd\u7f16\u8bd1 <code>__ref_</code> \u51fd\u6570\u6765\u4e86\u89e3\u67d0\u4e2a\u51fd\u6570\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u867d\u7136\u975e\u5e38\u4e0d\u76f4\u89c2</p> <p></p>"},{"location":"ICSPA-x86/PA2-2/","title":"PA2-2","text":"<p>\u8fd8\u6ca1\u5199</p>"},{"location":"ICSPA-x86/i386/","title":"i386 \u7684\u6307\u4ee4\u7ed3\u6784 (for PA2)","text":"<p>\u90e8\u5206\u5185\u5bb9\u4f7f\u7528\u4e86 LLM \u751f\u6210</p> <p>\u4ee5\u53ca\u53c2\u8003\u94fe\u63a5\uff1a</p> <p>this</p> <p>and this</p> <p>and this</p> <p>\u5148\u7528\u4e00\u5f20\u56fe\u7b80\u5355\u8868\u793a\u5355\u6761\u6307\u4ee4\u7684\u6784\u6210\uff1a</p> <pre><code>+-----------+-----------+-----------+--------+------+------+------+------------+-----------+\n|instruction| address-  | operand-  |segment |opcode|ModR/M| SIB  |displacement| immediate |\n|  prefix   |size prefix|size prefix|override|      |      |      |            |           |\n|-----------+-----------+-----------+--------+------+------+------+------------+-----------| \n|   0 OR 1  |   0 OR 1  |   0 OR 1  | 0 OR 1 |1 OR 2|0 OR 1|0 OR 1| 0,1,2 OR 4 |0,1,2 OR 4 |\n| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -| \n|                                       number of bytes                                    | \n+------------------------------------------------------------------------------------------+\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u628a\u4e0a\u9762\u7684\u6307\u4ee4\u7ed3\u6784\u62c6\u5206\u4e3a\u4e09\u90e8\u5206\uff1a\u4e00\u7cfb\u5217\u53ef\u9009\u7684\u524d\u7f00 + opcode + \u4e00\u7cfb\u5217\u53ef\u9009\u7684\u5b57\u6bb5</p> <p>\u4e00\u6761\u6307\u4ee4\u53ef\u4ee5\u53ea\u6709 opcode\uff0c\u6bd4\u5982 <code>NOP</code> \u6307\u4ee4\uff08\u64cd\u4f5c\u7801 <code>0x90</code>\uff09\uff1b\u6240\u6709\u7684\u6307\u4ee4\u90fd\u81f3\u5c11\u6709 opcode</p> <p>\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff1a<code>66 c7 84 99 00 e0 ff ff 01 00</code></p> <p>\u5176\u7ec4\u6210\u90e8\u5206\u7684\u5212\u5206\u5982\u4e0b:</p> <pre><code>+-----------+-----------+-----------+--------+------+------+------+------------+-----------+\n|instruction| address-  |  operand- |segment |opcode|ModR/M| SIB  |displacement| immediate |\n|  prefix   |size prefix|size prefix|override|      |      |      |            |           |\n|-----------+-----------+-----------+--------+------+------+------+------------+-----------|\n|                            66                 c7     84     99    00 e0 ff ff    01 00   |\n+------------------------------------------------------------------------------------------+\n</code></pre> <p>\u5bf9\u5e94\u7684\u6c47\u7f16\u6307\u4ee4\u4e3a <code>movw $1, -0x2000(%ecx, %ebx, 4)</code> / <code>mov word ptr [ecx + ebx*4 - 0x2000], 1</code> </p>"},{"location":"ICSPA-x86/i386/#_1","title":"\u524d\u7f00\u90e8\u5206","text":"<pre><code>+-------------+-----------+-----------+--------+\n|Lock / Repeat| address-  | operand-  |segment |\n|   prefix    |size prefix|size prefix|override|\n|-------------+-----------+-----------+--------+\n|   0 OR 1    |  0 OR 1   |   0 OR 1  | 0 OR 1 |        // \u6240\u6709\u524d\u7f00\u90fd\u662f\u53ef\u9009\u9879\n| - - - - - - - - - - - - - - - - - - - - - - -| \n|               number of bytes                | \n+----------------------------------------------+\n</code></pre> <p>\u4e0d\u4e00\u6837\u7684\u5212\u5206</p> <p>\u4e2a\u4eba\u8ba4\u4e3a <code>instruction prefix</code> \u8fd9\u79cd\u8bf4\u6cd5\u5e76\u4e0d\u51c6\u786e\uff0c\u5b83\u5e94\u8be5\u662f\u6307\u4ee4\u524d\u7f00\u7684\u4e00\u4e2a\u603b\u79f0\uff1b\u76f8\u5bf9\u5e94\u7684\uff0c <code>Lock / Repeat</code> \u5728\u539f\u6765\u7684 PA \u624b\u518c\u4e2d\u5e76\u6ca1\u6709\u88ab\u63d0\u5230\uff0c\u6240\u4ee5\u6211\u4e3b\u89c2\u5730\u5c06 <code>instruction prefix</code> \u6362\u6210\u4e86 <code>Lock / Repeat</code> </p> <p>Group 1 \u2014 Lock / Repeat\uff08\u540c\u6b65\u6216\u4e32\u884c\u5316 / \u91cd\u590d\uff09</p> <ul> <li><code>0xF0</code> = LOCK\uff08\u5bf9\u5185\u5b58\u5199\u64cd\u4f5c\u505a\u539f\u5b50\u5316/\u603b\u7ebf\u9501\uff09</li> <li><code>0xF2</code> = REPNE / REPNZ\uff08\u5728\u5b57\u7b26\u4e32\u6307\u4ee4\u4e2d\u8868\u793a\u6761\u4ef6\u91cd\u590d\uff1b\u5728 SSE \u6307\u4ee4\u4e2d\u4e5f\u53ef\u4f5c\u4e3a opcode \u6269\u5c55\uff09</li> <li><code>0xF3</code> = REP / REPE / REPZ\uff08\u5b57\u7b26\u4e32\u91cd\u590d\uff1b\u5728\u67d0\u4e9b SSE \u6307\u4ee4\u4e2d\u4f5c\u4e3a opcode map\uff09</li> </ul> <p>Group 2 \u2014 Segment override / Branch hint\uff08\u6bb5\u8986\u76d6\u4e0e\u5206\u652f\u63d0\u793a\uff09</p> <ul> <li>\u6bb5\u8986\u76d6\u524d\u7f00\uff1a</li> <li><code>0x2E</code>\uff1aCS\uff08\u4ee3\u7801\u6bb5\uff09\u8986\u76d6\u524d\u7f00\uff08\u4e5f\u7b97\u5206\u652f\u63d0\u793a\u524d\u7f00\uff09</li> <li><code>0x36</code>\uff1aSS\uff08\u5806\u6808\u6bb5\uff09\u8986\u76d6\u524d\u7f00</li> <li><code>0x3E</code>\uff1aDS\uff08\u6570\u636e\u6bb5\uff09\u8986\u76d6\u524d\u7f00\uff08\u4e5f\u7b97\u5206\u652f\u63d0\u793a\u524d\u7f00\uff09</li> <li><code>0x26</code>\uff1aES\uff08\u9644\u52a0\u6bb5\uff09\u8986\u76d6\u524d\u7f00</li> <li><code>0x64</code>\uff1aFS\uff08\u9644\u52a0\u6bb5\uff09\u8986\u76d6\u524d\u7f00</li> <li><code>0x65</code>\uff1aGS\uff08\u9644\u52a0\u6bb5\uff09\u8986\u76d6\u524d\u7f00</li> </ul> <p>\u524d\u4e24\u4e2a Group \u6682\u65f6\u4e0d\u7528\u6d89\u53ca\u5b66\u4e60\uff0c\u4e8b\u5b9e\u4e0a PA \u4e2d NEMU \u7684\u5b9e\u73b0\u4e5f\u5ffd\u7565\u4e86\u8fd9\u4e9b\u524d\u7f00\u7684\u5b9e\u73b0</p> <p>Group 3 \u2014 Operand-size override</p> <ul> <li><code>0x66</code>\uff08\u5982\u679c\u4f7f\u7528\u4e86\u8fd9\u4e2a Group \u7684\u524d\u7f00\uff0c\u5c31\u4e00\u5b9a\u662f <code>0x66</code>\uff09</li> <li>\u5728 32-bit \u6a21\u5f0f\u4e0b\u628a\u64cd\u4f5c\u6570\u5927\u5c0f\u4ece\u9ed8\u8ba4 32-bit \u5207\u6362\u5230 16-bit\uff08\u5f71\u54cd\u5bc4\u5b58\u5668\u5bbd\u5ea6\u548c\u7acb\u5373\u6570/\u5b58\u53d6\u5bbd\u5ea6\uff09\uff1b\u5728 16-bit \u6a21\u5f0f\u4e0b\u5207\u6362\u5230 32-bit\u3002</li> </ul> <p>Group 4 \u2014 Address-size override</p> <ul> <li><code>0x67</code>\uff08\u5982\u679c\u4f7f\u7528\u4e86\u8fd9\u4e2a Group \u7684\u524d\u7f00\uff0c\u5c31\u4e00\u5b9a\u662f <code>0x67</code>\uff09</li> <li>\u5728 32-bit \u6a21\u5f0f\u4e0b\u628a\u5730\u5740\u8ba1\u7b97\uff08ModR/M/SIB \u89e3\u91ca\uff09\u4ece 32-bit \u5207\u6362\u5230 16-bit\uff08\u5f71\u54cd\u662f\u5426\u51fa\u73b0 SIB\u3001disp \u957f\u5ea6\u7b49\uff09\uff1b\u5728 16-bit \u6a21\u5f0f\u4e0b\u5207\u6362\u5230 32-bit \u5730\u5740\u6a21\u5f0f\u3002</li> </ul> <p>\u6709\u4e24\u4e2a\u7ea6\u5b9a\uff1a</p> <ol> <li> <p>\u6bcf\u7ec4\u5185\u53ea\u80fd\u6709\u4e00\u4e2a\u6709\u6548\u524d\u7f00\uff08\u5982\u679c\u540c\u4e00\u7ec4\u5185\u5199\u4e86\u591a\u4e2a\u524d\u7f00\uff0c\u5219\u53ea\u53d6\u6700\u540e\u4e00\u4e2a / \u672a\u5b9a\u4e49\uff09</p> </li> <li> <p>\u4e0d\u540c\u7ec4\u7684\u524d\u7f00\u7684\u51fa\u73b0\u987a\u5e8f\u6ca1\u6709\u9650\u5236\uff0c\u4f46\u662f\u7ea6\u5b9a\u4e0a\u91c7\u7528\u4e0a\u8ff0\u5c55\u793a\u7684\u987a\u5e8f</p> </li> </ol> <p>\u5728NEMU\u4e2d\uff0c\u6211\u4eec\u53ea\u8003\u8651 Group 3 \u64cd\u4f5c\u6570\u957f\u5ea6\u524d\u7f00\uff0c\u5176\u503c\u4e3a<code>0x66</code>\u3002\u5f53<code>opcode</code>\u6240\u5bf9\u5e94\u7684\u64cd\u4f5c\u6570\u957f\u5ea6\u53ef\u53d8\u65f6\uff0816\u4f4d\u621632\u4f4d\uff09\uff0c\u82e5<code>opcode</code>\u524d\u9762\u51fa\u73b0<code>0x66</code>\uff0c\u5219\u64cd\u4f5c\u6570\u957f\u5ea6\u4e34\u65f6\u6539\u53d8\u4e3a16\u4f4d\uff0c\u5426\u5219\u4e3a32\u4f4d\u3002</p>"},{"location":"ICSPA-x86/i386/#opcode","title":"opcode","text":"<p>opcode \u662f\u6240\u6709\u6307\u4ee4\u7684\u5fc5\u9009\u9879\uff0c\u51b3\u5b9a\u4e86 \u201c\u8fd9\u662f\u4e00\u6761\u4ec0\u4e48\u6307\u4ee4\u201d</p> <p>\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\uff1a\u5373\u4f7f\u662f\u76f8\u540c\u7684\u6307\u4ee4\uff0c\u4e5f\u4f1a\u51fa\u73b0\u4e0d\u540c\u7684 opcode\uff0c\u4f8b\u5982 MOV \u6307\u4ee4\uff1a</p> <pre><code>MOV r32, imm32\uff1a0xB8\uff08\u5c06\u7acb\u5373\u6570\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u4e2d\uff09\nMOV r/m32, r32\uff1a0x89\uff08\u5c06\u4e00\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u590d\u5236\u5230\u53e6\u4e00\u4e2a\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u4e2d\uff09\nMOV r32, [mem]\uff1a0x8B\uff08\u5c06\u5185\u5b58\u4e2d\u7684\u503c\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u4e2d\uff09\n</code></pre> <p>\u53c2\u8003\u9694\u58c1 RISC-V \u4e5f\u4f1a\u4e3a ADD \u548c ADDI \u5206\u522b\u8bbe\u7f6e\u4e0d\u540c\u7684 opcode\uff08\u901a\u5e38\u5728\u52a9\u8bb0\u7b26\u4e0a\u6709\u660e\u663e\u7684\u533a\u5206\uff09\uff0c\u4f46\u662f i386 \u7684\u8fd9\u79cd\u73b0\u8c61\u66f4\u52a0\u5e38\u89c1\u4e0e\u590d\u6742\uff08\u901a\u5e38\u4e0d\u4f1a\u5728\u52a9\u8bb0\u7b26\u4e0a\u660e\u663e\u533a\u5206\uff0c\u6bd4\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u90fd\u4e3a MOV\uff09</p>"},{"location":"ICSPA-x86/i386/#_2","title":"\u5b57\u6bb5\u90e8\u5206","text":"<pre><code>+------+------+------------+-----------+\n|ModR/M| SIB  |displacement| immediate |\n|      |      |            |           |\n+------+------+------------+-----------| \n|0 OR 1|0 OR 1| 0,1,2 OR 4 |0,1,2 OR 4 |\n| - - - - - - - - - - - - - - - - - - -| \n|           number of bytes            | \n+--------------------------------------+\n</code></pre> <p>\u548c\u524d\u7f00\u4e0d\u540c\u7684\u662f\uff0c\u8fd9\u91cc\u7684\u5404\u4e2a\u5b57\u6bb5\u7684\u987a\u5e8f\u4e0d\u80fd\u8c03\u6362\uff08\u5b58\u5728\u5148\u540e\u4f9d\u8d56\u5173\u7cfb\uff09</p> <p>\u6211\u4eec\u4e00\u4e2a\u4e00\u4e2a\u8ba8\u8bba\uff1a</p>"},{"location":"ICSPA-x86/i386/#modrm","title":"ModR/M \u5b57\u6bb5","text":"<p>ModR/M \u6700\u4e3b\u8981\u4f5c\u7528\u662f\u5bf9\u6307\u4ee4\u7684 operands \uff08\u64cd\u4f5c\u6570\uff09\u63d0\u4f9b\u5bfb\u5740\uff0c\u53e6\u4e00\u4e2a\u4f5c\u7528\u662f\u5bf9 Opcode \u8fdb\u884c\u8865\u5145\uff08\u53ef\u4ee5\u5148\u5ffd\u7565\u8fd9\u4e00\u6761\uff09\u3002</p> <p>\u6211\u4eec\u5148\u6765\u770b ModR/M \u7684\u7ec4\u6210\uff1a</p> <pre><code>+---+---+---+---+---+---+---+---+\n|  Mod  |Reg/Opcode |    R/M    |\n+---+---+---+---+---+---+---+---+\n</code></pre> <ul> <li> <p>Mod \u5b57\u6bb5\u7528\u6765\u6307\u793a\u64cd\u4f5c\u6570\u7684\u5bfb\u5740\u6a21\u5f0f\u3002\u5b83\u51b3\u5b9a\u4e86\u64cd\u4f5c\u6570\u662f\u5426\u5b58\u50a8\u5728\u5bc4\u5b58\u5668\u4e2d\uff0c\u6216\u8005\u662f\u5426\u9700\u8981\u901a\u8fc7\u5185\u5b58\u6765\u8bbf\u95ee\u3002</p> </li> <li> <p>\u6ce8\u610f Mod = <code>00</code> \u7684\u65f6\u5019\u5b58\u5728\u4e00\u4e2a\u7279\u4f8b\uff0c\u8fd9\u5728\u4e4b\u540e\u7684\u8868\u683c\u4e2d\u4f1a\u63d0\u5230</p> Mod \u5bfb\u5740\u6a21\u5f0f \u63cf\u8ff0 <code>00</code> <code>[base]</code> \u63d0\u4f9b <code>[base]</code> \u5f62\u5f0f\u7684\u5185\u5b58\u5bfb\u5740 <code>01</code> <code>[base + disp8]</code> \u63d0\u4f9b <code>[base + disp8]</code> \u5f62\u5f0f\u7684\u5185\u5b58\u5bfb\u5740 <code>10</code> <code>[base + disp32]</code> \u63d0\u4f9b <code>[base + disp32]</code> \u5f62\u5f0f\u7684\u5185\u5b58\u5bfb\u5740 <code>11</code> <code>register</code> \u63d0\u4f9b\u5bc4\u5b58\u5668\u5bfb\u5740 </li> <li> <p>Reg/Opcode \u5b57\u6bb5\u53ef\u80fd\u6307\u793a\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u4e5f\u53ef\u80fd\u662f opcode \u7684\u6269\u5c55</p> </li> <li> <p>\u5982\u679c\u6307\u793a\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u90a3\u4e48\u6709\u4e0b\u9762\u7684\u8868\u683c\uff1a</p> Reg/Opcode 32\u4f4d\u5bc4\u5b58\u5668 16\u4f4d\u5bc4\u5b58\u5668 8\u4f4d\u5bc4\u5b58\u5668 <code>000</code> <code>EAX</code> <code>AX</code> <code>AL</code> <code>001</code> <code>ECX</code> <code>CX</code> <code>CL</code> <code>010</code> <code>EDX</code> <code>DX</code> <code>DL</code> <code>011</code> <code>EBX</code> <code>BX</code> <code>BL</code> <code>100</code> <code>ESP</code> <code>SP</code> <code>AH</code> <code>101</code> <code>EBP</code> <code>BP</code> <code>CH</code> <code>110</code> <code>ESI</code> <code>SI</code> <code>DH</code> <code>111</code> <code>EDI</code> <code>DI</code> <code>BH</code> </li> <li> <p>\uff08\u8fd9\u91cc\u4e0d\u8003\u8651\u4f5c\u4e3a opcode \u7684\u6269\u5c55\u7684\u60c5\u51b5\uff09</p> </li> <li> <p>R/M \u5b57\u6bb5\u7528\u4e8e\u6307\u5b9a\u64cd\u4f5c\u6570\u7684\u6765\u6e90/\u76ee\u6807\u3002\u5b83\u7684\u542b\u4e49\u968f\u7740 <code>Mod</code> \u5b57\u6bb5\u7684\u4e0d\u540c\u800c\u53d8\u5316\uff1a</p> </li> <li>\u4ece\u5bc4\u5b58\u5668\u9009\u62e9\u7684\u89d2\u5ea6\u6765\u8bf4\uff0cR/M \u5b57\u6bb5\u548c Reg \u5b57\u6bb5\u51e0\u4e4e\u6ca1\u6709\u533a\u522b</li> <li>Mod \u5b57\u6bb5\u4f1a\u89c4\u5b9a R/M \u5b57\u6bb5\u88ab\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u5982\u4f55\u4f7f\u7528</li> </ul> <p>\u8003\u8651\u5230 Mod \u548c R/M \u5b57\u6bb5\u5b58\u5728\u5173\u8054\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u5f20\u66f4\u5177\u4f53\u7684\u8868\u683c\uff1a</p> <p>\uff08\u6ce8\u610f Mod = <code>00</code> R/M = 101 \u7684\u7279\u4f8b\uff09</p> Mod R/M \u5bfb\u5740\u65b9\u5f0f\uff08\u4ee5 32 \u4f4d\u4e3a\u4f8b\uff09 Mod R/M \u5bfb\u5740\u65b9\u5f0f\uff08\u4ee5 32 \u4f4d\u4e3a\u4f8b\uff09 00 000 <code>[eax]</code> 01 000 <code>[eax + disp8]</code> 001 <code>[ecx]</code> 001 <code>[ecx + disp8]</code> 010 <code>[edx]</code> 010 <code>[edx + disp8]</code> 011 <code>[ebx]</code> 011 <code>[ebx + disp8]</code> 100 <code>[SIB]</code> 100 <code>[SIB + disp8]</code> 101 <code>[eip + disp32]</code> 101 <code>[ebp + disp8]</code> 110 <code>[esi]</code> 110 <code>[esi + disp8]</code> 111 <code>[edi]</code> 111 <code>[edi + disp8]</code> 10 000 <code>[eax + disp32]</code> 11 000 <code>eax</code> 001 <code>[ecx + disp32]</code> 001 <code>ecx</code> 010 <code>[edx + disp32]</code> 010 <code>edx</code> 011 <code>[ebx + disp32]</code> 011 <code>ebx</code> 100 <code>[SIB + disp32]</code> 100 <code>esp</code> 101 <code>[ebp + disp32]</code> 101 <code>ebp</code> 110 <code>[esi + disp32]</code> 110 <code>esi</code> 111 <code>[edi + disp32]</code> 111 <code>edi</code> <p>ModR/M \u6709\u6ca1\u6709\u6307\u5b9a\u54ea\u4e2a\u662f\u6e90\u64cd\u4f5c\u6570\uff0c\u54ea\u4e2a\u662f\u76ee\u7684\u64cd\u4f5c\u6570\uff1f</p> <p>\u5e76\u6ca1\u6709\uff0c\u4e8b\u5b9e\u4e0a\u662f\u7531 opcode \u51b3\u5b9a\u4e86 ModR/M \u7684 Reg \u4e0e R/M \u5b57\u6bb5\u4e2d\u54ea\u4e2a\u662f\u6e90\u64cd\u4f5c\u6570/\u76ee\u7684\u64cd\u4f5c\u6570</p> <p>\u6bd4\u5982\uff0c\u540c\u6837\u662f MOV \u6307\u4ee4\uff0c\u6709\u4e0d\u540c\u7684opcode\uff1a</p> <p>\u5728 <code>MOV r/m32, r32</code>\uff08\u64cd\u4f5c\u7801 <code>89</code>\uff09\u4e2d\uff0c\u6e90\u64cd\u4f5c\u6570\u662f\u5bc4\u5b58\u5668 <code>r32</code>\uff08\u5728 REG \u5b57\u6bb5\uff09\uff0c\u76ee\u7684\u64cd\u4f5c\u6570\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58 <code>r/m32</code>\uff08\u5728 R/M \u5b57\u6bb5\uff09\u3002</p> <p>\u5728 <code>MOV r32, r/m32</code>\uff08\u64cd\u4f5c\u7801 <code>8B</code>\uff09\u4e2d\uff0c\u6e90\u64cd\u4f5c\u6570\u662f\u5bc4\u5b58\u5668\u6216\u5185\u5b58 <code>r/m32</code>\uff08\u5728 R/M \u5b57\u6bb5\uff09\uff0c\u76ee\u7684\u64cd\u4f5c\u6570\u662f\u5bc4\u5b58\u5668 <code>r32</code>\uff08\u5728 REG \u5b57\u6bb5\uff09\u3002</p> <p>\u4e0d\u96be\u53d1\u73b0\u8fd9\u4e24\u6761\u6307\u4ee4\u5bf9\u64cd\u4f5c\u6570\u4f4d\u7f6e\u7684\u7ea6\u5b9a\u662f\u76f8\u53cd\u7684\uff0c\uff08\u56e0\u4e3a <code>r/m32</code> \u53ea\u6709 R/M \u5b57\u6bb5\u53ef\u4ee5\u5b9e\u73b0\uff09 </p>"},{"location":"ICSPA-x86/i386/#sib","title":"SIB \u5b57\u6bb5","text":"<p>\u7531 ModR/M \u7684\u63cf\u8ff0\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u53ea\u5728 ModR/M \u7684 Mod \u4e0d\u4e3a <code>11</code> \u4e14  R/M \u4e3a <code>100</code> \u65f6\u624d\u4f1a\u4f7f\u7528</p> <pre><code>+---+---+---+---+---+---+---+---+\n| Scale |   Index   |   Base    |\n+---+---+---+---+---+---+---+---+\n</code></pre> <p>\u5bf9\u5e94\u4e86 <code>[Base + Index * Scale + Disp]</code> \u7684\u5185\u5b58\u5bfb\u5740\u65b9\u5f0f\uff0c\u5176\u4e2d Index \u4e0e Base \u5b57\u6bb5\u90fd\u8868\u793a\u5bc4\u5b58\u5668\uff08\u53c2\u7167 ModR/M:Reg \u7684\u8868\u683c\uff09\uff1bScale \u5b57\u6bb5\u4e3a <code>00</code> <code>01</code> <code>10</code> <code>11</code> \u65f6\u5206\u522b\u8868\u793a <code>1</code> <code>2</code> <code>4</code> <code>8</code> \u7684\u7f29\u653e\u56e0\u5b50\uff1bDisp \u5df2\u7ecf\u7531 Mod \u5b57\u6bb5\u51b3\u5b9a\u662f\u5426\u5b58\u5728\uff0c\u7531\u4e4b\u540e\u7684 displacement \u5b57\u6bb5\u51b3\u5b9a\u503c</p> <p>\u7279\u4f8b1\uff1a\u5f53 Index = <code>100</code> \u65f6\uff0c\u770b\u4f5c\u201cIndex = NULL\u201d\uff08\u4e0d\u4f7f\u7528\u53d8\u5740\u5bc4\u5b58\u5668\uff09\uff0c\u800c\u4e0d\u662f \u201cIndex = ESP\u201d</p> <p>\u7279\u4f8b2\uff1a\u5f53 Base = <code>101</code> \u4e14 Mod = <code>00</code> \u65f6\uff0c\u770b\u4f5c\u201cBase = NULL\u201d\uff08\u4e0d\u4f7f\u7528\u57fa\u5740\u5bc4\u5b58\u5668\uff09\uff0c\u800c\u4e0d\u662f \u201cBase = EBP\u201d\uff0c\u540c\u65f6\u542f\u7528 Disp32 \u7684\u4f7f\u7528</p> <p>\u4e24\u4e2a\u7279\u4f8b\u53ef\u4ee5\u540c\u65f6\u5b58\u5728\uff0c\u6b64\u65f6\u53ef\u4ee5\u5b9e\u73b0\u4ec5 Disp32 \u7684\u5185\u5b58\u5bfb\u5740</p> \u53c2\u8003\uff1aX86-64 Instruction Encoding - OSDev Wiki <p></p>"},{"location":"ICSPA-x86/i386/#displacement","title":"displacement \u5b57\u6bb5","text":"<p>\u7531 ModR/M \u7684 Mod \u5b57\u6bb5 or \u4e4b\u524d\u63d0\u5230\u7684\u7279\u4f8b\u51b3\u5b9a\u662f\u5426\u4f7f\u7528\u8be5\u5b57\u6bb5\uff0c\u800c displacement \u8fd9\u4e2a\u5b57\u6bb5\u51b3\u5b9a\u4e86 disp \u504f\u79fb\u503c\u662f\u4ec0\u4e48</p> <p>\uff08\u8fd9\u4e2a\u5b57\u6bb5\u53ef\u4ee5\u662f 2 bytes \u4f46\u662f\u4e0d\u5e38\u89c1\uff0c\u56e0\u6b64\u53ea\u8003\u8651 0, 1, 4 bytes \u7684\u60c5\u51b5\uff09</p>"},{"location":"ICSPA-x86/i386/#immediate","title":"immediate \u5b57\u6bb5","text":"<p>\u7531 opcode \u51b3\u5b9a\u662f\u5426\u4f7f\u7528\u8be5\u5b57\u6bb5\uff0c\u8be5\u5b57\u6bb5\u5b58\u50a8\u7acb\u5373\u6570</p>"},{"location":"ICSPA-x86/i386/#_3","title":"\u4e00\u4e9b\u4f8b\u5b50","text":""},{"location":"algorithm%26data_structure/","title":"intro","text":"<p>Some notes.</p>"},{"location":"algorithm%26data_structure/C%2B%2B%20OOP/","title":"C++ \u9762\u5411\u5bf9\u8c61 intro","text":""},{"location":"algorithm%26data_structure/C%2B%2B%20OOP/#chapter-1","title":"Chapter 1 \u5c01\u88c5","text":"<p>\u5728 C \u8bed\u8a00\u4e2d\u6784\u9020\u6570\u636e\u7ed3\u6784\u901a\u5e38\u4f7f\u7528 \u201c\u7ed3\u6784\u4f53\u5b58\u50a8 + \u51fd\u6570\u64cd\u4f5c\u201d \u7684\u65b9\u6848\uff0c\u6bd4\u5982\uff1a</p> <p>\u63a5\u4e0b\u6765\u7684\u94fe\u8868\u5b9e\u73b0\u90fd\u53ea\u6d89\u53ca\u8282\u70b9\u7684\u5b9e\u73b0\uff0c\u5e76\u6ca1\u6709\u5b9e\u73b0\u5177\u4f53\u7684\u94fe\u8868\u7c7b\u8fdb\u884c\u7ba1\u7406</p> <pre><code>// \u4e00\u4e2a\u7b80\u6613\u7684\u5355\u5411\u94fe\u8868\u8282\u70b9\u7ed3\u6784\nstruct ListNode {\n    int val;\n    struct ListNode* next;\n};\n\n// \u4ee5\u53ca\u5bf9\u5e94\u7684\u64cd\u4f5c\u51fd\u6570\nvoid listInit(struct ListNode** head);\nvoid listAppend(struct ListNode** head, int value);\n// \u5176\u4ed6\u51fd\u6570...\n</code></pre> <p>\u95ee\u9898\u662f\uff0c\u5728\u8fd9\u79cd\u6784\u9020\u60c5\u51b5\u4e0b\uff0c\u6211\u53ef\u4ee5\u4e0d\u52a0\u7ea6\u675f\u5730\u8bbf\u95ee\u6570\u636e\u7ed3\u6784\u7684\u5185\u5bb9\uff0c\u8fd9\u5728\u6709\u7684\u65f6\u5019\u975e\u5e38\u4e0d\u5b89\u5168\uff1b\u53e6\u5916\uff0c\u6570\u636e\u672c\u8eab\u548c\u6570\u636e\u64cd\u4f5c\u884c\u4e3a\u5e76\u6ca1\u6709\u88ab\u5f88\u597d\u5730\u6346\u7ed1\u5728\u4e00\u8d77\uff0c\u8fd9\u4f7f\u5f97\u4fee\u6539\u6570\u636e\u7684\u884c\u4e3a\u4e0d\u662f\u5f88\u76f4\u89c2\uff1a</p> <pre><code>struct ListNode* node = createNode(10);\nnode-&gt;val = 114;        // exposed\nnode-&gt;next = nullptr;   // \u76f4\u63a5\u5bf9\u6570\u636e\u64cd\u4f5c\n</code></pre> <p>\u4ee5\u9632\u81ea\u5df1\u5fd8\u8bb0\uff1a<code>pointer-&gt;member == (*pointer).member</code> \uff0c\u8fd9\u91cc\u548c\u63a5\u4e0b\u6765\u7684 <code>node</code> \u90fd\u662f\u6307\u9488</p> <p>\u4e8e\u662f\u6709\u4e86\u5c01\u88c5\u3002</p> <p>\u4e0b\u9762\u662f\u5c01\u88c5\u540e\u7684 C++ Ver. \u94fe\u8868\u793a\u4f8b\uff0c\u4e0d\u96be\u53d1\u73b0 \u201c\u7ed3\u6784\u4f53+\u51fd\u6570\u201d \u73b0\u5728\u88ab\u6574\u5408\u5230\u4e86\u4e00\u4e2a \u201cClass\u201d\uff0c\u4e5f\u5c31\u662f\u7c7b\u4e2d\uff1a</p> <pre><code>class ListNode {\nprivate:    // \u79c1\u6709\u6210\u5458\uff0c\u53ea\u80fd\u7531\u672c\u7c7b\u5185\u90e8\u8bbf\u95ee\n    int val;\n    ListNode* next;\n\nprotected:  // \u53d7\u9650\u5236\u6210\u5458\uff0c\u53ef\u4ee5\u88ab\u672c\u7c7b &amp;&amp; \u5b50\u7c7b\u8bbf\u95ee\n\npublic:     // \u516c\u5171\u6210\u5458\uff0c\u53ef\u4efb\u610f\u8bbf\u95ee\n    ListNode(int val) : val(val), next(nullptr) {}      // \u6784\u9020\u51fd\u6570\uff0c\u82b1\u62ec\u53f7\u91cc\u53ef\u4ee5\u5199\u5176\u4ed6\u51fd\u6570\uff0c\u6bd4\u5982 cout &lt;&lt; \"created!\";\n    ~ListNode() {}      // \u6790\u6784\u51fd\u6570\n    // \u5177\u4f53\u7684\u51fd\u6570\u5b9e\u73b0\n    int getData() const { return val; }                 // \u53d6\u503c\u51fd\u6570\n    void setNext(ListNode* node) { next = node; }       // \u8fde\u63a5\u51fd\u6570\n    // \u5176\u4ed6\u51fd\u6570...\n};\n</code></pre> <p>\u8fd9\u91cc\u989d\u5916\u63d0\u4e00\u4e0b\u6784\u9020\u51fd\u6570\u4e0e\u6790\u6784\u51fd\u6570\uff1a</p> <ul> <li>\u6784\u9020\u51fd\u6570\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 ListNode\uff0c\u53ef\u4ee5\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u6bd4\u5982\uff1a</li> </ul> <pre><code>// ListNode(int val) : val(val), next(nullptr) {}\nListNode* node = new ListNode(114);\n</code></pre> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u4e2a ListNode \u8282\u70b9\u7684 <code>val</code> \u503c\u88ab\u6210\u529f\u521d\u59cb\u5316\u4e3a <code>114</code>\uff0c<code>next</code> \u6307\u9488\u6307\u5411 <code>nullptr</code></p> <ul> <li>\u6790\u6784\u51fd\u6570\u5728\u5bf9\u8c61\u88ab\u9500\u6bc1\u65f6\u81ea\u52a8\u8c03\u7528\uff0c\u7528\u4e8e\u6e05\u7406\u8fd9\u4e2a\u5bf9\u8c61\u5728\u751f\u547d\u5468\u671f\u5185\u5229\u7528\u8fc7\u7684\u8d44\u6e90</li> </ul> <p><code>~ListNode() {}</code> \u82b1\u62ec\u53f7\u4e2d\u7684\u5185\u5bb9\u53d6\u51b3\u4e8e\u5bf9\u8c61\u5728\u751f\u547d\u5468\u671f\u5185\u6709\u6ca1\u6709\u8fdb\u884c\u65b0\u7684\u5185\u5b58\u52a8\u6001\u5206\u914d\uff08\u4e5f\u5305\u62ec\u6587\u4ef6\u8bfb\uff09\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u975e\u7a7a\u6790\u6784\u51fd\u6570\u7684\u4f8b\u5b50\uff1a</p> <pre><code>class ListNode {\nprivate:\n    int* data;        // \u548c\u524d\u9762\u7684\u5b9e\u73b0\u4e0d\u76f8\u540c\uff0c\u8fd9\u91cc\u7684 data \u91c7\u7528\u4e86\u4e0e val \u4e0d\u4e00\u6837\u7684\u5b58\u50a8\u65b9\u5f0f\uff0c\u6307\u9488\u6307\u5411\u5806\u5185\u5b58\n    ListNode* next;\npublic:\n    ListNode(int data) : data(new int(data)), next(nullptr) {}    // \u6784\u9020\u51fd\u6570\u65f6\u4e3a\u52a8\u6001\u5206\u914d\u5185\u5b58\n    ~Node() { delete data; }                                  // \u6790\u6784\u51fd\u6570\u4e2d\u4e5f\u8981\u91ca\u653e\u5bf9\u5e94\u7684\u5185\u5b58\n\n    // \u989d\u5916\u7684\u63d0\u9192\uff1a\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5982\u679c\u60f3\u62f7\u8d1d\u6570\u636e\uff0c\u5fc5\u987b\u4f7f\u7528\u6df1\u62f7\u8d1d\uff0c\u5426\u5219\u4f7f\u7528\u6d45\u62f7\u8d1d\u4f1a\u5bfc\u81f4\u591a\u4e2a\u6307\u9488\u6307\u5411\u540c\u4e00\u5757\u6570\u636e\u7684\u95ee\u9898\n};\n</code></pre> <p>\u5bf9\u4e8e\u73b0\u4ee3 C++\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u667a\u80fd\u6307\u9488\uff0c\u6b64\u65f6\u4e0d\u9700\u8981\u5199\u6790\u6784\u51fd\u6570</p> <p>\u5c01\u88c5\u5904\u7406\u540e\u7684\u6570\u636e\u7ed3\u6784\u5728\u8bbf\u95ee\u6570\u636e\uff0c\u6570\u636e\u64cd\u4f5c\u65b9\u9762\u90fd\u6709\u4e86\u975e\u5e38\u76f4\u89c2\u7684\u53d8\u5316\uff1a</p> <ul> <li>\u8bbf\u95ee <code>private</code> \u53c2\u6570\u53ea\u80fd\u901a\u8fc7 <code>public</code> \u51fd\u6570\u64cd\u4f5c\uff0c\u907f\u514d\u4e86 \u201c\u4e0d\u52a0\u7ea6\u675f\u5730\u8bbf\u95ee\u201d\uff08\u5b89\u5168\u6027\uff09\uff1b</li> </ul> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u6211\u6709\u4e00\u4e2a\u6a21\u62df ATM \u673a\u7684\u7a0b\u5e8f\uff0c\u6211\u5e0c\u671b\u4f7f\u7528\u8005\u53ea\u80fd\u901a\u8fc7 <code>deposit(val)</code> \u51fd\u6570\u8fdb\u884c\u5b58\u94b1\uff08\u6211\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u91cc\u8fdb\u884c\u5408\u6cd5\u6027\u5224\u65ad\uff09\uff0c\u800c\u4e0d\u662f <code>myAccount-&gt;balance += val</code> \uff1b</p> <p>\u5f53\u7136\u6211\u4e5f\u4e0d\u5e0c\u671b\u4efb\u4f55\u4eba\u901a\u8fc7 <code>othersAccount-&gt;balance</code> \u53bb\u201c\u5077\u7aa5\u201d\u5176\u4ed6\u4eba\u7684\u4f59\u989d\u4fe1\u606f\uff0c\u6211\u5c31\u53ef\u4ee5\u5728 <code>getBalance()</code> \u51fd\u6570\u91cc\u8bbe\u7f6e\u8d26\u53f7\u5bc6\u7801\u7684\u68c0\u67e5\uff0c\u5e76\u4e14\u8fd9\u4e2a\u51fd\u6570\u662f\u552f\u4e00\u80fd\u8bbf\u95ee\u4f59\u989d\u7684\u51fd\u6570</p> <p>\u8fd9\u5c31\u662f\u5199\u4fdd\u62a4\u548c\u8bfb\u4fdd\u62a4</p> <ul> <li><code>node-&gt;val</code> \u8fd9\u6837\u7684\u8bbf\u95ee\u64cd\u4f5c\u7531\u4e13\u95e8\u7684\u51fd\u6570 <code>getData()</code> \u8fdb\u884c\u5904\u7406\uff08\u7edf\u4e00\u6027\uff09\uff1b</li> </ul> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u6211\u6709\u4e00\u4e2a\u53d8\u91cf <code>val</code> \u56e0\u4e3a\u547d\u540d\u51b2\u7a81\u95ee\u9898\u9700\u8981\u4fee\u6539\u53d8\u91cf\u540d\u4e3a <code>value</code>\uff0c\u5728 C \u8bed\u8a00\u7684\u73af\u5883\u4e0b\uff0c\u6211\u901a\u5e38\u9700\u8981\u628a\u6240\u6709\u7684 <code>node-&gt;val</code> \u4e4b\u7c7b\u7684\u8bed\u53e5\u4fee\u6539\u4e3a <code>node-&gt;value</code>\uff0c\u5728\u4f7f\u7528\u4e86\u5c01\u88c5\u4e4b\u540e\u6211\u53ea\u9700\u8981\u4fee\u6539\u4e00\u6b21 <code>getData()</code> \u51fd\u6570\u5373\u53ef</p> <ul> <li>\u5e76\u4e14\u53ef\u7ef4\u62a4\u6027++\u4e86\uff08\u6240\u6709\u7684\u6570\u636e\u7ed3\u6784\u76f8\u5173\u64cd\u4f5c\u90fd\u5728\u4e00\u4e2a <code>Class</code> \u91cc\uff09</li> </ul> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u6211\u73b0\u5728\u6709\u82e5\u5e72\u4e2a\u5404\u4e0d\u76f8\u540c\u7684\u6570\u636e\u7ed3\u6784 <code>A, B, C, ...</code> \uff0c\u5b83\u4eec\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u51fd\u6570\u53eb\u505a <code>fun()</code>\uff0c\u5728\u6ca1\u6709\u5c01\u88c5\u7684\u60c5\u51b5\u4e0b\u6211\u53ef\u80fd\u9700\u8981 <code>funA, funB, funC, ...</code> \u7b49\u82e5\u5e72\u4e2a\u51fd\u6570\uff08\u4e07\u4e00\u4f60\u662f\u4e2a\u8d77\u540d\u5e9f\u5462\uff09\uff0c\u5728\u5c01\u88c5\u7684\u60c5\u51b5\u5199\u6211\u53ef\u4ee5\u5728\u6bcf\u4e2a\u6570\u636e\u7ed3\u6784\u7684 <code>Class</code> \u91cc\u5199\u4e00\u4e2a <code>fun</code> \u5e76\u4e14\u4e92\u4e0d\u6253\u6270</p> <p>\u8fd9\u4e00\u597d\u5904\u5728\u4e4b\u540e\u8fd8\u4f1a\u6709\u4f53\u73b0</p> <ul> <li>\u800c\u4e14\u5bf9\u7a0b\u5e8f\u7684\u4f7f\u7528\u8005\uff08\u800c\u975e\u5f00\u53d1\u8005\uff09\u6765\u8bf4\uff0c\u4ed6\u53ea\u9700\u8981\u4e86\u89e3\u76f8\u5173\u7684 <code>Public</code> \u63a5\u53e3\u5c31\u80fd\u4f7f\u7528\u7a0b\u5e8f\uff0c\u4ed6\u4e0d\u9700\u8981\u53bb\u6df1\u5165\u7814\u7a76 \u201c\u9ed1\u76d2\u5b50\u91cc\u7a76\u7adf\u53d1\u751f\u4e86\u4ec0\u4e48\u201d\uff08\u62bd\u8c61\u5316\u4e0e \"\u9ed1\u76d2\u5b50\" \u5316\uff09</li> </ul> <p>\u4ec0\u4e48\u662f\u62bd\u8c61\u5316\u4e0e \"\u9ed1\u76d2\u5b50\" \u5316\uff1f\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u4f60\u5728QQ\u91cc\u548c\u7fa4u\u6c34\u7fa4\u7684\u65f6\u5019\uff0c\u4e0d\u9700\u8981\u53bb\u4e86\u89e3\u8ba1\u7b97\u673a\u7f51\u7edc\u7b49\u5e95\u5c42\u539f\u7406\uff0c\u8fd9\u4e9b\u5e95\u5c42\u539f\u7406\u6700\u7ec8\u88ab\u62bd\u8c61\u5316\u4e3a\u4e86\u4e00\u4e2a Send \u6309\u94ae\uff0c\u800c\u4f60\u5728\u6b63\u5e38\u60c5\u51b5\u4e0b\u4e5f\u4e0d\u4f1a\u77e5\u9053\u6309\u4e0b Send \u6309\u94ae\u4e4b\u540e\u53d1\u751f\u7684\u4e8b\u60c5</p>"},{"location":"algorithm%26data_structure/C%2B%2B%20OOP/#chapter-2","title":"Chapter 2 \u7ee7\u627f","text":"<p>\u5728\u5c01\u88c5\u7684\u5e2e\u52a9\u4e0b\uff0c\u6211\u73b0\u5728\u6709\u4e86\u4e00\u4e2a\u5355\u5411\u94fe\u8868\u7684\u6a21\u677f\uff1a</p> <pre><code>class ListNode {\nprivate:\n    int val;\n    ListNode* next;\n\npublic:\n    ListNode(int val) : val(val), next(nullptr) {}      // \u6784\u9020\u51fd\u6570\n    virtual ~ListNode() {}                              // \u865a\u6790\u6784\u51fd\u6570\uff08\u8fd9\u662f\u4e2a\u5565\uff09\n    int getData() const { return val; }                 // \u53d6\u503c\u51fd\u6570\n    void setNext(ListNode* node) { next = node; }       // \u8fde\u63a5\u51fd\u6570\n    // \u5176\u4ed6\u51fd\u6570...\n};\n</code></pre> <p>\u73b0\u5728\u6211\u53c8\u60f3\u5b9e\u73b0\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u7684\u6a21\u677f\uff0c\u8003\u8651\u5230\u5355\u5411\u94fe\u8868\u548c\u53cc\u5411\u94fe\u8868\u5177\u6709\u7ed3\u6784\u76f8\u4f3c\u7684\u5730\u65b9\uff0c\u6211\u5982\u679c\u91cd\u65b0\u518d\u5199\u4e00\u4e2a\u5d2d\u65b0\u7684\u6a21\u677f\uff0c\u663e\u5f97\u6709\u4e9b\u8d39\u4e8b\uff0c\u800c\u4e14\u5982\u679c\u6211\u5bf9\u5355\u5411\u94fe\u8868\u548c\u53cc\u5411\u94fe\u8868\u7684\u5b9e\u73b0\u6709\u6240\u533a\u522b\uff0c\u5728\u8fdb\u884c\u6df7\u5408\u4f7f\u7528\u65f6\u53ef\u80fd\u4e0d\u592a\u65b9\u4fbf</p> <p>\u4e8e\u662f\u5f15\u5165\u7ee7\u627f\uff1a</p> <pre><code>class DoublyListNode : public ListNode {\nprivate:\n    DoublyListNode* prev;  // \u6307\u5411\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\npublic:\n    DoublyListNode(int val) : ListNode(val), prev(nullptr) {}  // \u6784\u9020\u51fd\u6570\n    DoublyListNode* getPrev() const { return prev; }\n    void setPrev(DoublyListNode* node) { prev = node; }\n    void setNext(DoublyListNode* node) {\n        ListNode::setNext(node);  // \u8c03\u7528\u57fa\u7c7b\u7684 setNext\n        if (node != nullptr) {\n            node-&gt;setPrev(this);  // \u65b0\u8282\u70b9\u7684 prev \u6307\u5411\u5f53\u524d\u8282\u70b9\n        }\n    }\n    // \u5176\u4ed6\u51fd\u6570...\n};\n</code></pre> <p>\u6211\u4eec\u5c06 <code>DoublyListNode</code> \u8bbe\u7f6e\u4e3a <code>ListNode</code> \u8fd9\u4e2a\u57fa\u7c7b\u7684\u7ee7\u627f\u5b50\u7c7b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728 <code>ListNode</code> \u7684\u5df2\u6709\u57fa\u7840\u4e0a\u52a0\u4e0a <code>DoublyListNode</code> \u7684\u7279\u6709\u5143\u7d20\u5c31\u5b8c\u6210\u4e86\u53cc\u5411\u94fe\u8868\u7684\u5b9e\u73b0</p> <p>\u65e2\u7136 <code>private</code> \u4e0d\u5bf9\u5b50\u7c7b\u5f00\u653e\uff0c\u90a3\u4e48\u6211\u7684 <code>DoublyListNode</code> \u8fd8\u80fd\u4f7f\u7528 <code>ListNode</code> \u4e2d\u7684 <code>val</code> \u548c <code>next</code> \u5417\uff1f</p> <p>\u786e\u5b9e\uff0c<code>private</code> \u7684\u9650\u5236\u4f7f\u5f97\u4e0d\u80fd\u76f4\u63a5\u5bf9 <code>val</code> \u4e0e <code>next</code> \u8fdb\u884c\u8bbf\u95ee\uff0c\u4f46\u662f\u57fa\u7c7b\u6210\u5458\u91cc\u5b58\u5728 <code>getData()</code> \u516c\u5171\u51fd\u6570\uff0c\u5728 <code>setNext()</code> \u65f6\u4e5f\u76f4\u63a5\u8c03\u7528\u4e86\u7236\u51fd\u6570\uff0c\u56e0\u6b64\u89c4\u907f\u4e86\u76f4\u63a5\u8bbf\u95ee <code>private</code> \u53d8\u91cf\u7684\u95ee\u9898</p> <p>\u8fd9\u4e5f\u662f\u5c01\u88c5\u7684\u4f53\u73b0</p> <p>\u4e3a\u4ec0\u4e48\u6790\u6784\u51fd\u6570\u53d8\u6210\u4e86\u865a\u6790\u6784\u51fd\u6570\uff1f</p> <p>\u6790\u6784\u51fd\u6570\u53ea\u5bf9\u57fa\u7c7b\u6709\u6548\uff0c\u5bf9\u5b50\u7c7b\u65e0\u6548\uff1b\u800c\u865a\u6790\u6784\u51fd\u6570\u5bf9\u57fa\u7c7b\u3001\u5b50\u7c7b\u90fd\u6709\u6548</p> <p>\u5982\u679c\u4e0d\u4f7f\u7528 <code>virtual</code> \u5173\u952e\u5b57\uff0c\u5b50\u7c7b\u4f1a\u9020\u6210\u5185\u5b58\u6cc4\u6f0f</p> <p>\u8fd9\u6837\u5199\u6709\u4ec0\u4e48\u597d\u5904\u5462\uff1f</p> <p>\u4e00\u662f\u53ef\u4ee5\u590d\u7528\u5f88\u591a\u4ee3\u7801\uff0c\u51cf\u5c11\u91cd\u590d\u52b3\u52a8\u6210\u672c\uff0c\u5e76\u4e14\u66f4\u52a0\u5bb9\u6613\u7ef4\u62a4</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u6211\u4ee5\u5355\u5411\u94fe\u8868\u4e3a\u57fa\u7c7b\u6784\u5efa\u4e86\u4e00\u4e2a \u201c\u94fe\u8868\u5e1d\u56fd\u201d\uff0c\u5b9e\u73b0\u4e86\u5404\u79cd\u5404\u6837\u7684\u94fe\u8868\uff0c\u8fd9\u671f\u95f4\u6211\u53ea\u9700\u8981\u5199\u4e00\u6b21 <code>getData()</code> \u51fd\u6570\uff0c\u800c\u4e0d\u662f Ctrl C+V \u82e5\u5e72\u904d</p> <p>\u5728\u6d4b\u8bd5\u65f6\u6211\u60ca\u5947\u5730\u53d1\u73b0\u81ea\u5df1\u628a\u6240\u6709\u7684 <code>getData()</code> \u51fd\u6570\u5199\u9519\u4e86\uff0c\u5982\u679c\u6211\u4f7f\u7528\u4e86\u7ee7\u627f\u5f0f\u5199\u6cd5\uff0c\u6211\u53ea\u9700\u8981\u4fee\u6539\u4e00\u6b21\u57fa\u7c7b\u7684 <code>getData()</code> \u5373\u53ef\uff0c\u800c\u4e0d\u662f\u6bcf\u4e2a <code>Class</code> \u90fd\u8fdb\u884c\u91cd\u590d\u4fee\u6539</p> <p>\u4e8c\u662f\u7edf\u4e00\u4e86\u63a5\u53e3</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff1a<code>getData()</code> \u5982\u679c\u5728\u4e0d\u540c\u7684\u76f8\u4f3c\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u56e0\u4e3a\u975e\u5e38\u968f\u610f\u7684\u547d\u540d\u4e60\u60ef\u88ab\u547d\u540d\u4e3a <code>getValue()</code> <code>getVal()</code> <code>get()</code> \uff0c\u8fd9\u4e00\u6740\u4f24\u529b\u76f8\u5f53\u4e8e \u201c\u6211\u7684\u624b\u673a\u5e94\u8be5\u4f7f\u7528 Type-C \u8fd8\u662f Micro-USB \u8fd8\u662f Lightning \u63a5\u53e3\u8fdb\u884c\u5145\u7535\u201d</p> <p>\u4e09\u662f\u65b9\u4fbf\u6269\u5c55</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u6211\u6709\u4e00\u4e2a <code>Player</code> \u57fa\u7c7b\u8bb0\u5f55\u4e86\u4e00\u4e2a\u6e38\u620f\u4e2d\u89d2\u8272\u7684\u6240\u6709\u57fa\u672c\u5b9e\u73b0\uff0c\u73b0\u5728\u6211\u60f3\u5f00\u53d1\u5f88\u591a\u4e0d\u540c\u7684\u6e38\u620f\u89d2\u8272\uff0c\u5206\u522b\u6709\u4e0d\u540c\u7684\u89d2\u8272\u6570\u636e\u4e0e\u6280\u80fd\uff08\u5c5e\u6027\u4e0e\u65b9\u6cd5\uff09\uff0c\u6b64\u65f6\u7ee7\u627f\u57fa\u7c7b\u6a21\u677f\u7684\u4f18\u52bf\u5c31\u80fd\u4f53\u73b0\u51fa\u6765\u4e86\uff08\u751f\u547d\u503c\u653b\u51fb\u529b\u7b49\u6570\u636e\u65e0\u9700\u6539\u52a8\u76f4\u63a5\u7ee7\u627f\uff0c\u540c\u65f6\u6211\u53ef\u4ee5\u8f83\u4e3a\u81ea\u7531\u7684\u8fdb\u884c\u6269\u5c55\uff09</p> <p>\u5176\u5b9e\u8fd9\u4e2a\u4f8b\u5b50\u53ef\u4ee5\u4e00\u6b21\u4f53\u73b0\u4ee5\u4e0a\u4e09\u4e2a\u4f18\u70b9</p>"},{"location":"algorithm%26data_structure/C%2B%2B%20OOP/#chapter-3","title":"Chapter 3 \u6a21\u677f","text":"<p>\u8fd8\u662f\u5355\u5411\u94fe\u8868\u7684\u6a21\u677f\uff1a</p> <pre><code>class ListNode {\nprivate:\n    int val;\n    ListNode* next;\n\npublic:\n    ListNode(int val) : val(val), next(nullptr) {}      // \u6784\u9020\u51fd\u6570\n    virtual ~ListNode() {}                              // \u865a\u6790\u6784\u51fd\u6570\n    int getData() const { return val; }                 // \u53d6\u503c\u51fd\u6570\n    void setNext(ListNode* node) { next = node; }       // \u8fde\u63a5\u51fd\u6570\n    // \u5176\u4ed6\u51fd\u6570...\n};\n</code></pre> <p>\u6211\u53d1\u73b0\u8fd9\u4e2a\u94fe\u8868\u7684 <code>val</code> \u53ea\u80fd\u5b58\u50a8 <code>int</code> \u503c\uff0c\u6211\u5e0c\u671b\u53ef\u4ee5\u6269\u5c55\u5230\u66f4\u591a\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f46\u662f\u6211\u53c8\u4e0d\u5e0c\u671b\u53e6\u5916\u5199 k \u4e2a\u51fd\u6570\u5206\u522b\u5bf9\u5e94 k \u4e2a\u6570\u636e\u7c7b\u578b</p> <p>\u4e8e\u662f\u6709\u4e86\u6a21\u677f\u3002</p> <pre><code>template &lt;typename T&gt;\nclass ListNode {\nprivate:\n    T val;\n    ListNode&lt;T&gt;* next;\n\npublic:\n    ListNode(T val) : val(val), next(nullptr) {}        // \u6784\u9020\u51fd\u6570\n    virtual ~ListNode() {}                              // \u865a\u6790\u6784\u51fd\u6570\n    T getData() const { return val; }                   // \u53d6\u503c\u51fd\u6570\n    void setNext(ListNode&lt;T&gt;* node) { next = node; }    // \u8fde\u63a5\u51fd\u6570\n    // \u5176\u4ed6\u51fd\u6570...\n};\n</code></pre> <p><code>template &lt;typename T&gt;</code> \u8868\u793a\u63a5\u4e0b\u6765\u7684\u8fd9\u4e2a\u7c7b\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u7c7b\u578b\u53c2\u6570\uff0c\u800c\u8fd9\u4e2a\u53c2\u6570\u5728\u58f0\u660e\u65f6\u6307\u5b9a\uff1a</p> <pre><code>ListNode&lt;int&gt;* node1 = new ListNode&lt;int&gt;(114);\nListNode&lt;double&gt;* node2 = new ListNode&lt;double&gt;(5.14);\nListNode&lt;string&gt;* node3 = new ListNode&lt;string&gt;(\"hm\");\n</code></pre> <p>\u8fd9\u6837\u6211\u4eec\u6784\u9020\u4e86\u4e09\u4e2a <code>val</code> \u7c7b\u578b\u4e0d\u540c\u7684\u94fe\u8868</p> <p>\u8fd9\u4e9b Node \u7684\u7c7b\u662f\u5426\u5b8c\u5168\u4e0d\u76f8\u540c\uff1f</p> <p><code>ListNode&lt;int&gt;</code> <code>ListNode&lt;double&gt;</code> \u662f\u5b8c\u5168\u4e0d\u540c\u7684\u4e24\u4e2a\u7c7b\uff0c\u4f60\u5e94\u5f53\u5c06\u8fd9\u4e24\u4e2a Node \u89c6\u4e3a\u4e0d\u76f8\u5173\u7684\u7c7b\uff0c\u53ea\u662f\u5b83\u4eec\u5171\u7528\u4e86\u540c\u4e00\u5957\u7c7b\u6a21\u677f</p> <p>\u7c7b\u7684\u597d\u5904\u5728\u4e8e\u6211\u4e0d\u9700\u8981\u4e3a\u6bcf\u79cd\u6570\u636e\u7c7b\u578b\u5355\u72ec\u5199\u4e00\u5957\u6a21\u677f\uff0c\u4f46\u662f\u5982\u679c\u8981\u4f7f\u4e0d\u540c\u7684\u7c7b\u4e4b\u95f4\u4ea7\u751f\u4ea4\u4e92\uff08\u6bd4\u5982\u5c06 <code>ListNode&lt;int&gt;</code> \u4e0e <code>ListNode&lt;double&gt;</code> \u94fe\u63a5\uff09\uff0c\u53c2\u89c1\u540e\u9762\u7684 \u201c\u591a\u6001\u201d</p>"},{"location":"algorithm%26data_structure/C%2B%2B%20OOP/#chapter-4","title":"Chapter 4 \u591a\u6001","text":"<p>\u5728 \u201c\u7ee7\u627f\u201d \u4e2d\uff0c\u6211\u4eec\u63d0\u5230\u4e86 \u201c\u865a\u51fd\u6570\u201d\uff0c\u865a\u51fd\u6570\u662f\u4e00\u4e2a\u53ef\u4ee5\u5728\u201c\u8fd0\u884c\u65f6\u6839\u636e\u5bf9\u8c61\u7684\u5b9e\u9645\u7c7b\u578b\u201d\u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a\u7248\u672c\u7684\u51fd\u6570\u3002\u6bd4\u5982\u865a\u6790\u6784\u51fd\u6570\u53ef\u4ee5\u6839\u636e\u5f53\u524d\u5bf9\u8c61\u7684\u7c7b\u578b\uff08\u57fa\u7c7b or \u5b50\u7c7b\uff09\u5b9e\u884c\u5bf9\u5e94\u7684\u6790\u6784\u64cd\u4f5c</p> <p>\u5728 \u201c\u6a21\u677f\u201d \u4e2d\uff0c\u6211\u4eec\u610f\u8bc6\u5230\u4e0d\u540c\u6a21\u677f\u6240\u5efa\u7acb\u7684\u7c7b\u662f\u72ec\u7acb\u533a\u5206\u7684\uff0c\u4e0d\u540c\u6a21\u677f\u4ea7\u751f\u7684\u7c7b\u4e4b\u95f4\u4e0d\u80fd\u8fdb\u884c\u4ea4\u4e92</p> <p>\u6211\u4eec\u53d1\u73b0\u865a\u51fd\u6570\u53ef\u4ee5\u533a\u5206 \u201c\u4e0d\u540c\u6a21\u677f\u6240\u5efa\u7acb\u7684\u7c7b\u201d\uff0c\u4ece\u800c\u51b3\u5b9a\u8c03\u7528\u4e0d\u540c\u7248\u672c\u7684\u51fd\u6570\uff0c\u5b9e\u73b0\u4e0d\u540c\u6a21\u677f\u7c7b\u4e4b\u95f4\u7684\u94fe\u63a5</p> <p>\u4e0a\u9762\u6240\u8bf4\u7684\u5c31\u662f\u8fd0\u884c\u65f6\u591a\u6001\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u6839\u636e\u5bf9\u8c61\u7684\u5b9e\u9645\u7c7b\u578b\u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a\u7248\u672c\u7684\u51fd\u6570</p> <p>\u5b9e\u9645\u4e0a\uff0c\u5f53\u6211\u4eec\u5728\u4e0a\u4e00\u4e2a Chapter \u4e2d\u4f7f\u7528 template \u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u53e6\u4e00\u7c7b\u591a\u6001\uff1a\u7f16\u8bd1\u65f6\u591a\u6001\uff1a\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u5c31\u6839\u636e <code>ListNode&lt;T&gt; n1</code> \u8fd9\u6837\u7684\u5b9e\u4f8b\u5316\u8bed\u53e5\u53bb\u751f\u6210\u5bf9\u5e94\u7684 <code>ListNode&lt;T&gt;</code> \u7c7b\uff08\u51fa\u73b0\u4e86\u51e0\u79cd\u6570\u636e\u7ed3\u6784\u5c31\u751f\u6210\u51e0\u79cd\u7c7b\uff09\u3002\u7136\u800c\u6b64\u65f6\u7684\u591a\u6001\u5e76\u4e0d\u80fd\u5ef6\u7eed\u5230\u8fd0\u884c\u65f6\u72b6\u6001\uff08\u6bd4\u5982\u94fe\u63a5\u6df7\u5408\u4e86\u591a\u79cd\u4e0d\u540c\u7c7b\u578b\u7684 <code>val</code> \u7684\u94fe\u8868\uff09</p> <p>\u800c\u73b0\u5728\u6211\u4eec\u8981\u5229\u7528\u865a\u51fd\u6570\u8fdb\u4e00\u6b65\u5b8c\u6210\u8fd0\u884c\u65f6\u591a\u6001\uff1a</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4e00\u4e2a \u201c\u62bd\u8c61\u7c7b\u201d\uff1a</p> <pre><code>class BaseListNode {\nprivate:\n    BaseListNode* next;\n    // \u6ca1\u6709 val \u53d8\u91cf\uff0c\u8fd9\u4e2a\u53d8\u91cf\u5e94\u8be5\u5728\u6a21\u677f\u5b50\u7c7b\u4e2d\u5b9a\u4e49\npublic:\n    BaseListNode() : next(nullptr) {}   // \u6784\u9020\u51fd\u6570\uff0c\u6ce8\u610f\u8fd9\u4e2a\u51fd\u6570\u5e76\u6ca1\u6709\u5b9e\u73b0\u521d\u59cb\u5316\n    virtual ~BaseListNode() {}          // \u865a\u6790\u6784\u51fd\u6570\n                                        // \u6ce8\u610f\u6ca1\u6709\u53d6\u503c\u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u51fd\u6570\u9700\u8981 template \u4e0b\u5b9e\u73b0\n    void setNext(BaseListNode* node) { next = node; }   // \u8fde\u63a5\u51fd\u6570\n\n    // \u4e3a\u4e86\u4f53\u73b0\u8fd0\u884c\u65f6\u591a\u6001\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7eaf\u865a\u51fd\u6570\u7684\u5b9e\u73b0\n    // \u8fd9\u91cc\u4ee5 print() \u6253\u5370 val \u4e3a\u4f8b\n    virtual void print() const = 0;\n};\n</code></pre> <p>\u8fd9\u4e2a\u7c7b\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a \u201c\u5927\u6846\u67b6\u201d\uff0c\u7531\u4e8e\u7eaf\u865a\u51fd\u6570\u7684\u5b58\u5728\uff0c\u5c5e\u4e8e\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u56e0\u6b64\u5199\u51fa <code>BaseListNode node</code> \u7684\u5b9e\u4f8b\u5316\u662f\u4e0d\u88ab\u5141\u8bb8\u7684</p> <p>\u62bd\u8c61\u7c7b\u4e2d\u5fc5\u987b\u6709\u81f3\u5c11\u4e00\u4e2a\u7eaf\u865a\u51fd\u6570\uff1a<code>virtual void func() = 0;</code></p> <p>\u5728 <code>virtual void print() const = 0;</code> \u7684\u4f8b\u5b50\u4e2d\uff1a</p> <p><code>virtual</code> \u8868\u793a\u5b83\u662f\u4e00\u4e2a\u865a\u51fd\u6570\uff1b</p> <p><code>const</code> \u8868\u793a\u51fd\u6570\u7684\u5b9e\u73b0\u662f\u53ea\u8bfb\u7684\uff1b</p> <p><code>= 0</code> \u8fdb\u4e00\u6b65\u8868\u660e\u5b83\u662f\u4e00\u4e2a\u7eaf\u865a\u51fd\u6570</p> <p>\u5f53\u4f60\u5728\u57fa\u7c7b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7eaf\u865a\u51fd\u6570\uff0c\u4f60\u5c31\u5fc5\u987b\u5728\u6bcf\u4e00\u4e2a\u5b50\u7c7b\u4e2d\u53bb\u5355\u72ec\u5b9e\u73b0\u5b83</p> <p>\u5728\u62bd\u8c61\u7c7b\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u6784\u9020\u6a21\u677f\u5b50\u7c7b\uff1a</p> <pre><code>template &lt;typename T&gt;\nclass ListNode : public BaseListNode {\nprivate:\n    T val;\n    // \u6307\u9488\u5728\u57fa\u7c7b\u4e2d\u5df2\u7ecf\u58f0\u660e\npublic:\n    ListNode(const T&amp; value) : val(value) {}    // \u5728 template \u4e0b\u91cd\u5199\u6784\u9020\u51fd\u6570\uff0c\u5b9e\u73b0\u521d\u59cb\u5316\n\n    T getData() const { return val;}        // \u501f\u52a9 template \u5b9e\u73b0\n\n    // \u8fd9\u91cc\u662f print() \u5728\u6a21\u677f\u7c7b\u4e2d\u7684\u8986\u5199\u5316\u5b9e\u73b0\n    void print() const override { cout &lt;&lt; val; }\n};\n</code></pre> <p>\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5982\u4f55\u4f53\u73b0\u591a\u6001\uff1f\u5728 <code>print()</code> \u51fd\u6570\u7684\u5b9e\u73b0\u4e2d\uff1a</p> <pre><code>class BaseListNode {\npublic:\n    virtual void print() const = 0;\n};\n\ntemplate&lt;typename T&gt;\nclass ListNode : public BaseListNode {\npublic:\n    void print() const override { std::cout &lt;&lt; val; }\n};\n</code></pre> <p>\u7f16\u8bd1\u65f6\uff0c\u6839\u636e\u7a0b\u5e8f\u4e2d\u5b9e\u4f8b\u5316\u7684\u60c5\u51b5\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u751f\u6210\u9700\u8981\u7528\u5230\u7684\u5404\u79cd <code>ListNode&lt;T&gt;</code>\uff0c\u8fd9\u5c31\u662f\u7f16\u8bd1\u65f6\u591a\u6001\u7684\u4f53\u73b0\uff0c\u6b64\u65f6\u4e0d\u540c\u7684 <code>ListNode&lt;T&gt;</code> \u96b6\u5c5e\u4e8e\u4e0d\u540c\u7684\u7c7b\u3002</p> <p>\u8fd0\u884c\u65f6\uff0c\u901a\u8fc7\u865a\u51fd\u6570\u7684\u8c03\u7528\u63a5\u53e3\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u6839\u636e\u5bf9\u8c61\u5b9e\u9645\u7c7b\u578b\u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a\u5b9e\u73b0\uff0c\u8fd9\u4e00\u64cd\u4f5c\u4f7f\u5f97\u4e0d\u540c\u7684 <code>ListNode&lt;T&gt;</code> \u7c7b\u901a\u8fc7\u865a\u51fd\u6570\u8fdb\u884c\u7edf\u4e00\u5904\u7406\uff0c\u6bd4\u5982\u4f7f\u7528\u540c\u4e00\u4e2a <code>print()</code> \u51fd\u6570\uff0c\u5bf9\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684 <code>val</code> \u8fdb\u884c\u6253\u5370</p> <p>\u901a\u5e38\u6765\u8bf4\uff0c\u7f16\u8bd1\u65f6\u591a\u6001\u7684\u6027\u80fd\u66f4\u597d\uff08\u5f00\u9500\u4f4e\uff09\uff0c\u7c7b\u578b\u66f4\u5b89\u5168\uff1b\u800c\u8fd0\u884c\u65f6\u591a\u6001\u7684\u5b9e\u73b0\u66f4\u4e3a\u6e05\u6670\u3002\u5b83\u4eec\u7684\u4f18\u7f3a\u70b9\u6bd4\u8f83\u53ef\u4ee5 STFW</p> <p>\u81f3\u6b64\u6211\u4eec\u5bf9\u591a\u6001\u6709\u4e86\u521d\u6b65\u7684\u5370\u8c61\uff0c\u5f53\u7136\uff0c\u591a\u6001\u7684\u5f62\u5f0f\u6709\u5f88\u591a\u79cd\uff0c\u4ee5\u4e0a\u53ea\u662f\u5bf9\u591a\u6001\u7684\u4e00\u79cd\u4e3e\u4f8b\u5b9e\u73b0</p> <p>\u5199\u5b8c\u8fd9\u7bc7 note \u540e\uff0c\u6211\u5165\u95e8\u4e86\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08\u4e86\u5417\uff09</p>"},{"location":"algorithm%26data_structure/linkedlist/","title":"\u94fe\u8868","text":"<p>\u94fe\u8868\u662f\u4e00\u79cd\u7ebf\u6027\u6570\u636e\u7ed3\u6784\uff0c\u5141\u8bb8\u975e\u8fde\u7eed\u5185\u5b58\u5b58\u50a8\uff0c\u9488\u5bf9\u4e8e\u9891\u7e41\u589e\u5220\u64cd\u4f5c\u7684\u573a\u666f\uff0c\u4e0d\u9002\u7528\u4e8e\u9700\u8981\u9891\u7e41\u8bfb\u5199\u64cd\u4f5c\u7684\u573a\u666f</p>"},{"location":"algorithm%26data_structure/linkedlist/#_2","title":"\u5b9e\u73b0\u65b9\u5f0f","text":"<p>\u94fe\u8868\u6709\u5f88\u591a\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff1a</p> <p>1- \u7ed3\u6784\u65b9\u5f0f\uff1a\u8fd9\u79cd\u5b9e\u73b0\u5206\u79bb\u8282\u70b9\u4e0e\u94fe\u8868\u7684\u903b\u8f91\uff0c\u901a\u8fc7\u94fe\u8868\u7c7b\u64cd\u4f5c\u8282\u70b9\u7ed3\u6784\u4f53</p> <pre><code>struct ListNode {                               // \u5355\u4e2a\u94fe\u8868\u8282\u70b9\u7684\u7ed3\u6784\u4f53\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}  // \u7ed3\u6784\u4f53\u7684\u6784\u9020\u51fd\u6570\n};\n\nclass LinkedList {                              // \u901a\u8fc7\u7ed3\u6784\u4f53\u5b9e\u73b0\u7684\u94fe\u8868\u7c7b\nprivate:\n    ListNode* head;                             // \u94fe\u8868\u7c7b\u7684\u79c1\u6709\u53d8\u91cf\u53ea\u6709\u5934\u6307\u9488\npublic:\n    LinkedList() : head(nullptr) {}             // \u94fe\u8868\u7c7b\u7684\u6784\u9020\u51fd\u6570\n    void insertAtHead(int val) { ... }\n    // ... \n};\n</code></pre> <p>2- \u590d\u5408\u65b9\u5f0f\uff1a\u5728\u7ed3\u6784\u65b9\u5f0f\u7684\u5b9e\u73b0\u57fa\u7840\u4e0a\u5c06\u8282\u70b9\u5b9a\u4e49\u4e3a\u4e86\u72ec\u7acb\u7684\u7c7b\uff0c\u5e76\u901a\u8fc7\u53cb\u5143\u5f62\u6210\u4e0e\u94fe\u8868\u7c7b\u7684\u590d\u5408</p> <pre><code>class LinkedList;                   // \u524d\u5411\u58f0\u660e\n\nclass ListNode {                    // \u94fe\u8868\u7ed3\u70b9\u7c7b    \n    friend class LinkedList;        // \u53cb\u5143\u58f0\u660e\uff0c\u5b9e\u73b0 LinkedList \u5bf9 ListNode \u7684\u76f4\u63a5\u8bbf\u95ee\nprivate:\n    int val;\n    ListNode* next;\npublic: \n    ListNode(int x): val(x), next(nullptr) {}\n};\n\nclass LinkedList {                  // \u94fe\u8868\u7c7b      \nprivate:\n    ListNode* head;\npublic:\n    LinkedList() : head(nullptr) {}\n    void insertAtHead(int val) { ... }\n    // ...\n};\n</code></pre> <p>3- \u5d4c\u5957\u65b9\u5f0f\uff1a\u5728\u590d\u5408\u65b9\u5f0f\u7684\u5b9e\u73b0\u57fa\u7840\u4e0a\u5c06\u8282\u70b9\u7c7b\u5b9a\u4e49\u4e3a\u4e86\u94fe\u8868\u7c7b\u7684\u5b50\u7c7b\uff0c\u5c01\u88c5\u6027\u66f4\u5f3a</p> <pre><code>class LinkedList {\nprivate:\n    class ListNode {    // \u5185\u90e8\u7c7b\n    public:\n        int val;\n        ListNode* next;\n        ListNode(int x): val(x), next(nullptr) {}\n    };\n\n    ListNode* head;     // \u5934\u8282\u70b9\n\npublic:\n    LinkedList(): head(nullptr) {}\n    void insertAtHead(int x) { ... }\n    // ...\n};\n</code></pre> <p>4- \u7ee7\u627f\u65b9\u5f0f\uff1a\u94fe\u8868\u7c7b\u6210\u4e3a\u8282\u70b9\u7c7b\u7684\u7ee7\u627f\u5b50\u7c7b\uff0c\u53ef\u4ee5\u636e\u6b64\u5b9e\u73b0\u591a\u6001\uff0c\u4f46\u662f\u96be\u4ee5\u7ef4\u62a4\uff0c\u4ec5\u4f9b\u7406\u8bba\u5b9e\u73b0</p> <pre><code>class ListNode {                                // \u94fe\u8868\u8282\u70b9\u57fa\u7c7b\nprotected:\n    int val;\n    ListNode* next;\n\npublic:\n    ListNode(int x) : val(x), next(nullptr) {}\n    virtual ~ListNode() = default;              // \u865a\u6790\u6784\u51fd\u6570\uff08\u5728\u7ee7\u627f\u5199\u6cd5\u4e2d\u4e3a\u8fd0\u884c\u65f6\u591a\u6001\u7684\u5b9e\u73b0\u505a\u51c6\u5907\uff09\n};\n\nclass LinkedList : public ListNode {            // \u94fe\u8868\u7c7b\u7ee7\u627f\u81ea\u8282\u70b9\u7c7b\nprivate:\n    ListNode* head;\n\npublic:\n    LinkedList() : ListNode(), head(nullptr) {} // \u94fe\u8868\u7c7b\u6784\u9020\u51fd\u6570\n\n    void insertAtHead(int val);                 // \u5728\u5934\u90e8\u63d2\u5165\n    // ...\n};\n</code></pre> <p>\u4e4b\u540e\u53ea\u4f1a\u8fdb\u884c\u7ed3\u6784\u65b9\u5f0f\u7684\u5b9e\u73b0\uff0c\u5176\u4ed6\u65b9\u5f0f\u540c\u7406\u5b9e\u73b0</p>"},{"location":"algorithm%26data_structure/linkedlist/#_3","title":"\u624b\u52a8\u5b9e\u73b0","text":""},{"location":"algorithm%26data_structure/linkedlist/#_4","title":"\u5355\u5411\u94fe\u8868","text":"<p>\u4ee5\u4e0b\u4e3a\u5355\u5411\u94fe\u8868\u7684\u624b\u52a8\u5b9e\u73b0\uff1a</p> <pre><code>struct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}  // \u6784\u9020\u51fd\u6570\n};\n\nclass LinkedList {\nprivate:\n    // \u5982\u679c\u9700\u8981\u529f\u80fd\u66f4\u5f3a\u5927\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u50a8\u5b58\u5176\u4ed6\u7684\u4fe1\u606f\n    // \u6bd4\u5982\u5c3e\u6307\u9488 ListNode* tail\uff0c\u94fe\u8868\u957f\u5ea6 int len\n    ListNode* head;\n\npublic:\n    LinkedList() : head(nullptr) {}     // \u6784\u9020\u51fd\u6570\n    ~LinkedList() { clear(); }          // \u6790\u6784\u51fd\u6570\n\n    // \u8fd9\u91cc\u8fdb\u884c\u51fd\u6570\u7684\u5b9e\u73b0\n\n};\n</code></pre> <p>--&gt; \u5224\u65ad\u94fe\u8868\u662f\u5426\u4e3a\u7a7a</p> <pre><code>bool empty() const {\n    return head == nullptr;\n}\n</code></pre> <p>--&gt; \u63d2\u5165\u5230 <code>index</code> \u7684\u4f4d\u7f6e\uff080-index\uff09\uff08\u4e5f\u5c31\u662f\u5728 <code>index</code> \u524d\u63d2\u5165\uff09</p> <pre><code>void insert(int index, int val) {\n    if (index == 0 || !head) {\n        // \u5934\u63d2\n        ListNode* newNode = new ListNode(val);\n        newNode-&gt;next = head;\n        head = newNode;\n        return;\n    }\n\n    // index = size \u65f6\u5373\u5c3e\u63d2\u5165\n    ListNode* cur = head;\n    for (int i = 0; i &lt; index - 1 &amp;&amp; cur-&gt;next; i++)\n        cur = cur-&gt;next;\n    ListNode* newNode = new ListNode(val);\n    newNode-&gt;next = cur-&gt;next;\n    cur-&gt;next = newNode;\n\n}\n</code></pre> <p>--&gt; \u5220\u9664 <code>index</code> \u4f4d\u7f6e\u7684\u8282\u70b9\uff080-index\uff09</p> <pre><code>void removeNode(int index) {\n    if (!head || index &lt; 0) return;\n\n    if (index == 0) {\n        // \u5220\u9664\u5934\u8282\u70b9\n        ListNode* temp = head;\n        head = head-&gt;next;\n        delete temp;\n        return;\n    }\n\n    ListNode* cur = head;\n    // \u627e\u5230\u8981\u5220\u9664\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\n    for (int i = 0; i &lt; index - 1 &amp;&amp; cur-&gt;next; i++) {\n        cur = cur-&gt;next;\n    }\n\n    // \u5982\u679c\u627e\u5230\u4e86\u6709\u6548\u8282\u70b9\u4e14\u4e0b\u4e00\u4e2a\u8282\u70b9\u5b58\u5728\n    if (cur-&gt;next) {\n        ListNode* temp = cur-&gt;next;\n        cur-&gt;next = cur-&gt;next-&gt;next;\n        delete temp;\n    }\n}\n</code></pre> <p>--&gt; \u5220\u9664\u6307\u5b9a\u503c\u7684\u8282\u70b9\uff08\u5220\u9664\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\uff09</p> <pre><code>void removeVal(int val) {\n    // \u4e0d\u590d\u7528 removeNode \u51fd\u6570\u7684\u539f\u56e0\u662f removeNode \u51fd\u6570\u9700\u8981\u91cd\u65b0\u904d\u5386\u4e00\u904d\u94fe\u8868\n    if (!head) return;\n    if (head-&gt;val == val) {\n        ListNode* temp = head;\n        head = head-&gt;next;\n        delete temp;\n        return;\n    }\n    ListNode* cur = head;\n    while (cur-&gt;next &amp;&amp; cur-&gt;next-&gt;val != val) {\n        cur = cur-&gt;next;\n    }\n    if (cur-&gt;next) {\n        ListNode* temp = cur-&gt;next;\n        cur-&gt;next = cur-&gt;next-&gt;next;\n        delete temp;\n    }\n}\n</code></pre> <p>--&gt; \u67e5\u627e\u8282\u70b9\uff08\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u8282\u70b9\u7684\u6307\u9488\uff09</p> <pre><code>ListNode* find(int val) {\n    ListNode* cur = head;\n    while (cur) {\n        if (cur-&gt;val == val)\n            return cur;\n        cur = cur-&gt;next;\n    }\n    return nullptr;\n}\n</code></pre> <p>--&gt; \u53cd\u8f6c\u94fe\u8868</p> <pre><code>void reverse() {\n    ListNode* prev = nullptr;\n    ListNode* curr = head;\n    while (curr) {\n        ListNode* next = curr-&gt;next;\n        curr-&gt;next = prev;\n        prev = curr;\n        curr = next;\n    }\n    head = prev;\n}\n</code></pre> <p>--&gt; \u6253\u5370\u94fe\u8868</p> <pre><code>void print() const {\n    ListNode* cur = head;\n    while (cur) {\n        cout &lt;&lt; cur-&gt;val;\n        if (cur-&gt;next) cout &lt;&lt; \" \";\n        cur = cur-&gt;next;\n    }\n    cout &lt;&lt; endl;\n}\n</code></pre> <p>--&gt; \u6e05\u7a7a\u94fe\u8868\uff0c\u6790\u6784\u51fd\u6570\u8c03\u7528</p> <pre><code>void clear() {\n    ListNode* cur = head;\n    while (cur) {\n        ListNode* temp = cur;\n        cur = cur-&gt;next;\n        delete temp;\n    }\n    head = nullptr;\n}\n</code></pre>"},{"location":"algorithm%26data_structure/linkedlist/#_5","title":"\u53cc\u5411\u5faa\u73af\u94fe\u8868","text":"<p>\u5355\u5411\u94fe\u8868\u7684\u64cd\u4f5c\u5177\u6709\u4e00\u5b9a\u7684\u5c40\u9650\u6027\uff0c\u6211\u4eec\u5728\u5355\u5411\u94fe\u8868\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u53cc\u5411\u6307\u9488\uff08<code>next</code> \u548c <code>prev</code>\uff09\uff0c\u5e76\u4e14\u652f\u6301\u9996\u5c3e\u8282\u70b9\u7684\u5faa\u73af\u8fde\u63a5\uff1a</p> <p>\u4ee5\u4e0b\u662f\u53cc\u5411\u5faa\u73af\u94fe\u8868\u7684\u624b\u52a8\u5b9e\u73b0\uff1a</p> <pre><code>struct ListNode {\n    int val;\n    ListNode* next;\n    ListNode* prev;\n    ListNode(int x) : val(x), next(nullptr), prev(nullptr) {}  // \u6784\u9020\u51fd\u6570\n};\n\nclass DoublyCircularLinkedList {\nprivate:\n    // \u5934\u6307\u9488\uff0c\u6307\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\n    ListNode* head;\n    // \u5c3e\u6307\u9488\uff0c\u6307\u5411\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\n    // tail \u5c31\u662f head-&gt;prev\uff0c\u5bf9\u4e8e\u975e\u5faa\u73af\u94fe\u8868\u6765\u8bf4\uff0ctail \u6307\u9488\u5f88\u6709\u7528\n    // \u51fa\u4e8e\u7edf\u4e00\u6027\u4fdd\u7559\u4f7f\u7528\n    ListNode* tail;\n    // \u94fe\u8868\u5927\u5c0f\n    int size;\n\npublic:\n    DoublyCircularLinkedList() : head(nullptr), tail(nullptr), size(0) {}  // \u6784\u9020\u51fd\u6570\n    ~DoublyCircularLinkedList() { clear(); }  // \u6790\u6784\u51fd\u6570\n\n    // \u8fd9\u91cc\u8fdb\u884c\u51fd\u6570\u7684\u5b9e\u73b0\n\n};\n</code></pre> <p>--&gt; \u5224\u65ad\u94fe\u8868\u662f\u5426\u4e3a\u7a7a</p> <pre><code>bool empty() const {\n    return head == nullptr;\n}\n</code></pre> <p>--&gt; \u63d2\u5165\u5230 <code>index</code> \u7684\u4f4d\u7f6e\uff080-index\uff09\uff08\u4e5f\u5c31\u662f\u5728 <code>index</code> \u524d\u63d2\u5165\uff09</p> <pre><code>void insert(int index, int val) {\n    // \u9632\u6b62\u8bbf\u95ee NULL \u9886\u57df\n    if (index &lt; 0) index = 0;\n    if (index &gt; size) index = size;\n\n    ListNode* newNode = new ListNode(val);\n\n    if (empty()) {\n        // \u94fe\u8868\u4e3a\u7a7a\u65f6\u7684\u63d2\u5165\u64cd\u4f5c\n        head = tail = newNode;\n        head-&gt;next = head;\n        head-&gt;prev = head;\n    }\n    else if (index == 0) {\n        // \u5934\u63d2\n        newNode-&gt;next = head;\n        newNode-&gt;prev = tail;\n        head-&gt;prev = newNode;\n        tail-&gt;next = newNode;\n        head = newNode;\n    }\n    else if (index == size) {\n        // \u5c3e\u63d2\n        // \u5982\u679c\u4e0d\u8003\u8651\u7ef4\u62a4 tail \u6307\u9488\uff0c\u53ef\u4ee5\u4e0e\u4e2d\u95f4\u63d2\u5165\u5408\u5e76\n        // \u8003\u8651\u5230\u5355\u72ec\u5b9e\u73b0\u5c3e\u63d2\u4f1a\u6709\u66f4\u597d\u7684\u6027\u80fd\uff08\u4e0d\u9700\u8981\u904d\u5386\u94fe\u8868\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u5206\u79bb\u51fa\u5c3e\u63d2\u64cd\u4f5c\n        newNode-&gt;prev = tail;\n        newNode-&gt;next = head;\n        tail-&gt;next = newNode;\n        head-&gt;prev = newNode;\n        tail = newNode;\n    }\n    else {\n        // \u4e2d\u95f4\u63d2\u5165\n        ListNode* cur = head;\n        for (int i = 0; i &lt; index; i++) {\n            cur = cur-&gt;next;\n        }\n        newNode-&gt;next = cur;\n        newNode-&gt;prev = cur-&gt;prev;\n        cur-&gt;prev-&gt;next = newNode;\n        cur-&gt;prev = newNode;\n    }\n\n    size++;\n}\n</code></pre> <p>--&gt; \u5220\u9664 <code>index</code> \u4f4d\u7f6e\u7684\u8282\u70b9\uff080-index\uff09</p> <pre><code>void removeNode(int index) {\n    if (empty() || index &lt; 0 || index &gt;= size) return;\n\n    if (index == 0) {\n        // \u5220\u9664\u5934\u8282\u70b9\n        if (head == tail) {\n            // \u5355\u8282\u70b9\u94fe\u8868\n            delete head;\n            head = tail = nullptr;\n        } else {\n            // \u66f4\u65b0\u5934\u8282\u70b9\n            ListNode* temp = head;\n            head = head-&gt;next;\n            head-&gt;prev = tail;\n            tail-&gt;next = head;\n            delete temp;\n        }\n    } else if (index == size - 1) {\n        // \u5220\u9664\u5c3e\u8282\u70b9\n        ListNode* temp = tail;\n        tail = tail-&gt;prev;\n        tail-&gt;next = head;\n        head-&gt;prev = tail;\n        delete temp;\n    } else {\n        // \u5220\u9664\u4e2d\u95f4\u8282\u70b9\n        ListNode* cur = head;\n        for (int i = 0; i &lt; index; i++) {\n            cur = cur-&gt;next;\n        }\n        // \u66f4\u65b0\u524d\u540e\u8282\u70b9\u7684\u8fde\u63a5\n        cur-&gt;prev-&gt;next = cur-&gt;next;\n        cur-&gt;next-&gt;prev = cur-&gt;prev;\n        delete cur;\n    }\n\n    size--;  // \u66f4\u65b0\u94fe\u8868\u5927\u5c0f\n}\n</code></pre> <p>--&gt; \u5220\u9664\u6307\u5b9a\u503c\u7684\u8282\u70b9\uff08\u5220\u9664\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\uff09</p> <pre><code>void removeVal(int val) {\n    if (empty()) return;\n\n    ListNode* cur = head;\n\n    // \u5355\u8282\u70b9\u5220\u9664\n    if (head == tail &amp;&amp; head-&gt;val == val) {\n        delete head;\n        head = tail = nullptr;\n        size = 0;\n        return;\n    }\n\n    // \u904d\u5386\u94fe\u8868\uff0c\u5220\u9664\u5339\u914d\u7684\u8282\u70b9\n    do {\n        if (cur-&gt;val == val) {\n            // \u5904\u7406\u5934\u8282\u70b9\n            if (cur == head) {\n                head = head-&gt;next;\n                head-&gt;prev = tail;\n                tail-&gt;next = head;\n            }\n            // \u5904\u7406\u5c3e\u8282\u70b9\n            else if (cur == tail) {\n                tail = tail-&gt;prev;\n                tail-&gt;next = head;\n                head-&gt;prev = tail;\n            }\n            // \u5904\u7406\u4e2d\u95f4\u8282\u70b9\n            else {\n                cur-&gt;prev-&gt;next = cur-&gt;next;\n                cur-&gt;next-&gt;prev = cur-&gt;prev;\n            }\n\n            delete cur;  // \u5220\u9664\u8282\u70b9\n            size--;  // \u66f4\u65b0\u94fe\u8868\u5927\u5c0f\n            return;\n        }\n        cur = cur-&gt;next;\n    } while (cur != head);  // \u5faa\u73af\u76f4\u5230\u56de\u5230\u5934\u8282\u70b9\n\n    return; // \u8868\u793a\u6ca1\u6709\u627e\u5230\u5f85\u5220\u9664\u503c\n}\n</code></pre> <p>--&gt; \u67e5\u627e\u8282\u70b9\uff08\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u8282\u70b9\u7684\u6307\u9488\uff09</p> <pre><code>ListNode* find(int val) {\n    if (empty()) return nullptr;\n\n    ListNode* cur = head;\n    do {\n        if (cur-&gt;val == val) {\n            return cur;\n        }\n        cur = cur-&gt;next;\n    } while (cur != head);\n\n    return nullptr;\n}\n</code></pre> <p>--&gt; \u53cd\u8f6c\u94fe\u8868</p> <pre><code>void reverse() {\n    if (empty() || head == tail) return;  // \u7a7a\u94fe\u8868\u6216\u5355\u8282\u70b9\u65e0\u9700\u53cd\u8f6c\n\n    ListNode* cur = head;\n    ListNode* temp = nullptr;\n\n    do {\n        // \u4ea4\u6362\u524d\u540e\u6307\u9488\n        temp = cur-&gt;next;\n        cur-&gt;next = cur-&gt;prev;\n        cur-&gt;prev = temp;\n\n        // \u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\n        cur = temp;\n    } while (cur != head);\n\n    // \u8c03\u6574\u5934\u5c3e\u6307\u9488\n    temp = head;\n    head = tail;\n    tail = temp;\n}\n</code></pre> <p>--&gt; \u6253\u5370\u94fe\u8868</p> <pre><code>void print() const {\n    if (empty()) {\n        cout &lt;&lt; endl;\n        return;\n    }\n\n    ListNode* cur = head;\n    do {\n        cout &lt;&lt; cur-&gt;val;\n        if (cur-&gt;next != head) cout &lt;&lt; \" \";\n        cur = cur-&gt;next;\n    } while (cur != head);\n\n    cout &lt;&lt; endl;\n}\n</code></pre> <p>--&gt; \u6e05\u7a7a\u94fe\u8868\uff0c\u8c03\u7528\u6790\u6784\u51fd\u6570</p> <pre><code>void clear() {\n    if (empty()) return;\n\n    ListNode* cur = head;\n    ListNode* temp = nullptr;\n\n    do {\n        temp = cur;\n        cur = cur-&gt;next;\n        delete temp;\n    } while (cur != head);\n\n    head = tail = nullptr;\n    size = 0;\n}\n</code></pre>"},{"location":"algorithm%26data_structure/linkedlist/#stl","title":"STL \u5b9e\u73b0","text":"<p><code>&lt;list&gt;</code> \u548c <code>&lt;forward_list&gt;</code> \u5206\u522b\u662f\u5bf9\u53cc\u5411\u94fe\u8868\u548c\u5355\u5411\u94fe\u8868\u7684\u6a21\u677f\u5b9e\u73b0\uff1a</p> <p>\u521d\u59cb\u5316\u53ef\u4ee5\u53c2\u8003 <code>vector</code>\uff0c\u6bd4\u5982\uff1a</p> <pre><code>list&lt;int&gt; l1;                   // \u7a7a\u94fe\u8868\nlist&lt;int&gt; l2(3, 1);             // {1\uff0c1\uff0c1}\nlist&lt;int&gt; l3 = {1, 2, 3, 4};    // \u5217\u8868\u521d\u59cb\u5316\nlist&lt;int&gt; l4(l3);               // \u62f7\u8d1d\u6784\u9020\n</code></pre> <p>\u4e0b\u9762\u662f <code>&lt;list&gt;</code> \u652f\u6301\u7684\u51fd\u6570/\u64cd\u4f5c</p> <pre><code>list.begin(); list.end()    // \u5934\u5c3e\u8282\u70b9\u8fed\u4ee3\u5668\nlist.front(); list.back()   // \u5934\u5c3e\u8282\u70b9\u503c\nlist.size()                 // \u94fe\u8868\u957f\u5ea6\uff0c\u9ad8\u7248\u672c C++ \u8981\u6c42 O(1) \u5b9e\u73b0\n\nlist.push_front(val);       // \u5934\u63d2\u5165\nlist.push_back(val);        // \u5c3e\u63d2\u5165\nlist.insert(it, val);       // \u5728 it \u8fed\u4ee3\u5668\u6307\u5411\u7684\u5143\u7d20\u4e4b\u524d\u63d2\u5165 val\n\nlist.remove(val)            // \u5220\u9664\u6240\u6709\u503c\u4e3a val \u7684\u5143\u7d20\nlist.remove_if(UnaryPred)   // \u5220\u9664\u6240\u6709\u6ee1\u8db3\u4e00\u5143\u8c13\u8bcd UnaryPred \u7684\u5143\u7d20\uff0c\u529f\u80fd\u5f3a\u5927\uff0c\u53c2\u8003 vector\nlist.pop_front();           // \u5934\u5220\u9664\nlist.pop_back();            // \u5c3e\u5220\u9664\nlist.erase(it);             // \u5220\u9664 it \u6307\u5411\u7684\u5143\u7d20\uff08\u4e5f\u53ef\u4ee5 erase(it1, it2) \u8303\u56f4\u5220\u9664\uff09\n\nlist.reverse();       // \u53cd\u8f6c\u94fe\u8868\nlist.sort();          // \u6392\u5e8f\uff08\u9ed8\u8ba4\u5347\u5e8f\uff0c\u4e0d\u80fd\u6307\u5b9a\u6392\u5e8f\u8303\u56f4\uff0c\u5141\u8bb8\u81ea\u5b9a\u4e49\u6392\u5e8f\u51fd\u6570\uff09\nlist.unique();        // \u53bb\u9664\u8fde\u7eed\u91cd\u590d\u7684\u5143\u7d20\uff08\u6bd4\u5982 1 2 2 1 \u53bb\u91cd\u4e3a 1 2 1\uff09\uff0c\u5141\u8bb8\u81ea\u5b9a\u4e49\u51fd\u6570\n\nlist.merge(other);    // \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\uff08\u5408\u5e76\u5728 list \u4e0a\uff09\uff0c\u5141\u8bb8\u81ea\u5b9a\u4e49\u6392\u5e8f\u51fd\u6570\uff1bother \u4f1a\u88ab\u6e05\u7a7a\nlist.splice(pos, other, it1, it2);  // \u62fc\u63a5\u94fe\u8868\uff0c\u540e\u4e24\u4e2a\u53c2\u6570\u53ef\u9009\uff0c\u90fd\u4e0d\u9009\u8868\u793a\u4e00\u6574\u4e2a other \u94fe\u8868\u88ab\u526a\u5207\n                                    // \u5c06 other \u94fe\u8868 [it1, it2) \u7684\u90e8\u5206\u526a\u5207\u7c98\u8d34\u5230 pos \u4e4b\u524d\u7684\u4f4d\u7f6e\n                                    // \u7531\u4e8e\u8fd9\u4e00\u64cd\u4f5c\u53ea\u6d89\u53ca\u6307\u9488\u64cd\u4f5c\uff0c\u6240\u4ee5\u4f1a\u6539\u53d8 other \u7684\u94fe\u63a5\u60c5\u51b5\n</code></pre> <p>\u5bf9\u4e8e <code>&lt;forward_list&gt;</code>\uff0c\u7531\u4e8e\u5176\u4ec5\u652f\u6301\u5355\u9879\u8fed\u4ee3\u5668\uff08<code>&lt;list&gt;</code> \u4e3a\u53cc\u5411\u8fed\u4ee3\u5668\uff09\uff0c\u56e0\u6b64\uff1a</p> <p><code>back()</code> <code>push_back()</code> <code>pop_back()</code> \u5747\u4e0d\u53ef\u7528\uff1b</p> <p><code>insert()</code> <code>erase()</code> <code>splice()</code> \u51fd\u6570\u5747\u6539\u4e3a <code>_after</code> \u7248\u672c\uff0c\u6bd4\u5982 <code>insert_after(it, val)</code> \u4e3a\u5728 <code>it</code> \u6307\u5411\u5143\u7d20\u7684\u540e\u9762\u63d2\u5165 <code>val</code>\uff08\u53cc\u5411\u94fe\u8868\u662f\u524d\u63d2\u5165\uff09\uff1b</p> <p>\u53e6\u5916 <code>size()</code> \u4e5f\u4e0d\u53ef\u7528\uff0c\u5355\u5411\u94fe\u8868\u7684 <code>size()</code> \u5b9e\u73b0\u662f O(n) \u7684\uff0c\u4e0d\u5982\u624b\u52a8\u5b9e\u73b0</p>"},{"location":"algorithm%26data_structure/linkedlist/#extras","title":"Extras","text":""},{"location":"algorithm%26data_structure/linkedlist/#_6","title":"\u54e8\u5175","text":"<p>\u6458\u81ea\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u539f\u4e66\u7b2c\u4e09\u7248 P132~P133</p> <p>\u54e8\u5175\uff08sentinel\uff09\u662f\u4e00\u4e2a\u4e0d\u5b58\u50a8\u5b9e\u9645\u4fe1\u606f\u7684\u54d1\u5bf9\u8c61\uff0c\u5176\u4f5c\u7528\u662f\u7b80\u5316\u8fb9\u754c\u6761\u4ef6\u7684\u5904\u7406\u3002</p> <p>\u6211\u4eec\u5728\u521d\u59cb\u5316\u94fe\u8868\u65f6\u4e0d\u4f7f\u7528 <code>head</code> \u6307\u9488\uff0c\u800c\u662f\u6784\u9020\u4e00\u4e2a <code>L.nil</code> \u54e8\u5175\u8282\u70b9\uff0c<code>L.nit.next</code> \u4ee3\u66ff <code>head</code> \u4f7f\u7528\uff08\u59cb\u7ec8\u6307\u5411\u8868\u5934\uff09\uff1b\u5bf9\u4e8e\u53cc\u5411\u94fe\u8868\uff0c<code>L.nit.prev</code> \u4ee3\u66ff <code>tail</code> \u4f7f\u7528\uff08\u59cb\u7ec8\u6307\u5411\u8868\u5c3e\uff09</p> <p>--&gt; \u4e5f\u5c31\u662f\u8bf4\u4e0d\u9700\u8981\u518d\u7ef4\u62a4 <code>head</code> <code>tail</code> \u4e86\uff0c\u7531\u54e8\u5175\u8282\u70b9\u8fdb\u884c\u7edf\u4e00\u7ba1\u7406</p> <p>\u54e8\u5175\u5bf9\u4e8e\u6784\u9020\u5faa\u73af\u94fe\u8868\u6709\u5f88\u5927\u7684\u4f18\u52bf\uff0c\u5faa\u73af\u95ed\u5408\u7684\u64cd\u4f5c\u53ef\u4ee5\u901a\u8fc7\u54e8\u5175\u8282\u70b9\u7684\u6307\u9488\u64cd\u4f5c\u5feb\u901f\u5b9e\u73b0</p> <p>\u66f4\u52a0\u65b9\u4fbf\u7684\u662f\uff1a\u5bf9\u4e8e\u6d89\u53ca\u5230\u8fb9\u754c\u64cd\u4f5c\u7684\u94fe\u8868\u64cd\u4f5c\uff0c<code>L.nil</code> \u672c\u8eab\u4f5c\u4e3a\u4e00\u4e2a\u5b8c\u6574\u7684\u8282\u70b9\u53ef\u4ee5\u6d88\u9664\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\uff1a\u4ee5\u53cc\u5411\u5faa\u73af\u94fe\u8868\u4e2d\u63d2\u5165\u67d0\u4e00\u7ed3\u70b9\u7684\u64cd\u4f5c\u4e3a\u4f8b</p> <pre><code>void insert(int index, int val) {\n    // \u9632\u6b62\u8bbf\u95ee NULL \u9886\u57df\n    if (index &lt; 0) index = 0;\n    if (index &gt; size) index = size;\n\n    ListNode* newNode = new ListNode(val);\n\n    if (empty()) {\n        // \u94fe\u8868\u4e3a\u7a7a\u65f6\u7684\u63d2\u5165\u64cd\u4f5c\n        head = tail = newNode;\n        head-&gt;next = head;\n        head-&gt;prev = head;\n    }\n    else if (index == 0) {\n        // \u5934\u63d2\n        newNode-&gt;next = head;\n        newNode-&gt;prev = tail;\n        head-&gt;prev = newNode;\n        tail-&gt;next = newNode;\n        head = newNode;\n    }\n    else if (index == size) {\n        // \u5c3e\u63d2\n        newNode-&gt;prev = tail;\n        newNode-&gt;next = head;\n        tail-&gt;next = newNode;\n        head-&gt;prev = newNode;\n        tail = newNode;\n    }\n    else {\n        // \u4e2d\u95f4\u63d2\u5165\n        ListNode* cur = head;\n        for (int i = 0; i &lt; index; i++) {\n            cur = cur-&gt;next;\n        }\n        newNode-&gt;next = cur;\n        newNode-&gt;prev = cur-&gt;prev;\n        cur-&gt;prev-&gt;next = newNode;\n        cur-&gt;prev = newNode;\n    }\n\n    size++;\n}\n</code></pre> <p>\u6211\u4eec\u5f15\u5165\u54e8\u5175\u540e\u4e0d\u518d\u9700\u8981\u7ef4\u62a4\u5355\u72ec\u7684 <code>head</code> <code>tail</code> \u6307\u9488\uff0c\u5e76\u4e14\u7b80\u5316\u903b\u8f91\u4e3a\uff1a</p> <pre><code>void insert(int index, int val) {\n    if (index &lt; 0) index = 0;\n    if (index &gt; size) index = size;\n\n    ListNode* newNode = new ListNode(val);\n\n    // \u627e\u5230\u63d2\u5165\u4f4d\u7f6e\u7684\u524d\u9a71\u8282\u70b9\n    ListNode* prevNode = L.nil;\n\n    for (int i = 0; i &lt; index; i++) {\n        prevNode = prevNode-&gt;next;\n    }\n\n    // \u63d2\u5165\u64cd\u4f5c\u5b8c\u5168\u7edf\u4e00\u5316\n    ListNode* nextNode = prevNode-&gt;next;\n\n    newNode-&gt;prev = prevNode;\n    newNode-&gt;next = nextNode;\n    prevNode-&gt;next = newNode;\n    nextNode-&gt;prev = newNode;\n\n    size++;\n}\n</code></pre> <p>\u4e2a\u4eba\u89d2\u5ea6\u770b\uff0c\u54e8\u5175\u7684\u4f7f\u7528\u6d88\u9664\u4e86 \u201c\u7a7a\u94fe\u8868\u201d \u7684\u7279\u6b8a\u64cd\u4f5c\uff0c\u5e76\u4e14\u7edf\u4e00\u4e86\u5934\u5c3e\u8282\u70b9\u7684\u8bbe\u7f6e\uff1b\u4f46\u662f\u54e8\u5175\u7684\u4f7f\u7528\u4f18\u5316\u4e0d\u660e\u663e\uff08\u5176\u4f5c\u7528\u503e\u5411\u4e8e\u7b80\u5316\u5b9e\u73b0\uff09\uff0c\u5e76\u4e14\u6709\u989d\u5916\u4e00\u4e2a\u8282\u70b9\u7684\u5185\u5b58\u5f00\u9500\u3002\u6240\u4ee5\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u7684\u5efa\u8bae\u662f \u201c\u614e\u7528\u54e8\u5175\uff0c\u5c24\u5176\u662f\u5b58\u5728\u5f88\u591a\u77ed\u94fe\u8868\u7684\u65f6\u5019\uff0c\u4f1a\u9020\u6210\u4e25\u91cd\u7684\u5b58\u50a8\u6d6a\u8d39\u201d</p>"},{"location":"algorithm%26data_structure/linkedlist/#_7","title":"\u5f02\u6216\u94fe\u8868","text":"<p>\u6458\u81ea \u94fe\u8868 - OI Wiki</p> <p>\u53cc\u5411\u94fe\u8868\u7684\u53e6\u4e00\u79cd\u5b9e\u73b0\u3002\u5e38\u89c4\u7684\u53cc\u5411\u94fe\u8868\u5b9e\u73b0\u9700\u8981\u7528\u5230 <code>prev</code> \u548c <code>next</code> \u4e24\u4e2a\u6307\u9488\uff0c\u800c\u5f02\u6216\u94fe\u8868\u501f\u52a9\u5f02\u6216\u8ba1\u7b97\u5b9e\u73b0\u4e86\u4e24\u4e2a\u6307\u9488\u7684\u5408\u5e76\uff1a<code>ptr = prev ^ next</code>\uff0c\u4f7f\u5f97\u53cc\u5411\u94fe\u8868\u548c\u5355\u5411\u94fe\u8868\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7684\u5185\u5b58\u5360\u7528</p> <p>\u5f02\u6216\u8ba1\u7b97\u7684\u7279\u6027\u662f\uff1a<code>a xor 0 = a</code>\uff0c<code>a xor a = 0</code>\uff0c<code>a xor b xor a = b</code>\uff0c\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff0c\u7ed3\u5408\u5f8b</p> <p>\u56e0\u6b64\u5f02\u6216\u8ba1\u7b97\u662f\u53ef\u9006\u7684\uff0c\u5e38\u89c1\u7684\u5e94\u7528\u662f\u5b9e\u73b0\u4e24\u4e2a\u6570\u5b57\u7684\u539f\u5730\u4ea4\u6362\uff1a</p> <pre><code>a=a^b;\nb=a^b;\na=a^b;\n</code></pre> <p>\u6211\u4eec\u4ee5\u53cc\u5411\u4e0d\u5faa\u73af\u94fe\u8868\u4e3a\u4f8b\uff1a</p> <pre><code>        +----------+    +----------+    +----------+\n        |  Node A  |---&gt;|  Node B  |---&gt;|  Node C  |\nhead---&gt;|          |    |          |    |          | --...-&gt;\n        |  ptr_A   |&lt;---|  ptr_B   |&lt;---|  ptr_C   |\n        +----------+    +----------+    +----------+\n</code></pre> <p>\u6784\u5efa\u94fe\u8868\u7684\u65f6\u5019\uff0c<code>ptr_A</code> \u4f5c\u4e3a\u5934\u8282\u70b9\u7684\u6307\u9488\uff0c\u50a8\u5b58 <code>Node B</code> \u7684\u5730\u5740\uff1b<code>ptr_B</code> \u50a8\u5b58\u7684\u662f <code>Node A</code> \u548c <code>Node C</code> \u7684\u5730\u5740\u7684\u5f02\u6216\u503c\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u5c3e\u8282\u70b9 <code>ptr_last</code> \u5b58\u50a8\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u5730\u5740\u503c</p> <p>\u6b63\u5411\u904d\u5386\u94fe\u8868\u7684\u65f6\u5019\uff0c<code>cur</code> \u6307\u9488\u4ece <code>head</code> \u51fa\u53d1\uff0c\u5148\u8bb0\u5f55 <code>Node A</code> \u7684\u5730\u5740\uff0c\u901a\u8fc7 <code>ptr_A</code> \u5230\u8fbe <code>Node B</code>\uff0c\u7136\u540e\u5c06 <code>ptr_B</code> \u4e0e <code>Node A</code> \u7684\u5730\u5740\u8fdb\u884c\u5f02\u6216\u8ba1\u7b97\uff0c\u5f97\u5230 <code>Node C</code> \u7684\u5730\u5740\u5e76\u4e14\u5230\u8fbe <code>Node C</code>\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230 <code>ptr_last</code> \u6307\u5411\u7684\u5730\u5740\u6070\u597d\u4e3a\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u7684\u5730\u5740\uff0c\u8868\u793a\u5230\u8fbe\u4e86\u5c3e\u8282\u70b9\uff0c\u904d\u5386\u7ed3\u675f</p> <p>\u5982\u679c\u6709 <code>tail</code> \u6307\u9488\uff0c\u540c\u7406\u53ef\u4ee5\u5b9e\u73b0\u53cd\u5411\u904d\u5386\u94fe\u8868</p> <p>\uff08\u5934\u5c3e\u8282\u70b9\u7684 <code>ptr</code> \u4e0d\u5b58\u50a8\u5f02\u6216\u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f5c\u4e3a\u904d\u5386\u5f00\u59cb/\u7ec8\u6b62\u7684\u6807\u8bc6\uff09</p>"},{"location":"algorithm%26data_structure/stack/","title":"\u6808 &amp;&amp; \u5355\u8c03\u6808","text":"<p>\u6808\u662f\u6ee1\u8db3\u540e\u8fdb\u5148\u51fa\u7684\u7ebf\u6027\u6570\u636e\u7ed3\u6784\uff0c\u5373 LIFO \u8868</p>"},{"location":"algorithm%26data_structure/stack/#_2","title":"\u7b80\u6613\u7684\u6570\u7ec4\u6808","text":"<pre><code>#define MAX_SIZE 10000\n\n// \u663e\u5f0f\u4f7f\u7528\u6808\u9876\u6307\u9488\u7684\u5199\u6cd5\n// \u521d\u59cb\u5316\nint st[MAX_LEN];\nint top = -1;       // top = -1 \u8868\u793a\u4e3a\u7a7a\u6808\n// \u538b\u6808\nst[++top] = val;    // cin &gt;&gt; st[++top];\n// \u5f39\u6808\nif(top &gt;= 0) --top;\n// \u68c0\u6d4b\u662f\u5426\u7a7a\u6808\nbool empty = (top &lt; 0);\n// \u53d6\u6808\u9876\u5143\u7d20\nint top_val = st[top];\n// \u6e05\u7a7a\u6808\ntop = -1;\n\n// \u9690\u5f0f\u4f7f\u7528\u6808\u9876\u6307\u9488\u7684\u5199\u6cd5\n// \u521d\u59cb\u5316\uff0c\u8fd9\u91cc\u4f7f\u7528 st[0] (\u5373 *st) \u4ee3\u8868\u6808\u4e2d\u5143\u7d20\u6570\u91cf\uff0c\u540c\u65f6\u4e5f\u662f\u6808\u9876\u4e0b\u6807\n// \u4e5f\u5c31\u662f\u8bf4 st[0] = top\uff0c\u6808\u4e3a 1-index\uff0c*st = 0 \u8868\u793a\u4e3a\u7a7a\u6808\nint st[MAX_LEN];\n// \u538b\u6808\nst[++*st] = var1;\n// \u5f39\u6808 \nif (*st) --*st;\n// \u68c0\u6d4b\u662f\u5426\u7a7a\u6808\nbool empty = (*st &lt;= 0);\n// \u53d6\u6808\u9876\u5143\u7d20\nint top_val = st[*st];\n// \u6e05\u7a7a\u6808\n*st = 0;\n</code></pre>"},{"location":"algorithm%26data_structure/stack/#_3","title":"\u7b80\u6613\u7684\u5c01\u88c5\u6808","text":"<p>\u7701\u53bb\u4e86\u6808\u6ea2\u51fa\u7684\u68c0\u6d4b\uff0c\u6ca1\u6709\u4f7f\u7528\u52a8\u6001\u5927\u5c0f\u6808</p> <pre><code>#define MAX_SIZE 10000\n\nclass Stack {\nprivate:\n    int data[MAX_SIZE];\n    int top;\n\npublic:\n    // \u6784\u9020\u51fd\u6570 &amp;&amp; \u6790\u6784\u51fd\u6570\n    Stack() { top = -1; }\n    ~Stack(){};\n\n    // \u538b\u6808\n    void push(int value) {\n        data[++top] = value;\n    }\n\n    // \u5f39\u6808\n    void pop() {\n        if (!empty())\n            --top;\n    }\n\n    // \u68c0\u6d4b\u662f\u5426\u7a7a\u6808\n    bool empty() {\n        return top == -1;\n    }\n\n    // \u53d6\u6808\u9876\u5143\u7d20\uff08\u5f15\u7528\uff09\n    int&amp; top() {\n        if (!empty())\n            return data[top];\n    }\n\n    // \u6e05\u7a7a\u6808\n    void clear() {\n        top = -1;\n    }\n\n    // \u83b7\u53d6\u6808\u5927\u5c0f\n    int size() {\n        return top+1;\n    }\n};\n</code></pre>"},{"location":"algorithm%26data_structure/stack/#stl-stack","title":"STL <code>&lt;stack&gt;</code> \u5e93","text":"<p>\u652f\u6301\u7684\u51fd\u6570/\u64cd\u4f5c\u6709\uff1a</p> <pre><code>// \u5177\u4f53\u542b\u4e49\u53c2\u7167\u5c01\u88c5\u5b9e\u73b0\nst.push(val);\nst.pop();\nst.empty();\nst.top();\n// \u6ca1\u6709 clear \u64cd\u4f5c\nst.size();\n\nst1 = st2 // \u62f7\u8d1d\u64cd\u4f5c\nstack&lt;int&gt; st2 (st1); // \u62f7\u8d1d\u521d\u59cb\u5316\n</code></pre>"},{"location":"algorithm%26data_structure/stack/#_4","title":"\u5355\u8c03\u6808","text":"<p>\u5355\u8c03\u6808\u7684\u7279\u6027\u5728\u4e8e\uff0c\u5728\u63d2\u5165\u65b0\u7684\u5143\u7d20\u524d\uff0c\u53ef\u80fd\u9700\u8981\u5f39\u51fa\u90e8\u5206\u5143\u7d20\u4ee5\u6ee1\u8db3\u6808\u5143\u7d20\u7684\u5355\u8c03\u6027\uff1a</p> <p>\u6bd4\u5982\u5355\u8c03\u9012\u589e\u6808 <code>[1 2 3 4 5] &lt;-top</code> \u5728\u63d2\u5165\u5143\u7d20 <code>3</code> \u65f6\uff0c\u9700\u8981\u5148\u5f39\u51fa <code>4</code> <code>5</code> \u518d\u63d2\u5165 <code>3</code>\uff0c\u786e\u4fdd\u63d2\u5165\u540e\u6808\u6ee1\u8db3\u5355\u8c03\u6027 <code>[1 2 3 3] &lt;-top</code></p> <p>\u4ee5\u4e0b\u662f\u5b9e\u73b0\uff1a</p> <pre><code>vector&lt;int&gt; nums = {...};\nstack&lt;int&gt; st;\nfor (int i = 0; i &lt; n; i++) {\n    while (!st.empty() &amp;&amp; nums[i] &gt; st.top()) {\n        // int val = st.top()\n        st.pop();\n    }\n    st.push(nums[i]);\n}\n</code></pre> <p>\u5728\u5b9e\u9645\u8fd0\u7528\u4e2d\uff0c\u6211\u4eec\u6709\u65f6\u4e0d\u4f1a\u5c06\u6570\u503c\u5b58\u5165\u5355\u8c03\u6808\uff0c\u800c\u662f\u5c06\u4e0b\u6807\u5b58\u5165\u5355\u8c03\u6808\uff08\u5728\u5355\u8c03\u6027\u6bd4\u8f83\u65f6\u4f1a\u6bd4\u8f83\u6570\u503c\uff09\uff0c\u56e0\u4e3a\u4e0b\u6807\u8bb0\u5f55\u4e86\u6570\u7ec4\u6808\u4e2d\u6bcf\u4e2a\u503c\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e00\u989d\u5916\u4fe1\u606f\u5728\u67d0\u4e9b\u9898\u76ee\u4e2d\u975e\u5e38\u91cd\u8981</p> <p></p> <p>\u8fd9\u91cc\u4e3e\u4e09\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u5176\u4e2d\u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\u5e76\u4e0d\u662f\u5178\u578b\u7684\u5355\u8c03\u6808\uff0c\u4f46\u662f\u5177\u6709\u5355\u8c03\u6808\u7684\u601d\u60f3\uff1a</p> <p>Luogu P5788 \u3010\u6a21\u677f\u3011\u5355\u8c03\u6808</p> <p>\u7ed9\u51fa\u9879\u6570\u4e3a $n$ \u7684\u6574\u6570\u6570\u5217 $a_{1 \\dots n}$\u3002</p> <p>\u5b9a\u4e49\u51fd\u6570 $f(i)$ \u4ee3\u8868\u6570\u5217\u4e2d\u7b2c $i$ \u4e2a\u5143\u7d20\u4e4b\u540e\u7b2c\u4e00\u4e2a\u5927\u4e8e $a_i$ \u7684\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u5373 $f(i) = \\min _{i &lt; j \\leq n, a_j &gt; a_i} { j }$\u3002\u82e5\u4e0d\u5b58\u5728\uff0c\u5219 $f(i)=0$\u3002</p> <p>\u8bd5\u6c42\u51fa $f(1\\dots n)$\u3002</p> <p>\u8fd9\u4e2a\u4f8b\u5b50\u662f\u5355\u8c03\u6808\u6a21\u677f</p> <pre><code>void solve() {\n    int n; cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1);  // 1-index\n    vector&lt;int&gt; f(n + 1, 0);\n    stack&lt;int&gt; st;  // \u5355\u8c03\u6808\uff0c\u9898\u76ee\u5df2\u7ecf\u975e\u5e38\u660e\u786e\u4e3a\u5b58\u50a8\u4e0b\u6807\n\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i];\n\n    for (int i = 1; i &lt;= n; i++) {\n        // \u5f53 \u5f53\u524d\u5143\u7d20 \u5927\u4e8e \u6808\u9876\u5143\u7d20 \u65f6\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u6808\u9876\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20\n        while (!st.empty() &amp;&amp; a[i] &gt; a[st.top()]) {\n            f[st.top()] = i;  // \u8bb0\u5f55\u7ed3\u679c\n            st.pop();\n        }\n        st.push(i);  // \u5c06\u5f53\u524d\u4e0b\u6807\u5165\u6808\n    }\n\n    // \u6808\u4e2d\u5269\u4f59\u7684\u5143\u7d20\u90fd\u6ca1\u6709\u53f3\u8fb9\u66f4\u5927\u7684\u5143\u7d20\uff0cf[i] \u4fdd\u6301\u4e3a 0\n    // \u4e0d\u9700\u8981\u6e05\u6808\u64cd\u4f5c\n    for (int i = 1; i &lt;= n; i++) cout &lt;&lt; f[i] &lt;&lt; \" \";\n}\n</code></pre> <p></p> <p>LeetCode 84. \u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62</p> <p>\u7ed9\u5b9a n \u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u7528\u6765\u8868\u793a\u67f1\u72b6\u56fe\u4e2d\u5404\u4e2a\u67f1\u5b50\u7684\u9ad8\u5ea6\u3002\u6bcf\u4e2a\u67f1\u5b50\u5f7c\u6b64\u76f8\u90bb\uff0c\u4e14\u5bbd\u5ea6\u4e3a 1 \u3002</p> <p>\u6c42\u5728\u8be5\u67f1\u72b6\u56fe\u4e2d\uff0c\u80fd\u591f\u52fe\u52d2\u51fa\u6765\u7684\u77e9\u5f62\u7684\u6700\u5927\u9762\u79ef\u3002</p> <p>\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7531\u4e8e\u6211\u4eec\u4e0d\u80fd\u4fdd\u8bc1\u4e00\u8f6e\u626b\u63cf\u540e\u6808\u80fd\u591f\u88ab\u6e05\u7a7a\uff0c\u9700\u8981\u4e3a\u5355\u8c03\u6808\u6784\u9020\u7ed3\u675f\u6807\u8bc6\u7b26 / \u5bf9\u9057\u7559\u5728\u6808\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u6e05\u7406</p> <pre><code>class Solution {\npublic:\n    int largestRectangleArea(vector&lt;int&gt;&amp; heights) {\n        // \u4e00\u4e2a\u77e9\u5f62\u7684\u786e\u5b9a\u65b9\u5f0f\u662f\uff1a\u9009\u5b9a\u4e00\u4e2a\u67f1\u5b50\u4f5c\u4e3a\u56fa\u5b9a\u9ad8\u5ea6\uff0c\u5c1d\u8bd5\u5411\u4e24\u8fb9\u5ef6\u4f38\u5bbd\u5ea6\uff0c\u5bbd\u4e58\u9ad8\u5f97\u5230\u9762\u79ef\n        // \u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u7531\u9ad8\u5ea6\u503c\u51b3\u5b9a\u7684\u5355\u8c03\u9012\u589e\u6808\uff0c\u6808\u672c\u8eab\u5b58\u50a8\u4e0b\u6807\u503c\uff1a\n        // \u5bf9\u4e8e\u6808\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e0b\u6807\u503c\uff0c\u5176\u5de6\u4fa7\u7684\u503c\u5c31\u662f \u201c\u5de6\u8fb9\u754c\u4e0b\u6807 l\u201d\n        // \u5f53\u4e00\u4e2a\u4e0b\u6807\u88ab\u5f39\u51fa\u65f6\uff0c\u4f7f\u5b83\u88ab\u5f39\u51fa\u7684\u4e0b\u6807\u5c31\u662f \u201c\u53f3\u8fb9\u754c\u4e0b\u6807 r\u201d\n        // \u5bf9\u6bcf\u4e00\u4e2a\u9ad8\u4e3a h \u7684\u67f1\u5b50\uff0c\u5176\u5411\u4e24\u8fb9\u5ef6\u4f38\u7684\u6700\u5927\u5bbd\u5ea6\u4e3a (r-l-1)\n        // \uff08\u4e3a\u4e86\u786e\u4fdd\u6bcf\u6839\u67f1\u5b50\u90fd\u88ab\u5f39\u51fa\uff0c\u6700\u540e\u9762\u8981\u52a0\u4e00\u4e2a\u9ad8\u5ea6\u4e3a 0 \u7684\u67f1\u5b50\u4f5c\u4e3a\u7ed3\u675f\u6807\u8bc6\u7b26\n        // \u6216\u8005\u5728\u4e00\u8f6e\u626b\u63cf\u7ed3\u675f\u540e\u52a0\u4e0a\u989d\u5916\u7684\u6e05\u7a7a\u6808\u64cd\u4f5c\uff09\n        int ans = 0;\n        heights.push_back(0);\n        stack&lt;int&gt; st; st.push(0);\n        for(int i = 1; i &lt; heights.size(); i++){\n            while (!st.empty() &amp;&amp; heights[i] &lt; heights[st.top()]){\n                int h = heights[st.top()];\n                st.pop();\n                // \u6ce8\u610f\u7a7a\u6808\u7684\u7279\u6b8a\u5904\u7406\n                int width = i - (st.empty() ? -1 : st.top()) - 1;\n                ans = max(ans, h * width);\n            }\n            st.push(i);\n        }\n\n        // \u5982\u679c\u4e0d\u52a0\u4e0a\u9ad8\u5ea6\u4e3a 0 \u7684\u67f1\u5b50\n        // while (!st.empty()) {\n        //     int h = heights[st.top()];\n        //     st.pop();\n        //     int width = heights.size() - (st.empty() ? 0 : st.top() + 1);\n        //     ans = max(ans, h * width);\n        // }\n\n        return ans;\n    }\n};\n</code></pre> <p></p> <p>Luogu P1175 \u8868\u8fbe\u5f0f\u7684\u8f6c\u6362</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b <code>0123456789+-*/^()</code> \u7684\u4e2d\u7f00\u8868\u8fbe\u5f0f\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u540e\u7f00\u8868\u8fbe\u5f0f\u540e\u8f93\u51fa\uff0c\u5e76\u4e14\u8fdb\u4e00\u6b65\u8f93\u51fa\u8ba1\u7b97\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u8fc7\u7a0b\uff0c\u8981\u6c42\u8f93\u51fa\u7684\u6bcf\u4e00\u4e2a\u6570\u636e\u95f4\u90fd\u7559\u4e00\u4e2a\u7a7a\u683c\u3002</p> <p>\u89c4\u5b9a <code>/</code> \u4e3a\u6574\u9664\uff0c\u4e58\u65b9\u8ba1\u7b97 <code>^</code> \u4e3a\u53f3\u7ed3\u5408\u8fd0\u7b97\u4e14\u5e42\u6b21\u4e0d\u4e3a\u8d1f\uff0c\u8868\u8fbe\u5f0f\u4e2d\u7684\u6570\u5b57\u90fd\u662f\u4e00\u4f4d\u6570\uff0c\u4e0d\u51fa\u73b0 <code>2*-3</code> \u7684\u5f62\u5f0f</p> <p>\u6bd4\u5982\uff1a<code>8-(3+2*6)/5+4</code> \u8fd9\u4e2a\u8f93\u5165\u7684\u6b63\u786e\u8f93\u51fa\u4e3a\uff1a</p> <pre><code>8 3 2 6 * + 5 / - 4 + \n8 3 12 + 5 / - 4 + \n8 15 5 / - 4 + \n8 3 - 4 + \n5 4 + \n9\n</code></pre> <p>\u8fd9\u9053\u9898\u5206\u4e3a\u4e24\u6b65\uff1a</p> <ol> <li>\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u540e\u7f00\u8868\u8fbe\u5f0f\uff08\u2b50\uff09</li> <li>\u540e\u7f00\u8868\u8fbe\u5f0f\u8ba1\u7b97</li> </ol> <p>\u5bf9\u4e8e\u7b2c\u4e00\u6b65\u8f6c\u6362\uff0c\u6211\u4eec\u51c6\u5907\u4e00\u4e2a\u5b58\u8fd0\u7b97\u7b26\u7684 <code>stack</code> \u548c\u4e00\u4e2a\u5b58\u540e\u7f00\u8868\u8fbe\u5f0f\u7684 <code>vector</code> \uff0c\u5f53\u9047\u5230\u6570\u5b57\u7684\u65f6\u5019\u76f4\u63a5\u5c06\u6570\u5b57\u5b58\u5165 <code>vector</code>\uff0c\u5426\u5219\u5c06\u7b26\u53f7\u63d2\u5165 <code>stack</code> </p> <p>\u5728\u7b26\u53f7\u5165\u6808\u65f6\uff0c\u4e3a\u4e86\u6ee1\u8db3\u8fd0\u7b97\u987a\u5e8f\uff0c\u6211\u4eec\u8981\u4e3a\u6bcf\u79cd\u8fd0\u7b97\u5b9a\u4e49\u4f18\u5148\u7ea7\uff0c\u5e38\u89c4\u7b26\u53f7\u5165\u6808\u65f6\uff08\u62ec\u53f7\u5c5e\u4e8e\u7279\u6b8a\u8fd0\u7b97\uff09\uff0c\u7ed3\u5408\u5355\u8c03\u6808\u7684\u601d\u60f3\uff0c\u7ef4\u62a4\u4e00\u4e2a\u4f18\u5148\u7ea7\u4e0d\u4e25\u683c\u5355\u8c03\u9012\u51cf\u7684\u6808\uff1a</p> <p>\u6ce8\u610f\u6240\u6709\u7684\u5143\u7d20\u90fd\u5165\u6808\u4e4b\u540e\uff0c\u9700\u8981\u50cf\u4e0a\u4e00\u9898\u4e00\u6837\uff0c\u4f7f\u7528\u53f3\u62ec\u53f7\u6e05\u7a7a\u6808\uff0c\u6216\u8005\u52a0\u4e0a\u6e05\u7a7a\u6808\u7684\u51fd\u6570</p> <pre><code>// \u4f18\u5148\u7ea7\u5b9a\u4e49\nint pr(char op) {\n    switch (op) {\n        case '+':\n        case '-': return 1;\n        case '*':\n        case '/': return 2;\n        case '^': return 3;\n        default: return -1;\n    }\n}\n\n// \u8fd9\u91cc\u662f\u63d2\u5165\u975e\u62ec\u53f7\u8fd0\u7b97\u7b26\u7684\u903b\u8f91\uff0c\u5f88\u7b26\u5408\u5355\u8c03\u6808\u7684\u6a21\u5f0f\nif (isOperator(c)) {\n    while (!st.empty() &amp;&amp; isOperator(st.top())) {\n        char top = st.top();\n        // \u82e5\u6808\u9876\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5f53\u524d\u8fd0\u7b97\u7b26\n        // \u6216\u540c\u7ea7\u4f46\u5de6\u7ed3\u5408\uff0c\u5219\u5148\u8f93\u51fa\uff08\u6ce8\u610f\u5de6\u53f3\u7ed3\u5408\u7b26\u53f7\u5728\u6b64\u5904\u7684\u903b\u8f91\u4e0d\u540c\uff09\n        if ((pr(top) &gt; pr(c)) || (pr(top) == pr(c) &amp;&amp; !isRight(c))) {\n            output.push_back(top);  // \u5f39\u51fa\u6808\u9876\u7b26\u53f7\uff0c\u5b58\u5165\u7b54\u6848\u6570\u7ec4\n            st.pop();\n        } else break;\n    }\n    st.push(c);\n}\n</code></pre> <p>\u5b8c\u6574\u7684 sol \u4e0d\u653e\u51fa\u4e86\uff0c\u53e6\u5916\u5bf9\u4e8e\u7b2c\u4e8c\u95ee\uff0c\u7ef4\u62a4\u4e00\u4e2a\u6570\u5b57\u6808\u548c\u4e00\u4e2a\u7b26\u53f7\u6808\uff0c\u6bcf\u6b21\u5f39\u51fa\u4e24\u4e2a\u6570\u5b57\u4e00\u4e2a\u7b26\u53f7\u8ba1\u7b97\u540e\u63d2\u5165\u6570\u5b57\u6808\uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c\u8f93\u51fa\u4e00\u6b21\u7ed3\u679c\uff0c\u76f4\u5230\u6700\u7ec8\u6570\u5b57\u6808\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u7b26\u53f7\u6808\u6e05\u7a7a</p>"},{"location":"algorithm%26data_structure/vector/","title":"<code>&lt;vector&gt;</code> reference","text":"<p>\u4e00\u4e2a <code>vector</code> \u7684 reference</p> <p>\u521d\u59cb\u5316\u65b9\u6cd5</p> <pre><code>vector&lt;int&gt; vec;                            // \u5b9a\u4e49\u5b58\u50a8 int \u7c7b\u578b\u6570\u636e\u7684\u5411\u91cf\nvector&lt;int&gt; vec(len, x);                    // \u5b9a\u4e49\u957f\u5ea6\u4e3a len \uff0c\u6bcf\u4e2a\u5143\u7d20\u5168\u90e8\u521d\u59cb\u5316\u4e3a x\nvector&lt;int&gt; vec = {1,2,3};                  // \u5b57\u9762\u91cf\u521d\u59cb\u5316\nvector&lt;int&gt; vec(v1);                        // \u5c06 v1 \u590d\u5236\u7ed9 vec\nvector&lt;int&gt; vec(v1.begin(), v1.begin() + k);// \u5c06 v[0] ~ v[k] \u521d\u59cb\u5316\u8d4b\u503c\u7ed9vec\n</code></pre> <p>\u5185\u7f6e\u51fd\u6570</p> <pre><code>vec.push_back(VALUE);                       // \u5c3e\u63d2\u503c VALUE\nvec.pop_back();                             // \u5220\u9664\u5c3e\u7aef\u5143\u7d20\nvec.clear();                                // \u6e05\u7a7avec\nvec.erase(it);                              // \u5220\u9664it\u6307\u5411\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u503c\u662f\u88ab\u79fb\u9664\u5143\u7d20\u7684\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\nvec.erase(it1, it2);                        // \u5220\u9664[it1, it2)\u4e4b\u95f4\u7684\u5143\u7d20\uff08\u5de6\u95ed\u53f3\u5f00\uff09\uff0c\u8fd4\u56de\u503c\u662f\u88ab\u79fb\u9664\u8303\u56f4\u4e4b\u540e\u5143\u7d20\u7684\u8fed\u4ee3\u5668\nvec.insert(it, VALUE);                      // \u5728it\u6307\u5411\u7684\u5143\u7d20\u4e4b\u524d\u63d2\u5165VALUE\uff0c\u8fd4\u56de\u503c\u662f\u88ab\u63d2\u5165\u5143\u7d20\u7684\u8fed\u4ee3\u5668\nvec.insert(it, n, VALUE);                   // \u5728it\u6307\u5411\u7684\u5143\u7d20\u4e4b\u524d\u63d2\u5165n\u4e2aVALUE\uff0c\u8fd4\u56de\u503c\u662f\u88ab\u63d2\u5165\u7684\u9996\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\nvec.insert(it, it1, it2);                   // \u5728it\u6307\u5411\u7684\u5143\u7d20\u4e4b\u524d\u63d2\u5165[it1, it2)\u5bf9\u5e94\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u503c\u540c\u4e0a\n\nvec.size();                                 // \u8fd4\u56devec\u957f\u5ea6\uff08int\uff09\nvec.empty();                                // \u8fd4\u56devec\u662f\u5426\u4e3a\u7a7a\uff08bool\uff09\n\nvec.front();                                // \u8fd4\u56devec\u9996\u5143\u7d20\nvec.begin();                                // \u8fd4\u56devec\u9996\u5143\u7d20\u7684\u8fed\u4ee3\u5668\nvec.back();                                 // \u8fd4\u56devec\u5c3e\u5143\u7d20\nvec.end();                                  // \u8fd4\u56devec\u5c3e\u5143\u7d20\u7684\u8fed\u4ee3\u5668\n</code></pre>"}]}