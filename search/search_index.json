{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"index","text":"<p>Some notes.</p>"},{"location":"algorithm%26data_structure/C%2B%2B%20OOP/","title":"C++ \u9762\u5411\u5bf9\u8c61 intro","text":""},{"location":"algorithm%26data_structure/C%2B%2B%20OOP/#chapter-1","title":"Chapter 1 \u5c01\u88c5","text":"<p>\u5728 C \u8bed\u8a00\u4e2d\u6784\u9020\u6570\u636e\u7ed3\u6784\u901a\u5e38\u4f7f\u7528 \u201c\u7ed3\u6784\u4f53\u5b58\u50a8 + \u51fd\u6570\u64cd\u4f5c\u201d \u7684\u65b9\u6848\uff0c\u6bd4\u5982\uff1a</p> <p>\u63a5\u4e0b\u6765\u7684\u94fe\u8868\u5b9e\u73b0\u90fd\u53ea\u6d89\u53ca\u8282\u70b9\u7684\u5b9e\u73b0\uff0c\u5e76\u6ca1\u6709\u5b9e\u73b0\u5177\u4f53\u7684\u94fe\u8868\u7c7b\u8fdb\u884c\u7ba1\u7406</p> <pre><code>// \u4e00\u4e2a\u7b80\u6613\u7684\u5355\u5411\u94fe\u8868\u8282\u70b9\u7ed3\u6784\nstruct ListNode {\n    int val;\n    struct ListNode* next;\n};\n\n// \u4ee5\u53ca\u5bf9\u5e94\u7684\u64cd\u4f5c\u51fd\u6570\nvoid listInit(struct ListNode** head);\nvoid listAppend(struct ListNode** head, int value);\n// \u5176\u4ed6\u51fd\u6570...\n</code></pre> <p>\u95ee\u9898\u662f\uff0c\u5728\u8fd9\u79cd\u6784\u9020\u60c5\u51b5\u4e0b\uff0c\u6211\u53ef\u4ee5\u4e0d\u52a0\u7ea6\u675f\u5730\u8bbf\u95ee\u6570\u636e\u7ed3\u6784\u7684\u5185\u5bb9\uff0c\u8fd9\u5728\u6709\u7684\u65f6\u5019\u975e\u5e38\u4e0d\u5b89\u5168\uff1b\u53e6\u5916\uff0c\u6570\u636e\u672c\u8eab\u548c\u6570\u636e\u64cd\u4f5c\u884c\u4e3a\u5e76\u6ca1\u6709\u88ab\u5f88\u597d\u5730\u6346\u7ed1\u5728\u4e00\u8d77\uff0c\u8fd9\u4f7f\u5f97\u4fee\u6539\u6570\u636e\u7684\u884c\u4e3a\u4e0d\u662f\u5f88\u76f4\u89c2\uff1a</p> <pre><code>struct ListNode* node = createNode(10);\nnode-&gt;val = 114;        // exposed\nnode-&gt;next = nullptr;   // \u76f4\u63a5\u5bf9\u6570\u636e\u64cd\u4f5c\n</code></pre> <p>\u4ee5\u9632\u81ea\u5df1\u5fd8\u8bb0\uff1a<code>pointer-&gt;member == (*pointer).member</code> \uff0c\u8fd9\u91cc\u548c\u63a5\u4e0b\u6765\u7684 <code>node</code> \u90fd\u662f\u6307\u9488</p> <p>\u4e8e\u662f\u6709\u4e86\u5c01\u88c5\u3002</p> <p>\u4e0b\u9762\u662f\u5c01\u88c5\u540e\u7684 C++ Ver. \u94fe\u8868\u793a\u4f8b\uff0c\u4e0d\u96be\u53d1\u73b0 \u201c\u7ed3\u6784\u4f53+\u51fd\u6570\u201d \u73b0\u5728\u88ab\u6574\u5408\u5230\u4e86\u4e00\u4e2a \u201cClass\u201d\uff0c\u4e5f\u5c31\u662f\u7c7b\u4e2d\uff1a</p> <pre><code>class ListNode {\nprivate:    // \u79c1\u6709\u6210\u5458\uff0c\u53ea\u80fd\u7531\u672c\u7c7b\u5185\u90e8\u8bbf\u95ee\n    int val;\n    ListNode* next;\n\nprotected:  // \u53d7\u9650\u5236\u6210\u5458\uff0c\u53ef\u4ee5\u88ab\u672c\u7c7b &amp;&amp; \u5b50\u7c7b\u8bbf\u95ee\n\npublic:     // \u516c\u5171\u6210\u5458\uff0c\u53ef\u4efb\u610f\u8bbf\u95ee\n    ListNode(int val) : val(val), next(nullptr) {}      // \u6784\u9020\u51fd\u6570\uff0c\u82b1\u62ec\u53f7\u91cc\u53ef\u4ee5\u5199\u5176\u4ed6\u51fd\u6570\uff0c\u6bd4\u5982 cout &lt;&lt; \"created!\";\n    ~ListNode() {}      // \u6790\u6784\u51fd\u6570\n    // \u5177\u4f53\u7684\u51fd\u6570\u5b9e\u73b0\n    int getData() const { return val; }                 // \u53d6\u503c\u51fd\u6570\n    void setNext(ListNode* node) { next = node; }       // \u8fde\u63a5\u51fd\u6570\n    // \u5176\u4ed6\u51fd\u6570...\n};\n</code></pre> <p>\u8fd9\u91cc\u989d\u5916\u63d0\u4e00\u4e0b\u6784\u9020\u51fd\u6570\u4e0e\u6790\u6784\u51fd\u6570\uff1a</p> <ul> <li>\u6784\u9020\u51fd\u6570\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 ListNode\uff0c\u53ef\u4ee5\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u6bd4\u5982\uff1a</li> </ul> <pre><code>// ListNode(int val) : val(val), next(nullptr) {}\nListNode* node = new ListNode(114);\n</code></pre> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u4e2a ListNode \u8282\u70b9\u7684 <code>val</code> \u503c\u88ab\u6210\u529f\u521d\u59cb\u5316\u4e3a <code>114</code>\uff0c<code>next</code> \u6307\u9488\u6307\u5411 <code>nullptr</code></p> <ul> <li>\u6790\u6784\u51fd\u6570\u5728\u5bf9\u8c61\u88ab\u9500\u6bc1\u65f6\u81ea\u52a8\u8c03\u7528\uff0c\u7528\u4e8e\u6e05\u7406\u8fd9\u4e2a\u5bf9\u8c61\u5728\u751f\u547d\u5468\u671f\u5185\u5229\u7528\u8fc7\u7684\u8d44\u6e90</li> </ul> <p><code>~ListNode() {}</code> \u82b1\u62ec\u53f7\u4e2d\u7684\u5185\u5bb9\u53d6\u51b3\u4e8e\u5bf9\u8c61\u5728\u751f\u547d\u5468\u671f\u5185\u6709\u6ca1\u6709\u8fdb\u884c\u65b0\u7684\u5185\u5b58\u52a8\u6001\u5206\u914d\uff08\u4e5f\u5305\u62ec\u6587\u4ef6\u8bfb\uff09\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u975e\u7a7a\u6790\u6784\u51fd\u6570\u7684\u4f8b\u5b50\uff1a</p> <pre><code>class ListNode {\nprivate:\n    int* data;        // \u548c\u524d\u9762\u7684\u5b9e\u73b0\u4e0d\u76f8\u540c\uff0c\u8fd9\u91cc\u7684 data \u91c7\u7528\u4e86\u4e0e val \u4e0d\u4e00\u6837\u7684\u5b58\u50a8\u65b9\u5f0f\uff0c\u6307\u9488\u6307\u5411\u5806\u5185\u5b58\n    ListNode* next;\npublic:\n    ListNode(int data) : data(new int(data)), next(nullptr) {}    // \u6784\u9020\u51fd\u6570\u65f6\u4e3a\u52a8\u6001\u5206\u914d\u5185\u5b58\n    ~Node() { delete data; }                                  // \u6790\u6784\u51fd\u6570\u4e2d\u4e5f\u8981\u91ca\u653e\u5bf9\u5e94\u7684\u5185\u5b58\n\n    // \u989d\u5916\u7684\u63d0\u9192\uff1a\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5982\u679c\u60f3\u62f7\u8d1d\u6570\u636e\uff0c\u5fc5\u987b\u4f7f\u7528\u6df1\u62f7\u8d1d\uff0c\u5426\u5219\u4f7f\u7528\u6d45\u62f7\u8d1d\u4f1a\u5bfc\u81f4\u591a\u4e2a\u6307\u9488\u6307\u5411\u540c\u4e00\u5757\u6570\u636e\u7684\u95ee\u9898\n};\n</code></pre> <p>\u5bf9\u4e8e\u73b0\u4ee3 C++\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u667a\u80fd\u6307\u9488\uff0c\u6b64\u65f6\u4e0d\u9700\u8981\u5199\u6790\u6784\u51fd\u6570</p> <p>\u5c01\u88c5\u5904\u7406\u540e\u7684\u6570\u636e\u7ed3\u6784\u5728\u8bbf\u95ee\u6570\u636e\uff0c\u6570\u636e\u64cd\u4f5c\u65b9\u9762\u90fd\u6709\u4e86\u975e\u5e38\u76f4\u89c2\u7684\u53d8\u5316\uff1a</p> <ul> <li>\u8bbf\u95ee <code>private</code> \u53c2\u6570\u53ea\u80fd\u901a\u8fc7 <code>public</code> \u51fd\u6570\u64cd\u4f5c\uff0c\u907f\u514d\u4e86 \u201c\u4e0d\u52a0\u7ea6\u675f\u5730\u8bbf\u95ee\u201d\uff08\u5b89\u5168\u6027\uff09\uff1b</li> </ul> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u6211\u6709\u4e00\u4e2a\u6a21\u62df ATM \u673a\u7684\u7a0b\u5e8f\uff0c\u6211\u5e0c\u671b\u4f7f\u7528\u8005\u53ea\u80fd\u901a\u8fc7 <code>deposit(val)</code> \u51fd\u6570\u8fdb\u884c\u5b58\u94b1\uff08\u6211\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u91cc\u8fdb\u884c\u5408\u6cd5\u6027\u5224\u65ad\uff09\uff0c\u800c\u4e0d\u662f <code>myAccount-&gt;balance += val</code> \uff1b</p> <p>\u5f53\u7136\u6211\u4e5f\u4e0d\u5e0c\u671b\u4efb\u4f55\u4eba\u901a\u8fc7 <code>othersAccount-&gt;balance</code> \u53bb\u201c\u5077\u7aa5\u201d\u5176\u4ed6\u4eba\u7684\u4f59\u989d\u4fe1\u606f\uff0c\u6211\u5c31\u53ef\u4ee5\u5728 <code>getBalance()</code> \u51fd\u6570\u91cc\u8bbe\u7f6e\u8d26\u53f7\u5bc6\u7801\u7684\u68c0\u67e5\uff0c\u5e76\u4e14\u8fd9\u4e2a\u51fd\u6570\u662f\u552f\u4e00\u80fd\u8bbf\u95ee\u4f59\u989d\u7684\u51fd\u6570</p> <p>\u8fd9\u5c31\u662f\u5199\u4fdd\u62a4\u548c\u8bfb\u4fdd\u62a4</p> <ul> <li><code>node-&gt;val</code> \u8fd9\u6837\u7684\u8bbf\u95ee\u64cd\u4f5c\u7531\u4e13\u95e8\u7684\u51fd\u6570 <code>getData()</code> \u8fdb\u884c\u5904\u7406\uff08\u7edf\u4e00\u6027\uff09\uff1b</li> </ul> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u6211\u6709\u4e00\u4e2a\u53d8\u91cf <code>val</code> \u56e0\u4e3a\u547d\u540d\u51b2\u7a81\u95ee\u9898\u9700\u8981\u4fee\u6539\u53d8\u91cf\u540d\u4e3a <code>value</code>\uff0c\u5728 C \u8bed\u8a00\u7684\u73af\u5883\u4e0b\uff0c\u6211\u901a\u5e38\u9700\u8981\u628a\u6240\u6709\u7684 <code>node-&gt;val</code> \u4e4b\u7c7b\u7684\u8bed\u53e5\u4fee\u6539\u4e3a <code>node-&gt;value</code>\uff0c\u5728\u4f7f\u7528\u4e86\u5c01\u88c5\u4e4b\u540e\u6211\u53ea\u9700\u8981\u4fee\u6539\u4e00\u6b21 <code>getData()</code> \u51fd\u6570\u5373\u53ef</p> <ul> <li>\u5e76\u4e14\u53ef\u7ef4\u62a4\u6027++\u4e86\uff08\u6240\u6709\u7684\u6570\u636e\u7ed3\u6784\u76f8\u5173\u64cd\u4f5c\u90fd\u5728\u4e00\u4e2a <code>Class</code> \u91cc\uff09</li> </ul> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u6211\u73b0\u5728\u6709\u82e5\u5e72\u4e2a\u5404\u4e0d\u76f8\u540c\u7684\u6570\u636e\u7ed3\u6784 <code>A, B, C, ...</code> \uff0c\u5b83\u4eec\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u51fd\u6570\u53eb\u505a <code>fun()</code>\uff0c\u5728\u6ca1\u6709\u5c01\u88c5\u7684\u60c5\u51b5\u4e0b\u6211\u53ef\u80fd\u9700\u8981 <code>funA, funB, funC, ...</code> \u7b49\u82e5\u5e72\u4e2a\u51fd\u6570\uff08\u4e07\u4e00\u4f60\u662f\u4e2a\u8d77\u540d\u5e9f\u5462\uff09\uff0c\u5728\u5c01\u88c5\u7684\u60c5\u51b5\u5199\u6211\u53ef\u4ee5\u5728\u6bcf\u4e2a\u6570\u636e\u7ed3\u6784\u7684 <code>Class</code> \u91cc\u5199\u4e00\u4e2a <code>fun</code> \u5e76\u4e14\u4e92\u4e0d\u6253\u6270</p> <p>\u8fd9\u4e00\u597d\u5904\u5728\u4e4b\u540e\u8fd8\u4f1a\u6709\u4f53\u73b0</p> <ul> <li>\u800c\u4e14\u5bf9\u7a0b\u5e8f\u7684\u4f7f\u7528\u8005\uff08\u800c\u975e\u5f00\u53d1\u8005\uff09\u6765\u8bf4\uff0c\u4ed6\u53ea\u9700\u8981\u4e86\u89e3\u76f8\u5173\u7684 <code>Public</code> \u63a5\u53e3\u5c31\u80fd\u4f7f\u7528\u7a0b\u5e8f\uff0c\u4ed6\u4e0d\u9700\u8981\u53bb\u6df1\u5165\u7814\u7a76 \u201c\u9ed1\u76d2\u5b50\u91cc\u7a76\u7adf\u53d1\u751f\u4e86\u4ec0\u4e48\u201d\uff08\u62bd\u8c61\u5316\u4e0e \"\u9ed1\u76d2\u5b50\" \u5316\uff09</li> </ul> <p>\u4ec0\u4e48\u662f\u62bd\u8c61\u5316\u4e0e \"\u9ed1\u76d2\u5b50\" \u5316\uff1f\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u4f60\u5728QQ\u91cc\u548c\u7fa4u\u6c34\u7fa4\u7684\u65f6\u5019\uff0c\u4e0d\u9700\u8981\u53bb\u4e86\u89e3\u8ba1\u7b97\u673a\u7f51\u7edc\u7b49\u5e95\u5c42\u539f\u7406\uff0c\u8fd9\u4e9b\u5e95\u5c42\u539f\u7406\u6700\u7ec8\u88ab\u62bd\u8c61\u5316\u4e3a\u4e86\u4e00\u4e2a Send \u6309\u94ae\uff0c\u800c\u4f60\u5728\u6b63\u5e38\u60c5\u51b5\u4e0b\u4e5f\u4e0d\u4f1a\u77e5\u9053\u6309\u4e0b Send \u6309\u94ae\u4e4b\u540e\u53d1\u751f\u7684\u4e8b\u60c5</p>"},{"location":"algorithm%26data_structure/C%2B%2B%20OOP/#chapter-2","title":"Chapter 2 \u7ee7\u627f","text":"<p>\u5728\u5c01\u88c5\u7684\u5e2e\u52a9\u4e0b\uff0c\u6211\u73b0\u5728\u6709\u4e86\u4e00\u4e2a\u5355\u5411\u94fe\u8868\u7684\u6a21\u677f\uff1a</p> <pre><code>class ListNode {\nprivate:\n    int val;\n    ListNode* next;\n\npublic:\n    ListNode(int val) : val(val), next(nullptr) {}      // \u6784\u9020\u51fd\u6570\n    virtual ~ListNode() {}                              // \u865a\u6790\u6784\u51fd\u6570\uff08\u8fd9\u662f\u4e2a\u5565\uff09\n    int getData() const { return val; }                 // \u53d6\u503c\u51fd\u6570\n    void setNext(ListNode* node) { next = node; }       // \u8fde\u63a5\u51fd\u6570\n    // \u5176\u4ed6\u51fd\u6570...\n};\n</code></pre> <p>\u73b0\u5728\u6211\u53c8\u60f3\u5b9e\u73b0\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u7684\u6a21\u677f\uff0c\u8003\u8651\u5230\u5355\u5411\u94fe\u8868\u548c\u53cc\u5411\u94fe\u8868\u5177\u6709\u7ed3\u6784\u76f8\u4f3c\u7684\u5730\u65b9\uff0c\u6211\u5982\u679c\u91cd\u65b0\u518d\u5199\u4e00\u4e2a\u5d2d\u65b0\u7684\u6a21\u677f\uff0c\u663e\u5f97\u6709\u4e9b\u8d39\u4e8b\uff0c\u800c\u4e14\u5982\u679c\u6211\u5bf9\u5355\u5411\u94fe\u8868\u548c\u53cc\u5411\u94fe\u8868\u7684\u5b9e\u73b0\u6709\u6240\u533a\u522b\uff0c\u5728\u8fdb\u884c\u6df7\u5408\u4f7f\u7528\u65f6\u53ef\u80fd\u4e0d\u592a\u65b9\u4fbf</p> <p>\u4e8e\u662f\u5f15\u5165\u7ee7\u627f\uff1a</p> <pre><code>class DoublyListNode : public ListNode {\nprivate:\n    DoublyListNode* prev;  // \u6307\u5411\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\npublic:\n    DoublyListNode(int val) : ListNode(val), prev(nullptr) {}  // \u6784\u9020\u51fd\u6570\n    DoublyListNode* getPrev() const { return prev; }\n    void setPrev(DoublyListNode* node) { prev = node; }\n    void setNext(DoublyListNode* node) {\n        ListNode::setNext(node);  // \u8c03\u7528\u57fa\u7c7b\u7684 setNext\n        if (node != nullptr) {\n            node-&gt;setPrev(this);  // \u65b0\u8282\u70b9\u7684 prev \u6307\u5411\u5f53\u524d\u8282\u70b9\n        }\n    }\n    // \u5176\u4ed6\u51fd\u6570...\n};\n</code></pre> <p>\u6211\u4eec\u5c06 <code>DoublyListNode</code> \u8bbe\u7f6e\u4e3a <code>ListNode</code> \u8fd9\u4e2a\u57fa\u7c7b\u7684\u7ee7\u627f\u5b50\u7c7b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728 <code>ListNode</code> \u7684\u5df2\u6709\u57fa\u7840\u4e0a\u52a0\u4e0a <code>DoublyListNode</code> \u7684\u7279\u6709\u5143\u7d20\u5c31\u5b8c\u6210\u4e86\u53cc\u5411\u94fe\u8868\u7684\u5b9e\u73b0</p> <p>\u65e2\u7136 <code>private</code> \u4e0d\u5bf9\u5b50\u7c7b\u5f00\u653e\uff0c\u90a3\u4e48\u6211\u7684 <code>DoublyListNode</code> \u8fd8\u80fd\u4f7f\u7528 <code>ListNode</code> \u4e2d\u7684 <code>val</code> \u548c <code>next</code> \u5417\uff1f</p> <p>\u786e\u5b9e\uff0c<code>private</code> \u7684\u9650\u5236\u4f7f\u5f97\u4e0d\u80fd\u76f4\u63a5\u5bf9 <code>val</code> \u4e0e <code>next</code> \u8fdb\u884c\u8bbf\u95ee\uff0c\u4f46\u662f\u57fa\u7c7b\u6210\u5458\u91cc\u5b58\u5728 <code>getData()</code> \u516c\u5171\u51fd\u6570\uff0c\u5728 <code>setNext()</code> \u65f6\u4e5f\u76f4\u63a5\u8c03\u7528\u4e86\u7236\u51fd\u6570\uff0c\u56e0\u6b64\u89c4\u907f\u4e86\u76f4\u63a5\u8bbf\u95ee <code>private</code> \u53d8\u91cf\u7684\u95ee\u9898</p> <p>\u8fd9\u4e5f\u662f\u5c01\u88c5\u7684\u4f53\u73b0</p> <p>\u4e3a\u4ec0\u4e48\u6790\u6784\u51fd\u6570\u53d8\u6210\u4e86\u865a\u6790\u6784\u51fd\u6570\uff1f</p> <p>\u6790\u6784\u51fd\u6570\u53ea\u5bf9\u57fa\u7c7b\u6709\u6548\uff0c\u5bf9\u5b50\u7c7b\u65e0\u6548\uff1b\u800c\u865a\u6790\u6784\u51fd\u6570\u5bf9\u57fa\u7c7b\u3001\u5b50\u7c7b\u90fd\u6709\u6548</p> <p>\u5982\u679c\u4e0d\u4f7f\u7528 <code>virtual</code> \u5173\u952e\u5b57\uff0c\u5b50\u7c7b\u4f1a\u9020\u6210\u5185\u5b58\u6cc4\u6f0f</p> <p>\u8fd9\u6837\u5199\u6709\u4ec0\u4e48\u597d\u5904\u5462\uff1f</p> <p>\u4e00\u662f\u53ef\u4ee5\u590d\u7528\u5f88\u591a\u4ee3\u7801\uff0c\u51cf\u5c11\u91cd\u590d\u52b3\u52a8\u6210\u672c\uff0c\u5e76\u4e14\u66f4\u52a0\u5bb9\u6613\u7ef4\u62a4</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u6211\u4ee5\u5355\u5411\u94fe\u8868\u4e3a\u57fa\u7c7b\u6784\u5efa\u4e86\u4e00\u4e2a \u201c\u94fe\u8868\u5e1d\u56fd\u201d\uff0c\u5b9e\u73b0\u4e86\u5404\u79cd\u5404\u6837\u7684\u94fe\u8868\uff0c\u8fd9\u671f\u95f4\u6211\u53ea\u9700\u8981\u5199\u4e00\u6b21 <code>getData()</code> \u51fd\u6570\uff0c\u800c\u4e0d\u662f Ctrl C+V \u82e5\u5e72\u904d</p> <p>\u5728\u6d4b\u8bd5\u65f6\u6211\u60ca\u5947\u5730\u53d1\u73b0\u81ea\u5df1\u628a\u6240\u6709\u7684 <code>getData()</code> \u51fd\u6570\u5199\u9519\u4e86\uff0c\u5982\u679c\u6211\u4f7f\u7528\u4e86\u7ee7\u627f\u5f0f\u5199\u6cd5\uff0c\u6211\u53ea\u9700\u8981\u4fee\u6539\u4e00\u6b21\u57fa\u7c7b\u7684 <code>getData()</code> \u5373\u53ef\uff0c\u800c\u4e0d\u662f\u6bcf\u4e2a <code>Class</code> \u90fd\u8fdb\u884c\u91cd\u590d\u4fee\u6539</p> <p>\u4e8c\u662f\u7edf\u4e00\u4e86\u63a5\u53e3</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff1a<code>getData()</code> \u5982\u679c\u5728\u4e0d\u540c\u7684\u76f8\u4f3c\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u56e0\u4e3a\u975e\u5e38\u968f\u610f\u7684\u547d\u540d\u4e60\u60ef\u88ab\u547d\u540d\u4e3a <code>getValue()</code> <code>getVal()</code> <code>get()</code> \uff0c\u8fd9\u4e00\u6740\u4f24\u529b\u76f8\u5f53\u4e8e \u201c\u6211\u7684\u624b\u673a\u5e94\u8be5\u4f7f\u7528 Type-C \u8fd8\u662f Micro-USB \u8fd8\u662f Lightning \u63a5\u53e3\u8fdb\u884c\u5145\u7535\u201d</p> <p>\u4e09\u662f\u65b9\u4fbf\u6269\u5c55</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u6211\u6709\u4e00\u4e2a <code>Player</code> \u57fa\u7c7b\u8bb0\u5f55\u4e86\u4e00\u4e2a\u6e38\u620f\u4e2d\u89d2\u8272\u7684\u6240\u6709\u57fa\u672c\u5b9e\u73b0\uff0c\u73b0\u5728\u6211\u60f3\u5f00\u53d1\u5f88\u591a\u4e0d\u540c\u7684\u6e38\u620f\u89d2\u8272\uff0c\u5206\u522b\u6709\u4e0d\u540c\u7684\u89d2\u8272\u6570\u636e\u4e0e\u6280\u80fd\uff08\u5c5e\u6027\u4e0e\u65b9\u6cd5\uff09\uff0c\u6b64\u65f6\u7ee7\u627f\u57fa\u7c7b\u6a21\u677f\u7684\u4f18\u52bf\u5c31\u80fd\u4f53\u73b0\u51fa\u6765\u4e86\uff08\u751f\u547d\u503c\u653b\u51fb\u529b\u7b49\u6570\u636e\u65e0\u9700\u6539\u52a8\u76f4\u63a5\u7ee7\u627f\uff0c\u540c\u65f6\u6211\u53ef\u4ee5\u8f83\u4e3a\u81ea\u7531\u7684\u8fdb\u884c\u6269\u5c55\uff09</p> <p>\u5176\u5b9e\u8fd9\u4e2a\u4f8b\u5b50\u53ef\u4ee5\u4e00\u6b21\u4f53\u73b0\u4ee5\u4e0a\u4e09\u4e2a\u4f18\u70b9</p>"},{"location":"algorithm%26data_structure/C%2B%2B%20OOP/#chapter-3","title":"Chapter 3 \u6a21\u677f","text":"<p>\u8fd8\u662f\u5355\u5411\u94fe\u8868\u7684\u6a21\u677f\uff1a</p> <pre><code>class ListNode {\nprivate:\n    int val;\n    ListNode* next;\n\npublic:\n    ListNode(int val) : val(val), next(nullptr) {}      // \u6784\u9020\u51fd\u6570\n    virtual ~ListNode() {}                              // \u865a\u6790\u6784\u51fd\u6570\n    int getData() const { return val; }                 // \u53d6\u503c\u51fd\u6570\n    void setNext(ListNode* node) { next = node; }       // \u8fde\u63a5\u51fd\u6570\n    // \u5176\u4ed6\u51fd\u6570...\n};\n</code></pre> <p>\u6211\u53d1\u73b0\u8fd9\u4e2a\u94fe\u8868\u7684 <code>val</code> \u53ea\u80fd\u5b58\u50a8 <code>int</code> \u503c\uff0c\u6211\u5e0c\u671b\u53ef\u4ee5\u6269\u5c55\u5230\u66f4\u591a\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f46\u662f\u6211\u53c8\u4e0d\u5e0c\u671b\u53e6\u5916\u5199 k \u4e2a\u51fd\u6570\u5206\u522b\u5bf9\u5e94 k \u4e2a\u6570\u636e\u7c7b\u578b</p> <p>\u4e8e\u662f\u6709\u4e86\u6a21\u677f\u3002</p> <pre><code>template &lt;typename T&gt;\nclass ListNode {\nprivate:\n    T val;\n    ListNode&lt;T&gt;* next;\n\npublic:\n    ListNode(T val) : val(val), next(nullptr) {}        // \u6784\u9020\u51fd\u6570\n    virtual ~ListNode() {}                              // \u865a\u6790\u6784\u51fd\u6570\n    T getData() const { return val; }                   // \u53d6\u503c\u51fd\u6570\n    void setNext(ListNode&lt;T&gt;* node) { next = node; }    // \u8fde\u63a5\u51fd\u6570\n    // \u5176\u4ed6\u51fd\u6570...\n};\n</code></pre> <p><code>template &lt;typename T&gt;</code> \u8868\u793a\u63a5\u4e0b\u6765\u7684\u8fd9\u4e2a\u7c7b\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u7c7b\u578b\u53c2\u6570\uff0c\u800c\u8fd9\u4e2a\u53c2\u6570\u5728\u58f0\u660e\u65f6\u6307\u5b9a\uff1a</p> <pre><code>ListNode&lt;int&gt;* node1 = new ListNode&lt;int&gt;(114);\nListNode&lt;double&gt;* node2 = new ListNode&lt;double&gt;(5.14);\nListNode&lt;string&gt;* node3 = new ListNode&lt;string&gt;(\"hm\");\n</code></pre> <p>\u8fd9\u6837\u6211\u4eec\u6784\u9020\u4e86\u4e09\u4e2a <code>val</code> \u7c7b\u578b\u4e0d\u540c\u7684\u94fe\u8868</p> <p>\u8fd9\u4e9b Node \u7684\u7c7b\u662f\u5426\u5b8c\u5168\u4e0d\u76f8\u540c\uff1f</p> <p><code>ListNode&lt;int&gt;</code> <code>ListNode&lt;double&gt;</code> \u662f\u5b8c\u5168\u4e0d\u540c\u7684\u4e24\u4e2a\u7c7b\uff0c\u4f60\u5e94\u5f53\u5c06\u8fd9\u4e24\u4e2a Node \u89c6\u4e3a\u4e0d\u76f8\u5173\u7684\u7c7b\uff0c\u53ea\u662f\u5b83\u4eec\u5171\u7528\u4e86\u540c\u4e00\u5957\u7c7b\u6a21\u677f</p> <p>\u7c7b\u7684\u597d\u5904\u5728\u4e8e\u6211\u4e0d\u9700\u8981\u4e3a\u6bcf\u79cd\u6570\u636e\u7c7b\u578b\u5355\u72ec\u5199\u4e00\u5957\u6a21\u677f\uff0c\u4f46\u662f\u5982\u679c\u8981\u4f7f\u4e0d\u540c\u7684\u7c7b\u4e4b\u95f4\u4ea7\u751f\u4ea4\u4e92\uff08\u6bd4\u5982\u5c06 <code>ListNode&lt;int&gt;</code> \u4e0e <code>ListNode&lt;double&gt;</code> \u94fe\u63a5\uff09\uff0c\u53c2\u89c1\u540e\u9762\u7684 \u201c\u591a\u6001\u201d</p>"},{"location":"algorithm%26data_structure/C%2B%2B%20OOP/#chapter-4","title":"Chapter 4 \u591a\u6001","text":"<p>\u5728 \u201c\u7ee7\u627f\u201d \u4e2d\uff0c\u6211\u4eec\u63d0\u5230\u4e86 \u201c\u865a\u51fd\u6570\u201d\uff0c\u865a\u51fd\u6570\u662f\u4e00\u4e2a\u53ef\u4ee5\u5728\u201c\u8fd0\u884c\u65f6\u6839\u636e\u5bf9\u8c61\u7684\u5b9e\u9645\u7c7b\u578b\u201d\u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a\u7248\u672c\u7684\u51fd\u6570\u3002\u6bd4\u5982\u865a\u6790\u6784\u51fd\u6570\u53ef\u4ee5\u6839\u636e\u5f53\u524d\u5bf9\u8c61\u7684\u7c7b\u578b\uff08\u57fa\u7c7b or \u5b50\u7c7b\uff09\u5b9e\u884c\u5bf9\u5e94\u7684\u6790\u6784\u64cd\u4f5c</p> <p>\u5728 \u201c\u6a21\u677f\u201d \u4e2d\uff0c\u6211\u4eec\u610f\u8bc6\u5230\u4e0d\u540c\u6a21\u677f\u6240\u5efa\u7acb\u7684\u7c7b\u662f\u72ec\u7acb\u533a\u5206\u7684\uff0c\u4e0d\u540c\u6a21\u677f\u4ea7\u751f\u7684\u7c7b\u4e4b\u95f4\u4e0d\u80fd\u8fdb\u884c\u4ea4\u4e92</p> <p>\u6211\u4eec\u53d1\u73b0\u865a\u51fd\u6570\u53ef\u4ee5\u533a\u5206 \u201c\u4e0d\u540c\u6a21\u677f\u6240\u5efa\u7acb\u7684\u7c7b\u201d\uff0c\u4ece\u800c\u51b3\u5b9a\u8c03\u7528\u4e0d\u540c\u7248\u672c\u7684\u51fd\u6570\uff0c\u5b9e\u73b0\u4e0d\u540c\u6a21\u677f\u7c7b\u4e4b\u95f4\u7684\u94fe\u63a5</p> <p>\u4e0a\u9762\u6240\u8bf4\u7684\u5c31\u662f\u8fd0\u884c\u65f6\u591a\u6001\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u6839\u636e\u5bf9\u8c61\u7684\u5b9e\u9645\u7c7b\u578b\u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a\u7248\u672c\u7684\u51fd\u6570</p> <p>\u5b9e\u9645\u4e0a\uff0c\u5f53\u6211\u4eec\u5728\u4e0a\u4e00\u4e2a Chapter \u4e2d\u4f7f\u7528 template \u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u53e6\u4e00\u7c7b\u591a\u6001\uff1a\u7f16\u8bd1\u65f6\u591a\u6001\uff1a\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u5c31\u6839\u636e <code>ListNode&lt;T&gt; n1</code> \u8fd9\u6837\u7684\u5b9e\u4f8b\u5316\u8bed\u53e5\u53bb\u751f\u6210\u5bf9\u5e94\u7684 <code>ListNode&lt;T&gt;</code> \u7c7b\uff08\u51fa\u73b0\u4e86\u51e0\u79cd\u6570\u636e\u7ed3\u6784\u5c31\u751f\u6210\u51e0\u79cd\u7c7b\uff09\u3002\u7136\u800c\u6b64\u65f6\u7684\u591a\u6001\u5e76\u4e0d\u80fd\u5ef6\u7eed\u5230\u8fd0\u884c\u65f6\u72b6\u6001\uff08\u6bd4\u5982\u94fe\u63a5\u6df7\u5408\u4e86\u591a\u79cd\u4e0d\u540c\u7c7b\u578b\u7684 <code>val</code> \u7684\u94fe\u8868\uff09</p> <p>\u800c\u73b0\u5728\u6211\u4eec\u8981\u5229\u7528\u865a\u51fd\u6570\u8fdb\u4e00\u6b65\u5b8c\u6210\u8fd0\u884c\u65f6\u591a\u6001\uff1a</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4e00\u4e2a \u201c\u62bd\u8c61\u7c7b\u201d\uff1a</p> <pre><code>class BaseListNode {\nprivate:\n    BaseListNode* next;\n    // \u6ca1\u6709 val \u53d8\u91cf\uff0c\u8fd9\u4e2a\u53d8\u91cf\u5e94\u8be5\u5728\u6a21\u677f\u5b50\u7c7b\u4e2d\u5b9a\u4e49\npublic:\n    BaseListNode() : next(nullptr) {}   // \u6784\u9020\u51fd\u6570\uff0c\u6ce8\u610f\u8fd9\u4e2a\u51fd\u6570\u5e76\u6ca1\u6709\u5b9e\u73b0\u521d\u59cb\u5316\n    virtual ~BaseListNode() {}          // \u865a\u6790\u6784\u51fd\u6570\n                                        // \u6ce8\u610f\u6ca1\u6709\u53d6\u503c\u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u51fd\u6570\u9700\u8981 template \u4e0b\u5b9e\u73b0\n    void setNext(BaseListNode* node) { next = node; }   // \u8fde\u63a5\u51fd\u6570\n\n    // \u4e3a\u4e86\u4f53\u73b0\u8fd0\u884c\u65f6\u591a\u6001\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7eaf\u865a\u51fd\u6570\u7684\u5b9e\u73b0\n    // \u8fd9\u91cc\u4ee5 print() \u6253\u5370 val \u4e3a\u4f8b\n    virtual void print() const = 0;\n};\n</code></pre> <p>\u8fd9\u4e2a\u7c7b\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a \u201c\u5927\u6846\u67b6\u201d\uff0c\u7531\u4e8e\u7eaf\u865a\u51fd\u6570\u7684\u5b58\u5728\uff0c\u5c5e\u4e8e\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u56e0\u6b64\u5199\u51fa <code>BaseListNode node</code> \u7684\u5b9e\u4f8b\u5316\u662f\u4e0d\u88ab\u5141\u8bb8\u7684</p> <p>\u62bd\u8c61\u7c7b\u4e2d\u5fc5\u987b\u6709\u81f3\u5c11\u4e00\u4e2a\u7eaf\u865a\u51fd\u6570\uff1a<code>virtual void func() = 0;</code></p> <p>\u5728 <code>virtual void print() const = 0;</code> \u7684\u4f8b\u5b50\u4e2d\uff1a</p> <p><code>virtual</code> \u8868\u793a\u5b83\u662f\u4e00\u4e2a\u865a\u51fd\u6570\uff1b</p> <p><code>const</code> \u8868\u793a\u51fd\u6570\u7684\u5b9e\u73b0\u662f\u53ea\u8bfb\u7684\uff1b</p> <p><code>= 0</code> \u8fdb\u4e00\u6b65\u8868\u660e\u5b83\u662f\u4e00\u4e2a\u7eaf\u865a\u51fd\u6570</p> <p>\u5f53\u4f60\u5728\u57fa\u7c7b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7eaf\u865a\u51fd\u6570\uff0c\u4f60\u5c31\u5fc5\u987b\u5728\u6bcf\u4e00\u4e2a\u5b50\u7c7b\u4e2d\u53bb\u5355\u72ec\u5b9e\u73b0\u5b83</p> <p>\u5728\u62bd\u8c61\u7c7b\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u6784\u9020\u6a21\u677f\u5b50\u7c7b\uff1a</p> <pre><code>template &lt;typename T&gt;\nclass ListNode : public BaseListNode {\nprivate:\n    T val;\n    // \u6307\u9488\u5728\u57fa\u7c7b\u4e2d\u5df2\u7ecf\u58f0\u660e\npublic:\n    ListNode(const T&amp; value) : val(value) {}    // \u5728 template \u4e0b\u91cd\u5199\u6784\u9020\u51fd\u6570\uff0c\u5b9e\u73b0\u521d\u59cb\u5316\n\n    T getData() const { return val;}        // \u501f\u52a9 template \u5b9e\u73b0\n\n    // \u8fd9\u91cc\u662f print() \u5728\u6a21\u677f\u7c7b\u4e2d\u7684\u8986\u5199\u5316\u5b9e\u73b0\n    void print() const override { cout &lt;&lt; val; }\n};\n</code></pre> <p>\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5982\u4f55\u4f53\u73b0\u591a\u6001\uff1f\u5728 <code>print()</code> \u51fd\u6570\u7684\u5b9e\u73b0\u4e2d\uff1a</p> <pre><code>class BaseListNode {\npublic:\n    virtual void print() const = 0;\n};\n\ntemplate&lt;typename T&gt;\nclass ListNode : public BaseListNode {\npublic:\n    void print() const override { std::cout &lt;&lt; val; }\n};\n</code></pre> <p>\u7f16\u8bd1\u65f6\uff0c\u6839\u636e\u7a0b\u5e8f\u4e2d\u5b9e\u4f8b\u5316\u7684\u60c5\u51b5\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u751f\u6210\u9700\u8981\u7528\u5230\u7684\u5404\u79cd <code>ListNode&lt;T&gt;</code>\uff0c\u8fd9\u5c31\u662f\u7f16\u8bd1\u65f6\u591a\u6001\u7684\u4f53\u73b0\uff0c\u6b64\u65f6\u4e0d\u540c\u7684 <code>ListNode&lt;T&gt;</code> \u96b6\u5c5e\u4e8e\u4e0d\u540c\u7684\u7c7b\u3002</p> <p>\u8fd0\u884c\u65f6\uff0c\u901a\u8fc7\u865a\u51fd\u6570\u7684\u8c03\u7528\u63a5\u53e3\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u6839\u636e\u5bf9\u8c61\u5b9e\u9645\u7c7b\u578b\u51b3\u5b9a\u8c03\u7528\u54ea\u4e2a\u5b9e\u73b0\uff0c\u8fd9\u4e00\u64cd\u4f5c\u4f7f\u5f97\u4e0d\u540c\u7684 <code>ListNode&lt;T&gt;</code> \u7c7b\u901a\u8fc7\u865a\u51fd\u6570\u8fdb\u884c\u7edf\u4e00\u5904\u7406\uff0c\u6bd4\u5982\u4f7f\u7528\u540c\u4e00\u4e2a <code>print()</code> \u51fd\u6570\uff0c\u5bf9\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684 <code>val</code> \u8fdb\u884c\u6253\u5370</p> <p>\u901a\u5e38\u6765\u8bf4\uff0c\u7f16\u8bd1\u65f6\u591a\u6001\u7684\u6027\u80fd\u66f4\u597d\uff08\u5f00\u9500\u4f4e\uff09\uff0c\u7c7b\u578b\u66f4\u5b89\u5168\uff1b\u800c\u8fd0\u884c\u65f6\u591a\u6001\u7684\u5b9e\u73b0\u66f4\u4e3a\u6e05\u6670\u3002\u5b83\u4eec\u7684\u4f18\u7f3a\u70b9\u6bd4\u8f83\u53ef\u4ee5 STFW</p> <p>\u81f3\u6b64\u6211\u4eec\u5bf9\u591a\u6001\u6709\u4e86\u521d\u6b65\u7684\u5370\u8c61\uff0c\u5f53\u7136\uff0c\u591a\u6001\u7684\u5f62\u5f0f\u6709\u5f88\u591a\u79cd\uff0c\u4ee5\u4e0a\u53ea\u662f\u5bf9\u591a\u6001\u7684\u4e00\u79cd\u4e3e\u4f8b\u5b9e\u73b0</p> <p>\u5199\u5b8c\u8fd9\u7bc7 note \u540e\uff0c\u6211\u5165\u95e8\u4e86\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08\u4e86\u5417\uff09</p>"},{"location":"algorithm%26data_structure/linkedlist/","title":"\u94fe\u8868","text":"<p>\u94fe\u8868\u662f\u4e00\u79cd\u7ebf\u6027\u6570\u636e\u7ed3\u6784\uff0c\u5141\u8bb8\u975e\u8fde\u7eed\u5185\u5b58\u5b58\u50a8\uff0c\u9488\u5bf9\u4e8e\u9891\u7e41\u589e\u5220\u64cd\u4f5c\u7684\u573a\u666f\uff0c\u4e0d\u9002\u7528\u4e8e\u9700\u8981\u9891\u7e41\u8bfb\u5199\u64cd\u4f5c\u7684\u573a\u666f</p>"},{"location":"algorithm%26data_structure/linkedlist/#_2","title":"\u5b9e\u73b0\u65b9\u5f0f","text":"<p>\u94fe\u8868\u6709\u5f88\u591a\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff1a</p> <p>1- \u7ed3\u6784\u65b9\u5f0f\uff1a\u8fd9\u79cd\u5b9e\u73b0\u5206\u79bb\u8282\u70b9\u4e0e\u94fe\u8868\u7684\u903b\u8f91\uff0c\u901a\u8fc7\u94fe\u8868\u7c7b\u64cd\u4f5c\u8282\u70b9\u7ed3\u6784\u4f53</p> <pre><code>struct ListNode {                               // \u5355\u4e2a\u94fe\u8868\u8282\u70b9\u7684\u7ed3\u6784\u4f53\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}  // \u7ed3\u6784\u4f53\u7684\u6784\u9020\u51fd\u6570\n};\n\nclass LinkedList {                              // \u901a\u8fc7\u7ed3\u6784\u4f53\u5b9e\u73b0\u7684\u94fe\u8868\u7c7b\nprivate:\n    ListNode* head;                             // \u94fe\u8868\u7c7b\u7684\u79c1\u6709\u53d8\u91cf\u53ea\u6709\u5934\u6307\u9488\npublic:\n    LinkedList() : head(nullptr) {}             // \u94fe\u8868\u7c7b\u7684\u6784\u9020\u51fd\u6570\n    void insertAtHead(int val) { ... }\n    // ... \n};\n</code></pre> <p>2- \u590d\u5408\u65b9\u5f0f\uff1a\u5728\u7ed3\u6784\u65b9\u5f0f\u7684\u5b9e\u73b0\u57fa\u7840\u4e0a\u5c06\u8282\u70b9\u5b9a\u4e49\u4e3a\u4e86\u72ec\u7acb\u7684\u7c7b\uff0c\u5e76\u901a\u8fc7\u53cb\u5143\u5f62\u6210\u4e0e\u94fe\u8868\u7c7b\u7684\u590d\u5408</p> <pre><code>class LinkedList;                   // \u524d\u5411\u58f0\u660e\n\nclass ListNode {                    // \u94fe\u8868\u7ed3\u70b9\u7c7b    \n    friend class LinkedList;        // \u53cb\u5143\u58f0\u660e\uff0c\u5b9e\u73b0 LinkedList \u5bf9 ListNode \u7684\u76f4\u63a5\u8bbf\u95ee\nprivate:\n    int val;\n    ListNode* next;\npublic: \n    ListNode(int x): val(x), next(nullptr) {}\n};\n\nclass LinkedList {                  // \u94fe\u8868\u7c7b      \nprivate:\n    ListNode* head;\npublic:\n    LinkedList() : head(nullptr) {}\n    void insertAtHead(int val) { ... }\n    // ...\n};\n</code></pre> <p>3- \u5d4c\u5957\u65b9\u5f0f\uff1a\u5728\u590d\u5408\u65b9\u5f0f\u7684\u5b9e\u73b0\u57fa\u7840\u4e0a\u5c06\u8282\u70b9\u7c7b\u5b9a\u4e49\u4e3a\u4e86\u94fe\u8868\u7c7b\u7684\u5b50\u7c7b\uff0c\u5c01\u88c5\u6027\u66f4\u5f3a</p> <pre><code>class LinkedList {\nprivate:\n    class ListNode {    // \u5185\u90e8\u7c7b\n    public:\n        int val;\n        ListNode* next;\n        ListNode(int x): val(x), next(nullptr) {}\n    };\n\n    ListNode* head;     // \u5934\u8282\u70b9\n\npublic:\n    LinkedList(): head(nullptr) {}\n    void insertAtHead(int x) { ... }\n    // ...\n};\n</code></pre> <p>4- \u7ee7\u627f\u65b9\u5f0f\uff1a\u94fe\u8868\u7c7b\u6210\u4e3a\u8282\u70b9\u7c7b\u7684\u7ee7\u627f\u5b50\u7c7b\uff0c\u53ef\u4ee5\u636e\u6b64\u5b9e\u73b0\u591a\u6001\uff0c\u4f46\u662f\u96be\u4ee5\u7ef4\u62a4\uff0c\u4ec5\u4f9b\u7406\u8bba\u5b9e\u73b0</p> <pre><code>class ListNode {                                // \u94fe\u8868\u8282\u70b9\u57fa\u7c7b\nprotected:\n    int val;\n    ListNode* next;\n\npublic:\n    ListNode(int x) : val(x), next(nullptr) {}\n    virtual ~ListNode() = default;              // \u865a\u6790\u6784\u51fd\u6570\uff08\u5728\u7ee7\u627f\u5199\u6cd5\u4e2d\u4e3a\u8fd0\u884c\u65f6\u591a\u6001\u7684\u5b9e\u73b0\u505a\u51c6\u5907\uff09\n};\n\nclass LinkedList : public ListNode {            // \u94fe\u8868\u7c7b\u7ee7\u627f\u81ea\u8282\u70b9\u7c7b\nprivate:\n    ListNode* head;\n\npublic:\n    LinkedList() : ListNode(), head(nullptr) {} // \u94fe\u8868\u7c7b\u6784\u9020\u51fd\u6570\n\n    void insertAtHead(int val);                 // \u5728\u5934\u90e8\u63d2\u5165\n    // ...\n};\n</code></pre> <p>\u4e4b\u540e\u53ea\u4f1a\u8fdb\u884c\u7ed3\u6784\u65b9\u5f0f\u7684\u5b9e\u73b0\uff0c\u5176\u4ed6\u65b9\u5f0f\u540c\u7406\u5b9e\u73b0</p>"},{"location":"algorithm%26data_structure/linkedlist/#_3","title":"\u624b\u52a8\u5b9e\u73b0","text":""},{"location":"algorithm%26data_structure/linkedlist/#_4","title":"\u5355\u5411\u94fe\u8868","text":"<p>\u4ee5\u4e0b\u4e3a\u5355\u5411\u94fe\u8868\u7684\u624b\u52a8\u5b9e\u73b0\uff1a</p> <pre><code>struct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}  // \u6784\u9020\u51fd\u6570\n};\n\nclass LinkedList {\nprivate:\n    // \u5982\u679c\u9700\u8981\u529f\u80fd\u66f4\u5f3a\u5927\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u50a8\u5b58\u5176\u4ed6\u7684\u4fe1\u606f\n    // \u6bd4\u5982\u5c3e\u6307\u9488 ListNode* tail\uff0c\u94fe\u8868\u957f\u5ea6 int len\n    ListNode* head;\n\npublic:\n    LinkedList() : head(nullptr) {}     // \u6784\u9020\u51fd\u6570\n    ~LinkedList() { clear(); }          // \u6790\u6784\u51fd\u6570\n\n    // \u8fd9\u91cc\u8fdb\u884c\u51fd\u6570\u7684\u5b9e\u73b0\n\n};\n</code></pre> <p>--&gt; \u5224\u65ad\u94fe\u8868\u662f\u5426\u4e3a\u7a7a</p> <pre><code>bool empty() const {\n    return head == nullptr;\n}\n</code></pre> <p>--&gt; \u63d2\u5165\u5230 <code>index</code> \u7684\u4f4d\u7f6e\uff080-index\uff09\uff08\u4e5f\u5c31\u662f\u5728 <code>index</code> \u524d\u63d2\u5165\uff09</p> <pre><code>void insert(int index, int val) {\n    if (index == 0 || !head) {\n        // \u5934\u63d2\n        ListNode* newNode = new ListNode(val);\n        newNode-&gt;next = head;\n        head = newNode;\n        return;\n    }\n\n    // index = size \u65f6\u5373\u5c3e\u63d2\u5165\n    ListNode* cur = head;\n    for (int i = 0; i &lt; index - 1 &amp;&amp; cur-&gt;next; i++)\n        cur = cur-&gt;next;\n    ListNode* newNode = new ListNode(val);\n    newNode-&gt;next = cur-&gt;next;\n    cur-&gt;next = newNode;\n\n}\n</code></pre> <p>--&gt; \u5220\u9664 <code>index</code> \u4f4d\u7f6e\u7684\u8282\u70b9\uff080-index\uff09</p> <pre><code>void removeNode(int index) {\n    if (!head || index &lt; 0) return;\n\n    if (index == 0) {\n        // \u5220\u9664\u5934\u8282\u70b9\n        ListNode* temp = head;\n        head = head-&gt;next;\n        delete temp;\n        return;\n    }\n\n    ListNode* cur = head;\n    // \u627e\u5230\u8981\u5220\u9664\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\n    for (int i = 0; i &lt; index - 1 &amp;&amp; cur-&gt;next; i++) {\n        cur = cur-&gt;next;\n    }\n\n    // \u5982\u679c\u627e\u5230\u4e86\u6709\u6548\u8282\u70b9\u4e14\u4e0b\u4e00\u4e2a\u8282\u70b9\u5b58\u5728\n    if (cur-&gt;next) {\n        ListNode* temp = cur-&gt;next;\n        cur-&gt;next = cur-&gt;next-&gt;next;\n        delete temp;\n    }\n}\n</code></pre> <p>--&gt; \u5220\u9664\u6307\u5b9a\u503c\u7684\u8282\u70b9\uff08\u5220\u9664\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\uff09</p> <pre><code>void removeVal(int val) {\n    // \u4e0d\u590d\u7528 removeNode \u51fd\u6570\u7684\u539f\u56e0\u662f removeNode \u51fd\u6570\u9700\u8981\u91cd\u65b0\u904d\u5386\u4e00\u904d\u94fe\u8868\n    if (!head) return;\n    if (head-&gt;val == val) {\n        ListNode* temp = head;\n        head = head-&gt;next;\n        delete temp;\n        return;\n    }\n    ListNode* cur = head;\n    while (cur-&gt;next &amp;&amp; cur-&gt;next-&gt;val != val) {\n        cur = cur-&gt;next;\n    }\n    if (cur-&gt;next) {\n        ListNode* temp = cur-&gt;next;\n        cur-&gt;next = cur-&gt;next-&gt;next;\n        delete temp;\n    }\n}\n</code></pre> <p>--&gt; \u67e5\u627e\u8282\u70b9\uff08\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u8282\u70b9\u7684\u6307\u9488\uff09</p> <pre><code>ListNode* find(int val) {\n    ListNode* cur = head;\n    while (cur) {\n        if (cur-&gt;val == val)\n            return cur;\n        cur = cur-&gt;next;\n    }\n    return nullptr;\n}\n</code></pre> <p>--&gt; \u53cd\u8f6c\u94fe\u8868</p> <pre><code>void reverse() {\n    ListNode* prev = nullptr;\n    ListNode* curr = head;\n    while (curr) {\n        ListNode* next = curr-&gt;next;\n        curr-&gt;next = prev;\n        prev = curr;\n        curr = next;\n    }\n    head = prev;\n}\n</code></pre> <p>--&gt; \u6253\u5370\u94fe\u8868</p> <pre><code>void print() const {\n    ListNode* cur = head;\n    while (cur) {\n        cout &lt;&lt; cur-&gt;val;\n        if (cur-&gt;next) cout &lt;&lt; \" \";\n        cur = cur-&gt;next;\n    }\n    cout &lt;&lt; endl;\n}\n</code></pre> <p>--&gt; \u6e05\u7a7a\u94fe\u8868\uff0c\u6790\u6784\u51fd\u6570\u8c03\u7528</p> <pre><code>void clear() {\n    ListNode* cur = head;\n    while (cur) {\n        ListNode* temp = cur;\n        cur = cur-&gt;next;\n        delete temp;\n    }\n    head = nullptr;\n}\n</code></pre>"},{"location":"algorithm%26data_structure/linkedlist/#_5","title":"\u53cc\u5411\u5faa\u73af\u94fe\u8868","text":"<p>\u5355\u5411\u94fe\u8868\u7684\u64cd\u4f5c\u5177\u6709\u4e00\u5b9a\u7684\u5c40\u9650\u6027\uff0c\u6211\u4eec\u5728\u5355\u5411\u94fe\u8868\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u53cc\u5411\u6307\u9488\uff08<code>next</code> \u548c <code>prev</code>\uff09\uff0c\u5e76\u4e14\u652f\u6301\u9996\u5c3e\u8282\u70b9\u7684\u5faa\u73af\u8fde\u63a5\uff1a</p> <p>\u4ee5\u4e0b\u662f\u53cc\u5411\u5faa\u73af\u94fe\u8868\u7684\u624b\u52a8\u5b9e\u73b0\uff1a</p> <pre><code>struct ListNode {\n    int val;\n    ListNode* next;\n    ListNode* prev;\n    ListNode(int x) : val(x), next(nullptr), prev(nullptr) {}  // \u6784\u9020\u51fd\u6570\n};\n\nclass DoublyCircularLinkedList {\nprivate:\n    // \u5934\u6307\u9488\uff0c\u6307\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\n    ListNode* head;\n    // \u5c3e\u6307\u9488\uff0c\u6307\u5411\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\n    // tail \u5c31\u662f head-&gt;prev\uff0c\u5bf9\u4e8e\u975e\u5faa\u73af\u94fe\u8868\u6765\u8bf4\uff0ctail \u6307\u9488\u5f88\u6709\u7528\n    // \u51fa\u4e8e\u7edf\u4e00\u6027\u4fdd\u7559\u4f7f\u7528\n    ListNode* tail;\n    // \u94fe\u8868\u5927\u5c0f\n    int size;\n\npublic:\n    DoublyCircularLinkedList() : head(nullptr), tail(nullptr), size(0) {}  // \u6784\u9020\u51fd\u6570\n    ~DoublyCircularLinkedList() { clear(); }  // \u6790\u6784\u51fd\u6570\n\n    // \u8fd9\u91cc\u8fdb\u884c\u51fd\u6570\u7684\u5b9e\u73b0\n\n};\n</code></pre> <p>--&gt; \u5224\u65ad\u94fe\u8868\u662f\u5426\u4e3a\u7a7a</p> <pre><code>bool empty() const {\n    return head == nullptr;\n}\n</code></pre> <p>--&gt; \u63d2\u5165\u5230 <code>index</code> \u7684\u4f4d\u7f6e\uff080-index\uff09\uff08\u4e5f\u5c31\u662f\u5728 <code>index</code> \u524d\u63d2\u5165\uff09</p> <pre><code>void insert(int index, int val) {\n    // \u9632\u6b62\u8bbf\u95ee NULL \u9886\u57df\n    if (index &lt; 0) index = 0;\n    if (index &gt; size) index = size;\n\n    ListNode* newNode = new ListNode(val);\n\n    if (empty()) {\n        // \u94fe\u8868\u4e3a\u7a7a\u65f6\u7684\u63d2\u5165\u64cd\u4f5c\n        head = tail = newNode;\n        head-&gt;next = head;\n        head-&gt;prev = head;\n    }\n    else if (index == 0) {\n        // \u5934\u63d2\n        newNode-&gt;next = head;\n        newNode-&gt;prev = tail;\n        head-&gt;prev = newNode;\n        tail-&gt;next = newNode;\n        head = newNode;\n    }\n    else if (index == size) {\n        // \u5c3e\u63d2\n        // \u5982\u679c\u4e0d\u8003\u8651\u7ef4\u62a4 tail \u6307\u9488\uff0c\u53ef\u4ee5\u4e0e\u4e2d\u95f4\u63d2\u5165\u5408\u5e76\n        // \u8003\u8651\u5230\u5355\u72ec\u5b9e\u73b0\u5c3e\u63d2\u4f1a\u6709\u66f4\u597d\u7684\u6027\u80fd\uff08\u4e0d\u9700\u8981\u904d\u5386\u94fe\u8868\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u5206\u79bb\u51fa\u5c3e\u63d2\u64cd\u4f5c\n        newNode-&gt;prev = tail;\n        newNode-&gt;next = head;\n        tail-&gt;next = newNode;\n        head-&gt;prev = newNode;\n        tail = newNode;\n    }\n    else {\n        // \u4e2d\u95f4\u63d2\u5165\n        ListNode* cur = head;\n        for (int i = 0; i &lt; index; i++) {\n            cur = cur-&gt;next;\n        }\n        newNode-&gt;next = cur;\n        newNode-&gt;prev = cur-&gt;prev;\n        cur-&gt;prev-&gt;next = newNode;\n        cur-&gt;prev = newNode;\n    }\n\n    size++;\n}\n</code></pre> <p>--&gt; \u5220\u9664 <code>index</code> \u4f4d\u7f6e\u7684\u8282\u70b9\uff080-index\uff09</p> <pre><code>void removeNode(int index) {\n    if (empty() || index &lt; 0 || index &gt;= size) return;\n\n    if (index == 0) {\n        // \u5220\u9664\u5934\u8282\u70b9\n        if (head == tail) {\n            // \u5355\u8282\u70b9\u94fe\u8868\n            delete head;\n            head = tail = nullptr;\n        } else {\n            // \u66f4\u65b0\u5934\u8282\u70b9\n            ListNode* temp = head;\n            head = head-&gt;next;\n            head-&gt;prev = tail;\n            tail-&gt;next = head;\n            delete temp;\n        }\n    } else if (index == size - 1) {\n        // \u5220\u9664\u5c3e\u8282\u70b9\n        ListNode* temp = tail;\n        tail = tail-&gt;prev;\n        tail-&gt;next = head;\n        head-&gt;prev = tail;\n        delete temp;\n    } else {\n        // \u5220\u9664\u4e2d\u95f4\u8282\u70b9\n        ListNode* cur = head;\n        for (int i = 0; i &lt; index; i++) {\n            cur = cur-&gt;next;\n        }\n        // \u66f4\u65b0\u524d\u540e\u8282\u70b9\u7684\u8fde\u63a5\n        cur-&gt;prev-&gt;next = cur-&gt;next;\n        cur-&gt;next-&gt;prev = cur-&gt;prev;\n        delete cur;\n    }\n\n    size--;  // \u66f4\u65b0\u94fe\u8868\u5927\u5c0f\n}\n</code></pre> <p>--&gt; \u5220\u9664\u6307\u5b9a\u503c\u7684\u8282\u70b9\uff08\u5220\u9664\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\uff09</p> <pre><code>void removeVal(int val) {\n    if (empty()) return;\n\n    ListNode* cur = head;\n\n    // \u5355\u8282\u70b9\u5220\u9664\n    if (head == tail &amp;&amp; head-&gt;val == val) {\n        delete head;\n        head = tail = nullptr;\n        size = 0;\n        return;\n    }\n\n    // \u904d\u5386\u94fe\u8868\uff0c\u5220\u9664\u5339\u914d\u7684\u8282\u70b9\n    do {\n        if (cur-&gt;val == val) {\n            // \u5904\u7406\u5934\u8282\u70b9\n            if (cur == head) {\n                head = head-&gt;next;\n                head-&gt;prev = tail;\n                tail-&gt;next = head;\n            }\n            // \u5904\u7406\u5c3e\u8282\u70b9\n            else if (cur == tail) {\n                tail = tail-&gt;prev;\n                tail-&gt;next = head;\n                head-&gt;prev = tail;\n            }\n            // \u5904\u7406\u4e2d\u95f4\u8282\u70b9\n            else {\n                cur-&gt;prev-&gt;next = cur-&gt;next;\n                cur-&gt;next-&gt;prev = cur-&gt;prev;\n            }\n\n            delete cur;  // \u5220\u9664\u8282\u70b9\n            size--;  // \u66f4\u65b0\u94fe\u8868\u5927\u5c0f\n            return;\n        }\n        cur = cur-&gt;next;\n    } while (cur != head);  // \u5faa\u73af\u76f4\u5230\u56de\u5230\u5934\u8282\u70b9\n\n    return; // \u8868\u793a\u6ca1\u6709\u627e\u5230\u5f85\u5220\u9664\u503c\n}\n</code></pre> <p>--&gt; \u67e5\u627e\u8282\u70b9\uff08\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u8282\u70b9\u7684\u6307\u9488\uff09</p> <pre><code>ListNode* find(int val) {\n    if (empty()) return nullptr;\n\n    ListNode* cur = head;\n    do {\n        if (cur-&gt;val == val) {\n            return cur;\n        }\n        cur = cur-&gt;next;\n    } while (cur != head);\n\n    return nullptr;\n}\n</code></pre> <p>--&gt; \u53cd\u8f6c\u94fe\u8868</p> <pre><code>void reverse() {\n    if (empty() || head == tail) return;  // \u7a7a\u94fe\u8868\u6216\u5355\u8282\u70b9\u65e0\u9700\u53cd\u8f6c\n\n    ListNode* cur = head;\n    ListNode* temp = nullptr;\n\n    do {\n        // \u4ea4\u6362\u524d\u540e\u6307\u9488\n        temp = cur-&gt;next;\n        cur-&gt;next = cur-&gt;prev;\n        cur-&gt;prev = temp;\n\n        // \u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\n        cur = temp;\n    } while (cur != head);\n\n    // \u8c03\u6574\u5934\u5c3e\u6307\u9488\n    temp = head;\n    head = tail;\n    tail = temp;\n}\n</code></pre> <p>--&gt; \u6253\u5370\u94fe\u8868</p> <pre><code>void print() const {\n    if (empty()) {\n        cout &lt;&lt; endl;\n        return;\n    }\n\n    ListNode* cur = head;\n    do {\n        cout &lt;&lt; cur-&gt;val;\n        if (cur-&gt;next != head) cout &lt;&lt; \" \";\n        cur = cur-&gt;next;\n    } while (cur != head);\n\n    cout &lt;&lt; endl;\n}\n</code></pre> <p>--&gt; \u6e05\u7a7a\u94fe\u8868\uff0c\u8c03\u7528\u6790\u6784\u51fd\u6570</p> <pre><code>void clear() {\n    if (empty()) return;\n\n    ListNode* cur = head;\n    ListNode* temp = nullptr;\n\n    do {\n        temp = cur;\n        cur = cur-&gt;next;\n        delete temp;\n    } while (cur != head);\n\n    head = tail = nullptr;\n    size = 0;\n}\n</code></pre>"},{"location":"algorithm%26data_structure/linkedlist/#stl","title":"STL \u5b9e\u73b0","text":"<p><code>&lt;list&gt;</code> \u548c <code>&lt;forward_list&gt;</code> \u5206\u522b\u662f\u5bf9\u53cc\u5411\u94fe\u8868\u548c\u5355\u5411\u94fe\u8868\u7684\u6a21\u677f\u5b9e\u73b0\uff1a</p> <p>\u521d\u59cb\u5316\u53ef\u4ee5\u53c2\u8003 <code>vector</code>\uff0c\u6bd4\u5982\uff1a</p> <pre><code>list&lt;int&gt; l1;                   // \u7a7a\u94fe\u8868\nlist&lt;int&gt; l2(3, 1);             // {1\uff0c1\uff0c1}\nlist&lt;int&gt; l3 = {1, 2, 3, 4};    // \u5217\u8868\u521d\u59cb\u5316\nlist&lt;int&gt; l4(l3);               // \u62f7\u8d1d\u6784\u9020\n</code></pre> <p>\u4e0b\u9762\u662f <code>&lt;list&gt;</code> \u652f\u6301\u7684\u51fd\u6570/\u64cd\u4f5c</p> <pre><code>list.begin(); list.end()    // \u5934\u5c3e\u8282\u70b9\u8fed\u4ee3\u5668\nlist.front(); list.back()   // \u5934\u5c3e\u8282\u70b9\u503c\nlist.size()                 // \u94fe\u8868\u957f\u5ea6\uff0c\u9ad8\u7248\u672c C++ \u8981\u6c42 O(1) \u5b9e\u73b0\n\nlist.push_front(val);       // \u5934\u63d2\u5165\nlist.push_back(val);        // \u5c3e\u63d2\u5165\nlist.insert(it, val);       // \u5728 it \u8fed\u4ee3\u5668\u6307\u5411\u7684\u5143\u7d20\u4e4b\u524d\u63d2\u5165 val\n\nlist.remove(val)            // \u5220\u9664\u6240\u6709\u503c\u4e3a val \u7684\u5143\u7d20\nlist.remove_if(UnaryPred)   // \u5220\u9664\u6240\u6709\u6ee1\u8db3\u4e00\u5143\u8c13\u8bcd UnaryPred \u7684\u5143\u7d20\uff0c\u529f\u80fd\u5f3a\u5927\uff0c\u53c2\u8003 vector\nlist.pop_front();           // \u5934\u5220\u9664\nlist.pop_back();            // \u5c3e\u5220\u9664\nlist.erase(it);             // \u5220\u9664 it \u6307\u5411\u7684\u5143\u7d20\uff08\u4e5f\u53ef\u4ee5 erase(it1, it2) \u8303\u56f4\u5220\u9664\uff09\n\nlist.reverse();       // \u53cd\u8f6c\u94fe\u8868\nlist.sort();          // \u6392\u5e8f\uff08\u9ed8\u8ba4\u5347\u5e8f\uff0c\u4e0d\u80fd\u6307\u5b9a\u6392\u5e8f\u8303\u56f4\uff0c\u5141\u8bb8\u81ea\u5b9a\u4e49\u6392\u5e8f\u51fd\u6570\uff09\nlist.unique();        // \u53bb\u9664\u8fde\u7eed\u91cd\u590d\u7684\u5143\u7d20\uff08\u6bd4\u5982 1 2 2 1 \u53bb\u91cd\u4e3a 1 2 1\uff09\uff0c\u5141\u8bb8\u81ea\u5b9a\u4e49\u51fd\u6570\n\nlist.merge(other);    // \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\uff08\u5408\u5e76\u5728 list \u4e0a\uff09\uff0c\u5141\u8bb8\u81ea\u5b9a\u4e49\u6392\u5e8f\u51fd\u6570\uff1bother \u4f1a\u88ab\u6e05\u7a7a\nlist.splice(pos, other, it1, it2);  // \u62fc\u63a5\u94fe\u8868\uff0c\u540e\u4e24\u4e2a\u53c2\u6570\u53ef\u9009\uff0c\u90fd\u4e0d\u9009\u8868\u793a\u4e00\u6574\u4e2a other \u94fe\u8868\u88ab\u526a\u5207\n                                    // \u5c06 other \u94fe\u8868 [it1, it2) \u7684\u90e8\u5206\u526a\u5207\u7c98\u8d34\u5230 pos \u4e4b\u524d\u7684\u4f4d\u7f6e\n                                    // \u7531\u4e8e\u8fd9\u4e00\u64cd\u4f5c\u53ea\u6d89\u53ca\u6307\u9488\u64cd\u4f5c\uff0c\u6240\u4ee5\u4f1a\u6539\u53d8 other \u7684\u94fe\u63a5\u60c5\u51b5\n</code></pre> <p>\u5bf9\u4e8e <code>&lt;forward_list&gt;</code>\uff0c\u7531\u4e8e\u5176\u4ec5\u652f\u6301\u5355\u9879\u8fed\u4ee3\u5668\uff08<code>&lt;list&gt;</code> \u4e3a\u53cc\u5411\u8fed\u4ee3\u5668\uff09\uff0c\u56e0\u6b64\uff1a</p> <p><code>back()</code> <code>push_back()</code> <code>pop_back()</code> \u5747\u4e0d\u53ef\u7528\uff1b</p> <p><code>insert()</code> <code>erase()</code> <code>splice()</code> \u51fd\u6570\u5747\u6539\u4e3a <code>_after</code> \u7248\u672c\uff0c\u6bd4\u5982 <code>insert_after(it, val)</code> \u4e3a\u5728 <code>it</code> \u6307\u5411\u5143\u7d20\u7684\u540e\u9762\u63d2\u5165 <code>val</code>\uff08\u53cc\u5411\u94fe\u8868\u662f\u524d\u63d2\u5165\uff09\uff1b</p> <p>\u53e6\u5916 <code>size()</code> \u4e5f\u4e0d\u53ef\u7528\uff0c\u5355\u5411\u94fe\u8868\u7684 <code>size()</code> \u5b9e\u73b0\u662f O(n) \u7684\uff0c\u4e0d\u5982\u624b\u52a8\u5b9e\u73b0</p>"},{"location":"algorithm%26data_structure/linkedlist/#extras","title":"Extras","text":""},{"location":"algorithm%26data_structure/linkedlist/#_6","title":"\u54e8\u5175","text":"<p>\u6458\u81ea\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u539f\u4e66\u7b2c\u4e09\u7248 P132~P133</p> <p>\u54e8\u5175\uff08sentinel\uff09\u662f\u4e00\u4e2a\u4e0d\u5b58\u50a8\u5b9e\u9645\u4fe1\u606f\u7684\u54d1\u5bf9\u8c61\uff0c\u5176\u4f5c\u7528\u662f\u7b80\u5316\u8fb9\u754c\u6761\u4ef6\u7684\u5904\u7406\u3002</p> <p>\u6211\u4eec\u5728\u521d\u59cb\u5316\u94fe\u8868\u65f6\u4e0d\u4f7f\u7528 <code>head</code> \u6307\u9488\uff0c\u800c\u662f\u6784\u9020\u4e00\u4e2a <code>L.nil</code> \u54e8\u5175\u8282\u70b9\uff0c<code>L.nit.next</code> \u4ee3\u66ff <code>head</code> \u4f7f\u7528\uff08\u59cb\u7ec8\u6307\u5411\u8868\u5934\uff09\uff1b\u5bf9\u4e8e\u53cc\u5411\u94fe\u8868\uff0c<code>L.nit.prev</code> \u4ee3\u66ff <code>tail</code> \u4f7f\u7528\uff08\u59cb\u7ec8\u6307\u5411\u8868\u5c3e\uff09</p> <p>\u54e8\u5175\u5bf9\u4e8e\u6784\u9020\u5faa\u73af\u94fe\u8868\u6709\u5f88\u5927\u7684\u4f18\u52bf\uff0c\u5faa\u73af\u95ed\u5408\u7684\u64cd\u4f5c\u53ef\u4ee5\u901a\u8fc7\u54e8\u5175\u8282\u70b9\u7684\u6307\u9488\u64cd\u4f5c\u5feb\u901f\u5b9e\u73b0</p> <p>\u66f4\u52a0\u65b9\u4fbf\u7684\u662f\uff1a\u5bf9\u4e8e\u6d89\u53ca\u5230\u8fb9\u754c\u64cd\u4f5c\u7684\u94fe\u8868\u64cd\u4f5c\uff0c<code>L.nil</code> \u672c\u8eab\u4f5c\u4e3a\u4e00\u4e2a\u5b8c\u6574\u7684\u8282\u70b9\u53ef\u4ee5\u6d88\u9664\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\uff1a\u4ee5\u53cc\u5411\u5faa\u73af\u94fe\u8868\u4e2d\u63d2\u5165\u67d0\u4e00\u7ed3\u70b9\u7684\u64cd\u4f5c\u4e3a\u4f8b</p> <pre><code>void insert(int index, int val) {\n    // \u9632\u6b62\u8bbf\u95ee NULL \u9886\u57df\n    if (index &lt; 0) index = 0;\n    if (index &gt; size) index = size;\n\n    ListNode* newNode = new ListNode(val);\n\n    if (empty()) {\n        // \u94fe\u8868\u4e3a\u7a7a\u65f6\u7684\u63d2\u5165\u64cd\u4f5c\n        head = tail = newNode;\n        head-&gt;next = head;\n        head-&gt;prev = head;\n    }\n    else if (index == 0) {\n        // \u5934\u63d2\n        newNode-&gt;next = head;\n        newNode-&gt;prev = tail;\n        head-&gt;prev = newNode;\n        tail-&gt;next = newNode;\n        head = newNode;\n    }\n    else if (index == size) {\n        // \u5c3e\u63d2\n        // \u5982\u679c\u4e0d\u8003\u8651\u7ef4\u62a4 tail \u6307\u9488\uff0c\u53ef\u4ee5\u4e0e\u4e2d\u95f4\u63d2\u5165\u5408\u5e76\n        // \u8003\u8651\u5230\u5355\u72ec\u5b9e\u73b0\u5c3e\u63d2\u4f1a\u6709\u66f4\u597d\u7684\u6027\u80fd\uff08\u4e0d\u9700\u8981\u904d\u5386\u94fe\u8868\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u5206\u79bb\u51fa\u5c3e\u63d2\u64cd\u4f5c\n        newNode-&gt;prev = tail;\n        newNode-&gt;next = head;\n        tail-&gt;next = newNode;\n        head-&gt;prev = newNode;\n        tail = newNode;\n    }\n    else {\n        // \u4e2d\u95f4\u63d2\u5165\n        ListNode* cur = head;\n        for (int i = 0; i &lt; index; i++) {\n            cur = cur-&gt;next;\n        }\n        newNode-&gt;next = cur;\n        newNode-&gt;prev = cur-&gt;prev;\n        cur-&gt;prev-&gt;next = newNode;\n        cur-&gt;prev = newNode;\n    }\n\n    size++;\n}\n</code></pre> <p>\u6211\u4eec\u5f15\u5165\u54e8\u5175\u540e\u4e0d\u518d\u9700\u8981\u7ef4\u62a4\u5355\u72ec\u7684 <code>head</code> <code>tail</code> \u6307\u9488\uff0c\u6709\uff1a</p>"},{"location":"algorithm%26data_structure/linkedlist/#_7","title":"\u5f02\u6216\u94fe\u8868","text":"<p>\u6458\u81ea \u94fe\u8868 - OI Wiki</p> <p>\u53cc\u5411\u94fe\u8868\u7684\u53e6\u4e00\u79cd\u5b9e\u73b0\u3002\u5e38\u89c4\u7684\u53cc\u5411\u94fe\u8868\u5b9e\u73b0\u9700\u8981\u7528\u5230 <code>prev</code> \u548c <code>next</code> \u4e24\u4e2a\u6307\u9488\uff0c\u800c\u5f02\u6216\u94fe\u8868\u501f\u52a9\u5f02\u6216\u8ba1\u7b97\u5b9e\u73b0\u4e86\u4e24\u4e2a\u6307\u9488\u7684\u5408\u5e76\uff1a<code>ptr = prev ^ next</code>\uff0c\u4f7f\u5f97\u53cc\u5411\u94fe\u8868\u548c\u5355\u5411\u94fe\u8868\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7684\u5185\u5b58\u5360\u7528</p> <p>\u5f02\u6216\u8ba1\u7b97\u7684\u7279\u6027\u662f\uff1a<code>a xor 0 = a</code>\uff0c<code>a xor a = 0</code>\uff0c<code>a xor b xor a = b</code>\uff0c\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff0c\u7ed3\u5408\u5f8b</p> <p>\u56e0\u6b64\u5f02\u6216\u8ba1\u7b97\u662f\u53ef\u9006\u7684\uff0c\u5e38\u89c1\u7684\u5e94\u7528\u662f\u5b9e\u73b0\u4e24\u4e2a\u6570\u5b57\u7684\u539f\u5730\u4ea4\u6362\uff1a</p> <pre><code>a=a^b;\nb=a^b;\na=a^b;\n</code></pre> <p>\u6211\u4eec\u4ee5\u53cc\u5411\u4e0d\u5faa\u73af\u94fe\u8868\u4e3a\u4f8b\uff1a</p> <pre><code>        +----------+    +----------+    +----------+\n        |  Node A  |---&gt;|  Node B  |---&gt;|  Node C  |\nhead---&gt;|          |    |          |    |          | --...-&gt;\n        |  ptr_A   |&lt;---|  ptr_B   |&lt;---|  ptr_C   |\n        +----------+    +----------+    +----------+\n</code></pre> <p>\u6784\u5efa\u94fe\u8868\u7684\u65f6\u5019\uff0c<code>ptr_A</code> \u4f5c\u4e3a\u5934\u8282\u70b9\u7684\u6307\u9488\uff0c\u50a8\u5b58 <code>Node B</code> \u7684\u5730\u5740\uff1b<code>ptr_B</code> \u50a8\u5b58\u7684\u662f <code>Node A</code> \u548c <code>Node C</code> \u7684\u5730\u5740\u7684\u5f02\u6216\u503c\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u5c3e\u8282\u70b9 <code>ptr_last</code> \u5b58\u50a8\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u5730\u5740\u503c</p> <p>\u6b63\u5411\u904d\u5386\u94fe\u8868\u7684\u65f6\u5019\uff0c<code>cur</code> \u6307\u9488\u4ece <code>head</code> \u51fa\u53d1\uff0c\u5148\u8bb0\u5f55 <code>Node A</code> \u7684\u5730\u5740\uff0c\u901a\u8fc7 <code>ptr_A</code> \u5230\u8fbe <code>Node B</code>\uff0c\u7136\u540e\u5c06 <code>ptr_B</code> \u4e0e <code>Node A</code> \u7684\u5730\u5740\u8fdb\u884c\u5f02\u6216\u8ba1\u7b97\uff0c\u5f97\u5230 <code>Node C</code> \u7684\u5730\u5740\u5e76\u4e14\u5230\u8fbe <code>Node C</code>\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230 <code>ptr_last</code> \u6307\u5411\u7684\u5730\u5740\u6070\u597d\u4e3a\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u7684\u5730\u5740\uff0c\u8868\u793a\u5230\u8fbe\u4e86\u5c3e\u8282\u70b9\uff0c\u904d\u5386\u7ed3\u675f</p> <p>\u5982\u679c\u6709 <code>tail</code> \u6307\u9488\uff0c\u540c\u7406\u53ef\u4ee5\u5b9e\u73b0\u53cd\u5411\u904d\u5386\u94fe\u8868</p> <p>\uff08\u5934\u5c3e\u8282\u70b9\u7684 <code>ptr</code> \u4e0d\u5b58\u50a8\u5f02\u6216\u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f5c\u4e3a\u904d\u5386\u5f00\u59cb/\u7ec8\u6b62\u7684\u6807\u8bc6\uff09</p>"},{"location":"algorithm%26data_structure/stack/","title":"\u6808 &amp;&amp; \u5355\u8c03\u6808","text":"<p>\u6808\u662f\u6ee1\u8db3\u540e\u8fdb\u5148\u51fa\u7684\u7ebf\u6027\u6570\u636e\u7ed3\u6784\uff0c\u5373 LIFO \u8868</p>"},{"location":"algorithm%26data_structure/stack/#_2","title":"\u7b80\u6613\u7684\u6570\u7ec4\u6808","text":"<pre><code>// \u663e\u5f0f\u4f7f\u7528\u6808\u9876\u6307\u9488\u7684\u5199\u6cd5\n// \u521d\u59cb\u5316\nint st[MAX_LEN];\nint top = -1;       // top = -1 \u8868\u793a\u4e3a\u7a7a\u6808\n// \u538b\u6808\nst[++top] = val;    // cin &gt;&gt; st[++top];\n// \u5f39\u6808\nif(top &gt;= 0) --top;\n// \u68c0\u6d4b\u662f\u5426\u7a7a\u6808\nbool empty = (top &lt; 0);\n// \u53d6\u6808\u9876\u5143\u7d20\nint top_val = st[top];\n// \u6e05\u7a7a\u6808\ntop = -1;\n\n// \u9690\u5f0f\u4f7f\u7528\u6808\u9876\u6307\u9488\u7684\u5199\u6cd5\n// \u521d\u59cb\u5316\uff0c\u8fd9\u91cc\u4f7f\u7528 st[0] (\u5373 *st) \u4ee3\u8868\u6808\u4e2d\u5143\u7d20\u6570\u91cf\uff0c\u540c\u65f6\u4e5f\u662f\u6808\u9876\u4e0b\u6807\n// \u4e5f\u5c31\u662f\u8bf4 st[0] = top\uff0c\u6808\u4e3a 1-index\uff0c*st = 0 \u8868\u793a\u4e3a\u7a7a\u6808\nint st[MAX_LEN];\n// \u538b\u6808\nst[++*st] = var1;\n// \u5f39\u6808 \nif (*st) --*st;\n// \u68c0\u6d4b\u662f\u5426\u7a7a\u6808\nbool empty = (*st &lt;= 0);\n// \u53d6\u6808\u9876\u5143\u7d20\nint top_val = st[*st];\n// \u6e05\u7a7a\u6808\n*st = 0;\n</code></pre>"},{"location":"algorithm%26data_structure/stack/#_3","title":"\u7b80\u6613\u7684\u5c01\u88c5\u6808","text":"<p>\u7701\u53bb\u4e86\u6808\u6ea2\u51fa\u7684\u68c0\u6d4b\uff0c\u6ca1\u6709\u4f7f\u7528\u52a8\u6001\u5927\u5c0f\u6808</p> <pre><code>#define MAX_SIZE 10000\n\nclass Stack {\nprivate:\n    int data[MAX_SIZE];\n    int top;\n\npublic:\n    // \u6784\u9020\u51fd\u6570 &amp;&amp; \u6790\u6784\u51fd\u6570\n    Stack() { top = -1; }\n    ~Stack(){};\n\n    // \u538b\u6808\n    void push(int value) {\n        data[++top] = value;\n    }\n\n    // \u5f39\u6808\n    void pop() {\n        if (!empty())\n            --top;\n    }\n\n    // \u68c0\u6d4b\u662f\u5426\u7a7a\u6808\n    bool empty() {\n        return top == -1;\n    }\n\n    // \u53d6\u6808\u9876\u5143\u7d20\uff08\u5f15\u7528\uff09\n    int&amp; top() {\n        if (!empty())\n            return data[top];\n    }\n\n    // \u6e05\u7a7a\u6808\n    void clear() {\n        top = -1;\n    }\n\n    // \u83b7\u53d6\u6808\u5927\u5c0f\n    int size() {\n        return top+1;\n    }\n};\n</code></pre>"},{"location":"algorithm%26data_structure/stack/#stl-stack","title":"STL <code>&lt;stack&gt;</code> \u5e93","text":"<p>\u652f\u6301\u7684\u51fd\u6570/\u64cd\u4f5c\u6709\uff1a</p> <pre><code>// \u5177\u4f53\u542b\u4e49\u53c2\u7167\u5c01\u88c5\u5b9e\u73b0\nst.push(val);\nst.pop();\nst.empty();\nst.top();\n// \u6ca1\u6709 clear \u64cd\u4f5c\nst.size();\n\nst1 = st2 // \u62f7\u8d1d\u64cd\u4f5c\nstack&lt;int&gt; st2 (st1); // \u62f7\u8d1d\u521d\u59cb\u5316\n</code></pre>"},{"location":"algorithm%26data_structure/stack/#_4","title":"\u5355\u8c03\u6808","text":"<p>\u5355\u8c03\u6808\u7684\u7279\u6027\u5728\u4e8e\uff0c\u5728\u63d2\u5165\u65b0\u7684\u5143\u7d20\u524d\uff0c\u53ef\u80fd\u9700\u8981\u5f39\u51fa\u90e8\u5206\u5143\u7d20\u4ee5\u6ee1\u8db3\u6808\u5143\u7d20\u7684\u5355\u8c03\u6027\uff1a</p> <p>\u6bd4\u5982\u5355\u8c03\u9012\u589e\u6808 <code>[1 2 3 4 5] &lt;-top</code> \u5728\u63d2\u5165\u5143\u7d20 <code>3</code> \u65f6\uff0c\u9700\u8981\u5148\u5f39\u51fa <code>4</code> <code>5</code> \u518d\u63d2\u5165 <code>3</code>\uff0c\u786e\u4fdd\u63d2\u5165\u540e\u6808\u6ee1\u8db3\u5355\u8c03\u6027 <code>[1 2 3 3] &lt;-top</code></p> <p>\u4ee5\u4e0b\u662f\u5b9e\u73b0\uff1a</p> <pre><code>vector&lt;int&gt; nums = {...};\nstack&lt;int&gt; st;\nfor (int i = 0; i &lt; n; i++) {\n    while (!st.empty() &amp;&amp; nums[i] &gt; st.top()) {\n        // int val = st.top()\n        st.pop();\n    }\n    st.push(nums[i]);\n}\n</code></pre> <p>\u5728\u5b9e\u9645\u8fd0\u7528\u4e2d\uff0c\u6211\u4eec\u6709\u65f6\u4e0d\u4f1a\u5c06\u6570\u503c\u5b58\u5165\u5355\u8c03\u6808\uff0c\u800c\u662f\u5c06\u4e0b\u6807\u5b58\u5165\u5355\u8c03\u6808\uff08\u5728\u5355\u8c03\u6027\u6bd4\u8f83\u65f6\u4f1a\u6bd4\u8f83\u6570\u503c\uff09\uff0c\u56e0\u4e3a\u4e0b\u6807\u8bb0\u5f55\u4e86\u6570\u7ec4\u6808\u4e2d\u6bcf\u4e2a\u503c\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e00\u989d\u5916\u4fe1\u606f\u5728\u67d0\u4e9b\u9898\u76ee\u4e2d\u975e\u5e38\u91cd\u8981</p> <p>\u8fd9\u91cc\u4e3e\u4e09\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u5176\u4e2d\u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\u5e76\u4e0d\u662f\u5178\u578b\u7684\u5355\u8c03\u6808\uff0c\u4f46\u662f\u5177\u6709\u5355\u8c03\u6808\u7684\u601d\u60f3\uff1a</p> <p>Luogu P5788 \u3010\u6a21\u677f\u3011\u5355\u8c03\u6808</p> <p>\u7ed9\u51fa\u9879\u6570\u4e3a $n$ \u7684\u6574\u6570\u6570\u5217 $a_{1 \\dots n}$\u3002</p> <p>\u5b9a\u4e49\u51fd\u6570 $f(i)$ \u4ee3\u8868\u6570\u5217\u4e2d\u7b2c $i$ \u4e2a\u5143\u7d20\u4e4b\u540e\u7b2c\u4e00\u4e2a\u5927\u4e8e $a_i$ \u7684\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u5373 $f(i) = \\min _{i &lt; j \\leq n, a_j &gt; a_i} { j }$\u3002\u82e5\u4e0d\u5b58\u5728\uff0c\u5219 $f(i)=0$\u3002</p> <p>\u8bd5\u6c42\u51fa $f(1\\dots n)$\u3002</p> <p>\u8fd9\u4e2a\u4f8b\u5b50\u662f\u5355\u8c03\u6808\u6a21\u677f</p> <pre><code>void solve() {\n    int n; cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1);  // 1-index\n    vector&lt;int&gt; f(n + 1, 0);\n    stack&lt;int&gt; st;  // \u5355\u8c03\u6808\uff0c\u9898\u76ee\u5df2\u7ecf\u975e\u5e38\u660e\u786e\u4e3a\u5b58\u50a8\u4e0b\u6807\n\n    for (int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i];\n\n    for (int i = 1; i &lt;= n; i++) {\n        // \u5f53 \u5f53\u524d\u5143\u7d20 \u5927\u4e8e \u6808\u9876\u5143\u7d20 \u65f6\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u6808\u9876\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20\n        while (!st.empty() &amp;&amp; a[i] &gt; a[st.top()]) {\n            f[st.top()] = i;  // \u8bb0\u5f55\u7ed3\u679c\n            st.pop();\n        }\n        st.push(i);  // \u5c06\u5f53\u524d\u4e0b\u6807\u5165\u6808\n    }\n\n    // \u6808\u4e2d\u5269\u4f59\u7684\u5143\u7d20\u90fd\u6ca1\u6709\u53f3\u8fb9\u66f4\u5927\u7684\u5143\u7d20\uff0cf[i] \u4fdd\u6301\u4e3a 0\n    for (int i = 1; i &lt;= n; i++) cout &lt;&lt; f[i] &lt;&lt; \" \";\n}\n</code></pre> <p>LeetCode 84. \u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62</p> <p>\u7ed9\u5b9a n \u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u7528\u6765\u8868\u793a\u67f1\u72b6\u56fe\u4e2d\u5404\u4e2a\u67f1\u5b50\u7684\u9ad8\u5ea6\u3002\u6bcf\u4e2a\u67f1\u5b50\u5f7c\u6b64\u76f8\u90bb\uff0c\u4e14\u5bbd\u5ea6\u4e3a 1 \u3002</p> <p>\u6c42\u5728\u8be5\u67f1\u72b6\u56fe\u4e2d\uff0c\u80fd\u591f\u52fe\u52d2\u51fa\u6765\u7684\u77e9\u5f62\u7684\u6700\u5927\u9762\u79ef\u3002</p> <p>\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u5355\u8c03\u6808\u6784\u9020\u7ed3\u5c3e\u7684\u7ed3\u675f\u6807\u8bc6\u7b26 / \u5bf9\u9057\u7559\u5728\u6808\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u6e05\u7406</p> <pre><code>class Solution {\npublic:\n    int largestRectangleArea(vector&lt;int&gt;&amp; heights) {\n        // \u4e00\u4e2a\u77e9\u5f62\u7684\u786e\u5b9a\u65b9\u5f0f\u662f\uff1a\u9009\u5b9a\u4e00\u4e2a\u67f1\u5b50\u4f5c\u4e3a\u56fa\u5b9a\u9ad8\u5ea6\uff0c\u5c1d\u8bd5\u5411\u4e24\u8fb9\u5ef6\u4f38\u5bbd\u5ea6\uff0c\u5bbd\u4e58\u9ad8\u5f97\u5230\u9762\u79ef\n        // \u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u7531\u9ad8\u5ea6\u503c\u51b3\u5b9a\u7684\u5355\u8c03\u9012\u589e\u6808\uff0c\u6808\u672c\u8eab\u5b58\u50a8\u4e0b\u6807\u503c\uff1a\n        // \u5bf9\u4e8e\u6808\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e0b\u6807\u503c\uff0c\u5176\u5de6\u4fa7\u7684\u503c\u5c31\u662f \u201c\u5de6\u8fb9\u754c\u4e0b\u6807 l\u201d\n        // \u5f53\u4e00\u4e2a\u4e0b\u6807\u88ab\u5f39\u51fa\u65f6\uff0c\u4f7f\u5b83\u88ab\u5f39\u51fa\u7684\u4e0b\u6807\u5c31\u662f \u201c\u53f3\u8fb9\u754c\u4e0b\u6807 r\u201d\n        // \u5bf9\u6bcf\u4e00\u4e2a\u9ad8\u4e3a h \u7684\u67f1\u5b50\uff0c\u5176\u5411\u4e24\u8fb9\u5ef6\u4f38\u7684\u6700\u5927\u5bbd\u5ea6\u4e3a (r-l-1)\n        // \uff08\u4e3a\u4e86\u786e\u4fdd\u6bcf\u6839\u67f1\u5b50\u90fd\u88ab\u5f39\u51fa\uff0c\u6700\u540e\u9762\u8981\u52a0\u4e00\u4e2a\u9ad8\u5ea6\u4e3a 0 \u7684\u67f1\u5b50\uff0c\n        // \u6216\u8005\u5728\u4e00\u8f6e\u626b\u63cf\u7ed3\u675f\u540e\u52a0\u4e0a\u989d\u5916\u7684\u6e05\u7a7a\u6808\u64cd\u4f5c\uff09\n        int ans = 0;\n        heights.push_back(0);\n        stack&lt;int&gt; st; st.push(0);\n        for(int i = 1; i &lt; heights.size(); i++){\n            while (!st.empty() &amp;&amp; heights[i] &lt; heights[st.top()]){\n                int h = heights[st.top()];\n                st.pop();\n                // \u6ce8\u610f\u7a7a\u6808\u7684\u7279\u6b8a\u5904\u7406\n                int width = i - (st.empty() ? -1 : st.top()) - 1;\n                ans = max(ans, h * width);\n            }\n            st.push(i);\n        }\n\n        // \u5982\u679c\u4e0d\u52a0\u4e0a\u9ad8\u5ea6\u4e3a 0 \u7684\u67f1\u5b50\n        // while (!st.empty()) {\n        //     int h = heights[st.top()];\n        //     st.pop();\n        //     int width = heights.size() - (st.empty() ? 0 : st.top() + 1);\n        //     ans = max(ans, h * width);\n        // }\n\n        return ans;\n    }\n};\n</code></pre> <p>Luogu P1175 \u8868\u8fbe\u5f0f\u7684\u8f6c\u6362</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b <code>0123456789+-*/^()</code> \u7684\u4e2d\u7f00\u8868\u8fbe\u5f0f\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u540e\u7f00\u8868\u8fbe\u5f0f\u540e\u8f93\u51fa\uff0c\u5e76\u4e14\u8fdb\u4e00\u6b65\u8f93\u51fa\u8ba1\u7b97\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u8fc7\u7a0b\uff0c\u8981\u6c42\u8f93\u51fa\u7684\u6bcf\u4e00\u4e2a\u6570\u636e\u95f4\u90fd\u7559\u4e00\u4e2a\u7a7a\u683c\u3002</p> <p>\u89c4\u5b9a <code>/</code> \u4e3a\u6574\u9664\uff0c\u4e58\u65b9\u8ba1\u7b97 <code>^</code> \u4e3a\u53f3\u7ed3\u5408\u8fd0\u7b97\u4e14\u5e42\u6b21\u4e0d\u4e3a\u8d1f\uff0c\u8868\u8fbe\u5f0f\u4e2d\u7684\u6570\u5b57\u90fd\u662f\u4e00\u4f4d\u6570\uff0c\u4e0d\u51fa\u73b0 <code>2*-3</code> \u7684\u5f62\u5f0f</p> <p>\u6bd4\u5982\uff1a<code>8-(3+2*6)/5+4</code> \u8fd9\u4e2a\u8f93\u5165\u7684\u6b63\u786e\u8f93\u51fa\u4e3a\uff1a</p> <pre><code>8 3 2 6 * + 5 / - 4 + \n8 3 12 + 5 / - 4 + \n8 15 5 / - 4 + \n8 3 - 4 + \n5 4 + \n9\n</code></pre>"},{"location":"algorithm%26data_structure/vector/","title":"\u987a\u5e8f\u8868 &amp;&amp; <code>&lt;vector&gt;</code>","text":""}]}